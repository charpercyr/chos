
target/x86_64-chos-kernel/debug/chos-kernel.elf:	file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <chos_kernel::per_cpu::PerCpu::with>:
       0: 55                           	pushq	%rbp
       1: 48 89 e5                     	movq	%rsp, %rbp
       4: 48 83 ec 20                  	subq	$32, %rsp
       8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
       c: e8 bf 02 00 00               	callq	0x2d0 <<chos_kernel::__PerCpu_FOO::PerCpuRef as chos_kernel::per_cpu::PerCpu>::address>
      11: 48 89 45 e0                  	movq	%rax, -32(%rbp)
      15: 48 8b 45 e0                  	movq	-32(%rbp), %rax
      19: 48 89 45 e8                  	movq	%rax, -24(%rbp)
      1d: 48 8b 7d e8                  	movq	-24(%rbp), %rdi
      21: e8 3a 02 00 00               	callq	0x260 <chos_kernel::entry::{{closure}}>
      26: 0f 0b                        	ud2
      28: 0f 0b                        	ud2
      2a: cc                           	int3
      2b: cc                           	int3
      2c: cc                           	int3
      2d: cc                           	int3
      2e: cc                           	int3
      2f: cc                           	int3

0000000000000030 <x86_64::registers::model_specific::x86_64::<impl x86_64::registers::model_specific::Msr>::write>:
      30: 55                           	pushq	%rbp
      31: 48 89 e5                     	movq	%rsp, %rbp
      34: 48 83 ec 38                  	subq	$56, %rsp
      38: 48 89 7d c8                  	movq	%rdi, -56(%rbp)
      3c: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
      40: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
      44: 89 f0                        	movl	%esi, %eax
      46: 89 45 d4                     	movl	%eax, -44(%rbp)
      49: 89 45 f8                     	movl	%eax, -8(%rbp)
      4c: 48 c1 ee 20                  	shrq	$32, %rsi
      50: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
      54: 8b 45 d4                     	movl	-44(%rbp), %eax
      57: 48 8b 4d c8                  	movq	-56(%rbp), %rcx
      5b: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
      5f: 89 55 fc                     	movl	%edx, -4(%rbp)
      62: 8b 09                        	movl	(%rcx), %ecx
      64: 0f 30                        	wrmsr
      66: 48 83 c4 38                  	addq	$56, %rsp
      6a: 5d                           	popq	%rbp
      6b: c3                           	retq
      6c: cc                           	int3
      6d: cc                           	int3
      6e: cc                           	int3
      6f: cc                           	int3

0000000000000070 <x86_64::registers::model_specific::x86_64::<impl x86_64::registers::model_specific::GsBase>::write>:
      70: 55                           	pushq	%rbp
      71: 48 89 e5                     	movq	%rsp, %rbp
      74: 48 83 ec 20                  	subq	$32, %rsp
      78: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
      7c: c7 45 f4 01 01 00 c0         	movl	$3221225729, -12(%rbp)
      83: e8 b8 00 00 00               	callq	0x140 <x86_64::addr::VirtAddr::as_u64>
      88: 48 89 45 e8                  	movq	%rax, -24(%rbp)
      8c: 48 8b 75 e8                  	movq	-24(%rbp), %rsi
      90: 48 8d 7d f4                  	leaq	-12(%rbp), %rdi
      94: e8 97 ff ff ff               	callq	0x30 <x86_64::registers::model_specific::x86_64::<impl x86_64::registers::model_specific::Msr>::write>
      99: 48 83 c4 20                  	addq	$32, %rsp
      9d: 5d                           	popq	%rbp
      9e: c3                           	retq
      9f: cc                           	int3

00000000000000a0 <core::fmt::ArgumentV1::new>:
      a0: 55                           	pushq	%rbp
      a1: 48 89 e5                     	movq	%rsp, %rbp
      a4: 48 83 ec 48                  	subq	$72, %rsp
      a8: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
      ac: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
      b0: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
      b4: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
      b8: 48 8b 45 f0                  	movq	-16(%rbp), %rax
      bc: 48 89 45 c8                  	movq	%rax, -56(%rbp)
      c0: 48 8b 45 c0                  	movq	-64(%rbp), %rax
      c4: 48 89 45 f8                  	movq	%rax, -8(%rbp)
      c8: 48 8b 45 f8                  	movq	-8(%rbp), %rax
      cc: 48 89 45 b8                  	movq	%rax, -72(%rbp)
      d0: 48 8b 45 c8                  	movq	-56(%rbp), %rax
      d4: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
      d8: 48 89 4d d0                  	movq	%rcx, -48(%rbp)
      dc: 48 89 45 d8                  	movq	%rax, -40(%rbp)
      e0: 48 8b 45 d0                  	movq	-48(%rbp), %rax
      e4: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
      e8: 48 83 c4 48                  	addq	$72, %rsp
      ec: 5d                           	popq	%rbp
      ed: c3                           	retq
      ee: cc                           	int3
      ef: cc                           	int3

00000000000000f0 <<&mut T as core::fmt::Display>::fmt>:
      f0: 55                           	pushq	%rbp
      f1: 48 89 e5                     	movq	%rsp, %rbp
      f4: 48 83 ec 20                  	subq	$32, %rsp
      f8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
      fc: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     100: 48 8b 3f                     	movq	(%rdi), %rdi
     103: e8 58 1e 00 00               	callq	0x1f60 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
     108: 88 45 ef                     	movb	%al, -17(%rbp)
     10b: 8a 45 ef                     	movb	-17(%rbp), %al
     10e: 24 01                        	andb	$1, %al
     110: 0f b6 c0                     	movzbl	%al, %eax
     113: 48 83 c4 20                  	addq	$32, %rsp
     117: 5d                           	popq	%rbp
     118: c3                           	retq
     119: cc                           	int3
     11a: cc                           	int3
     11b: cc                           	int3
     11c: cc                           	int3
     11d: cc                           	int3
     11e: cc                           	int3
     11f: cc                           	int3

0000000000000120 <x86_64::addr::VirtAddr::new_unsafe>:
     120: 55                           	pushq	%rbp
     121: 48 89 e5                     	movq	%rsp, %rbp
     124: 48 83 ec 10                  	subq	$16, %rsp
     128: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     12c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     130: 48 8b 45 f0                  	movq	-16(%rbp), %rax
     134: 48 83 c4 10                  	addq	$16, %rsp
     138: 5d                           	popq	%rbp
     139: c3                           	retq
     13a: cc                           	int3
     13b: cc                           	int3
     13c: cc                           	int3
     13d: cc                           	int3
     13e: cc                           	int3
     13f: cc                           	int3

0000000000000140 <x86_64::addr::VirtAddr::as_u64>:
     140: 55                           	pushq	%rbp
     141: 48 89 e5                     	movq	%rsp, %rbp
     144: 50                           	pushq	%rax
     145: 48 89 f8                     	movq	%rdi, %rax
     148: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     14c: 48 83 c4 08                  	addq	$8, %rsp
     150: 5d                           	popq	%rbp
     151: c3                           	retq
     152: cc                           	int3
     153: cc                           	int3
     154: cc                           	int3
     155: cc                           	int3
     156: cc                           	int3
     157: cc                           	int3
     158: cc                           	int3
     159: cc                           	int3
     15a: cc                           	int3
     15b: cc                           	int3
     15c: cc                           	int3
     15d: cc                           	int3
     15e: cc                           	int3
     15f: cc                           	int3

0000000000000160 <<chos_kernel::__PerCpu_BAR::PerCpuRef as chos_kernel::per_cpu::PerCpu>::address>:
     160: 55                           	pushq	%rbp
     161: 48 89 e5                     	movq	%rsp, %rbp
     164: 48 83 ec 10                  	subq	$16, %rsp
     168: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     16c: 48 31 c0                     	xorq	%rax, %rax
     16f: 65 48 8d 80 00 00 00 80      	leaq	%gs:-2147483648(%rax), %rax
     177: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     17b: 48 8b 45 f0                  	movq	-16(%rbp), %rax
     17f: 48 83 c4 10                  	addq	$16, %rsp
     183: 5d                           	popq	%rbp
     184: c3                           	retq
     185: cc                           	int3
     186: cc                           	int3
     187: cc                           	int3
     188: cc                           	int3
     189: cc                           	int3
     18a: cc                           	int3
     18b: cc                           	int3
     18c: cc                           	int3
     18d: cc                           	int3
     18e: cc                           	int3
     18f: cc                           	int3

0000000000000190 <chos_kernel::entry::{{closure}}::{{closure}}>:
     190: 55                           	pushq	%rbp
     191: 48 89 e5                     	movq	%rsp, %rbp
     194: 48 81 ec b0 00 00 00         	subq	$176, %rsp
     19b: 48 89 75 80                  	movq	%rsi, -128(%rbp)
     19f: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     1a3: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
     1a7: 48 8d 45 80                  	leaq	-128(%rbp), %rax
     1ab: 48 89 45 e0                  	movq	%rax, -32(%rbp)
     1af: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
     1b3: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     1b7: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     1bb: 48 89 85 68 ff ff ff         	movq	%rax, -152(%rbp)
     1c2: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     1c6: 48 8d 35 23 ff ff ff         	leaq	-221(%rip), %rsi  # f0 <<&mut T as core::fmt::Display>::fmt>
     1cd: e8 ce fe ff ff               	callq	0xa0 <core::fmt::ArgumentV1::new>
     1d2: 48 89 85 70 ff ff ff         	movq	%rax, -144(%rbp)
     1d9: 48 89 95 78 ff ff ff         	movq	%rdx, -136(%rbp)
     1e0: 48 8b bd 68 ff ff ff         	movq	-152(%rbp), %rdi
     1e7: 48 8d 35 02 ff ff ff         	leaq	-254(%rip), %rsi  # f0 <<&mut T as core::fmt::Display>::fmt>
     1ee: e8 ad fe ff ff               	callq	0xa0 <core::fmt::ArgumentV1::new>
     1f3: 48 89 85 58 ff ff ff         	movq	%rax, -168(%rbp)
     1fa: 48 89 95 60 ff ff ff         	movq	%rdx, -160(%rbp)
     201: 48 8b 85 60 ff ff ff         	movq	-160(%rbp), %rax
     208: 48 8b 8d 58 ff ff ff         	movq	-168(%rbp), %rcx
     20f: 48 8b 95 78 ff ff ff         	movq	-136(%rbp), %rdx
     216: 48 8b b5 70 ff ff ff         	movq	-144(%rbp), %rsi
     21d: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     221: 48 89 55 c0                  	movq	%rdx, -64(%rbp)
     225: 48 89 4d c8                  	movq	%rcx, -56(%rbp)
     229: 48 89 45 d0                  	movq	%rax, -48(%rbp)
     22d: 48 8d 4d b8                  	leaq	-72(%rbp), %rcx
     231: 48 8d 7d 88                  	leaq	-120(%rbp), %rdi
     235: 48 8d 35 c4 3d 00 00         	leaq	15812(%rip), %rsi  # 4000 <fnf7m4j88ixvo7g+0x4000>
     23c: 41 b8 02 00 00 00            	movl	$2, %r8d
     242: 4c 89 c2                     	movq	%r8, %rdx
     245: e8 d6 00 00 00               	callq	0x320 <core::fmt::Arguments::new_v1>
     24a: 48 8d 35 cf 3d 00 00         	leaq	15823(%rip), %rsi  # 4020 <fnf7m4j88ixvo7g+0x4020>
     251: 48 8d 7d 88                  	leaq	-120(%rbp), %rdi
     255: e8 f6 06 00 00               	callq	0x950 <core::panicking::panic_fmt>
     25a: 0f 0b                        	ud2
     25c: cc                           	int3
     25d: cc                           	int3
     25e: cc                           	int3
     25f: cc                           	int3

0000000000000260 <chos_kernel::entry::{{closure}}>:
     260: 55                           	pushq	%rbp
     261: 48 89 e5                     	movq	%rsp, %rbp
     264: 48 83 ec 20                  	subq	$32, %rsp
     268: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     26c: 48 8d 45 e8                  	leaq	-24(%rbp), %rax
     270: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     274: 48 8b 75 f0                  	movq	-16(%rbp), %rsi
     278: 48 8d 3d 81 4d 00 00         	leaq	19841(%rip), %rdi  # 5000 <chos_kernel::__PerCpu_BAR::BAR>
     27f: e8 0c 00 00 00               	callq	0x290 <chos_kernel::per_cpu::PerCpu::with>
     284: 0f 0b                        	ud2
     286: cc                           	int3
     287: cc                           	int3
     288: cc                           	int3
     289: cc                           	int3
     28a: cc                           	int3
     28b: cc                           	int3
     28c: cc                           	int3
     28d: cc                           	int3
     28e: cc                           	int3
     28f: cc                           	int3

0000000000000290 <chos_kernel::per_cpu::PerCpu::with>:
     290: 55                           	pushq	%rbp
     291: 48 89 e5                     	movq	%rsp, %rbp
     294: 48 83 ec 30                  	subq	$48, %rsp
     298: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
     29c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     2a0: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     2a4: e8 b7 fe ff ff               	callq	0x160 <<chos_kernel::__PerCpu_BAR::PerCpuRef as chos_kernel::per_cpu::PerCpu>::address>
     2a9: 48 89 45 e0                  	movq	%rax, -32(%rbp)
     2ad: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
     2b1: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     2b5: 48 89 45 e8                  	movq	%rax, -24(%rbp)
     2b9: 48 8b 75 e8                  	movq	-24(%rbp), %rsi
     2bd: e8 ce fe ff ff               	callq	0x190 <chos_kernel::entry::{{closure}}::{{closure}}>
     2c2: 0f 0b                        	ud2
     2c4: 0f 0b                        	ud2
     2c6: cc                           	int3
     2c7: cc                           	int3
     2c8: cc                           	int3
     2c9: cc                           	int3
     2ca: cc                           	int3
     2cb: cc                           	int3
     2cc: cc                           	int3
     2cd: cc                           	int3
     2ce: cc                           	int3
     2cf: cc                           	int3

00000000000002d0 <<chos_kernel::__PerCpu_FOO::PerCpuRef as chos_kernel::per_cpu::PerCpu>::address>:
     2d0: 55                           	pushq	%rbp
     2d1: 48 89 e5                     	movq	%rsp, %rbp
     2d4: 48 83 ec 10                  	subq	$16, %rsp
     2d8: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     2dc: 48 31 c0                     	xorq	%rax, %rax
     2df: 65 48 8d 80 08 00 00 80      	leaq	%gs:-2147483640(%rax), %rax
     2e7: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     2eb: 48 8b 45 f0                  	movq	-16(%rbp), %rax
     2ef: 48 83 c4 10                  	addq	$16, %rsp
     2f3: 5d                           	popq	%rbp
     2f4: c3                           	retq
     2f5: cc                           	int3
     2f6: cc                           	int3
     2f7: cc                           	int3
     2f8: cc                           	int3
     2f9: cc                           	int3
     2fa: cc                           	int3
     2fb: cc                           	int3
     2fc: cc                           	int3
     2fd: cc                           	int3
     2fe: cc                           	int3
     2ff: cc                           	int3

0000000000000300 <core::num::<impl u64>::wrapping_add>:
     300: 55                           	pushq	%rbp
     301: 48 89 e5                     	movq	%rsp, %rbp
     304: 48 83 ec 10                  	subq	$16, %rsp
     308: 48 89 f8                     	movq	%rdi, %rax
     30b: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     30f: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     313: 48 01 f0                     	addq	%rsi, %rax
     316: 48 83 c4 10                  	addq	$16, %rsp
     31a: 5d                           	popq	%rbp
     31b: c3                           	retq
     31c: cc                           	int3
     31d: cc                           	int3
     31e: cc                           	int3
     31f: cc                           	int3

0000000000000320 <core::fmt::Arguments::new_v1>:
     320: 55                           	pushq	%rbp
     321: 48 89 e5                     	movq	%rsp, %rbp
     324: 48 83 ec 30                  	subq	$48, %rsp
     328: 48 89 f8                     	movq	%rdi, %rax
     32b: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
     32f: 48 89 55 e8                  	movq	%rdx, -24(%rbp)
     333: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
     337: 4c 89 45 f8                  	movq	%r8, -8(%rbp)
     33b: 48 c7 45 d0 00 00 00 00      	movq	$0, -48(%rbp)
     343: 48 89 37                     	movq	%rsi, (%rdi)
     346: 48 89 57 08                  	movq	%rdx, 8(%rdi)
     34a: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
     34e: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
     352: 48 89 77 10                  	movq	%rsi, 16(%rdi)
     356: 48 89 57 18                  	movq	%rdx, 24(%rdi)
     35a: 48 89 4f 20                  	movq	%rcx, 32(%rdi)
     35e: 4c 89 47 28                  	movq	%r8, 40(%rdi)
     362: 48 83 c4 30                  	addq	$48, %rsp
     366: 5d                           	popq	%rbp
     367: c3                           	retq
     368: cc                           	int3
     369: cc                           	int3
     36a: cc                           	int3
     36b: cc                           	int3
     36c: cc                           	int3
     36d: cc                           	int3
     36e: cc                           	int3
     36f: cc                           	int3

0000000000000370 <rust_begin_unwind>:
     370: 55                           	pushq	%rbp
     371: 48 89 e5                     	movq	%rsp, %rbp
     374: 50                           	pushq	%rax
     375: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     379: eb fe                        	jmp	0x379 <rust_begin_unwind+0x9>
     37b: cc                           	int3
     37c: cc                           	int3
     37d: cc                           	int3
     37e: cc                           	int3
     37f: cc                           	int3

0000000000000380 <entry>:
     380: 55                           	pushq	%rbp
     381: 48 89 e5                     	movq	%rsp, %rbp
     384: 48 83 ec 20                  	subq	$32, %rsp
     388: bf 00 40 00 00               	movl	$16384, %edi
     38d: be 00 00 00 80               	movl	$2147483648, %esi
     392: e8 69 ff ff ff               	callq	0x300 <core::num::<impl u64>::wrapping_add>
     397: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     39b: 48 8b 7d f0                  	movq	-16(%rbp), %rdi
     39f: e8 7c fd ff ff               	callq	0x120 <x86_64::addr::VirtAddr::new_unsafe>
     3a4: 48 89 45 e8                  	movq	%rax, -24(%rbp)
     3a8: 48 8b 7d e8                  	movq	-24(%rbp), %rdi
     3ac: e8 bf fc ff ff               	callq	0x70 <x86_64::registers::model_specific::x86_64::<impl x86_64::registers::model_specific::GsBase>::write>
     3b1: 48 8d 3d 5b 4c 00 00         	leaq	19547(%rip), %rdi  # 5013 <chos_kernel::__PerCpu_FOO::FOO>
     3b8: e8 43 fc ff ff               	callq	0x0 <chos_kernel::per_cpu::PerCpu::with>
     3bd: 0f 0b                        	ud2
     3bf: cc                           	int3

00000000000003c0 <core::intrinsics::is_aligned_and_not_null>:
     3c0: 55                           	pushq	%rbp
     3c1: 48 89 e5                     	movq	%rsp, %rbp
     3c4: 48 83 ec 30                  	subq	$48, %rsp
     3c8: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     3cc: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     3d0: e8 9b 06 00 00               	callq	0xa70 <core::ptr::const_ptr::<impl *const T>::is_null>
     3d5: 88 45 ee                     	movb	%al, -18(%rbp)
     3d8: eb 2c                        	jmp	0x406 <core::intrinsics::is_aligned_and_not_null+0x46>
     3da: c6 45 ef 01                  	movb	$1, -17(%rbp)
     3de: eb 18                        	jmp	0x3f8 <core::intrinsics::is_aligned_and_not_null+0x38>
     3e0: c6 45 ef 00                  	movb	$0, -17(%rbp)
     3e4: eb 12                        	jmp	0x3f8 <core::intrinsics::is_aligned_and_not_null+0x38>
     3e6: 48 c7 45 f8 04 00 00 00      	movq	$4, -8(%rbp)
     3ee: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     3f2: 48 89 45 d8                  	movq	%rax, -40(%rbp)
     3f6: eb 19                        	jmp	0x411 <core::intrinsics::is_aligned_and_not_null+0x51>
     3f8: 8a 45 ef                     	movb	-17(%rbp), %al
     3fb: 24 01                        	andb	$1, %al
     3fd: 0f b6 c0                     	movzbl	%al, %eax
     400: 48 83 c4 30                  	addq	$48, %rsp
     404: 5d                           	popq	%rbp
     405: c3                           	retq
     406: 8a 45 ee                     	movb	-18(%rbp), %al
     409: 34 ff                        	xorb	$-1, %al
     40b: a8 01                        	testb	$1, %al
     40d: 75 d7                        	jne	0x3e6 <core::intrinsics::is_aligned_and_not_null+0x26>
     40f: eb cf                        	jmp	0x3e0 <core::intrinsics::is_aligned_and_not_null+0x20>
     411: 48 8b 45 d8                  	movq	-40(%rbp), %rax
     415: 48 83 f8 00                  	cmpq	$0, %rax
     419: 0f 94 c0                     	sete	%al
     41c: a8 01                        	testb	$1, %al
     41e: 75 15                        	jne	0x435 <core::intrinsics::is_aligned_and_not_null+0x75>
     420: 48 8b 4d d8                  	movq	-40(%rbp), %rcx
     424: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     428: 31 d2                        	xorl	%edx, %edx
     42a: 48 f7 f1                     	divq	%rcx
     42d: 48 83 fa 00                  	cmpq	$0, %rdx
     431: 74 a7                        	je	0x3da <core::intrinsics::is_aligned_and_not_null+0x1a>
     433: eb ab                        	jmp	0x3e0 <core::intrinsics::is_aligned_and_not_null+0x20>
     435: 48 8d 3d 84 4c 00 00         	leaq	19588(%rip), %rdi  # 50c0 <str.2>
     43c: 48 8d 15 f5 3b 00 00         	leaq	15349(%rip), %rdx  # 4038 <fnf7m4j88ixvo7g+0x4038>
     443: be 39 00 00 00               	movl	$57, %esi
     448: e8 b3 04 00 00               	callq	0x900 <core::panicking::panic>
     44d: 0f 0b                        	ud2
     44f: cc                           	int3

0000000000000450 <core::intrinsics::is_aligned_and_not_null>:
     450: 55                           	pushq	%rbp
     451: 48 89 e5                     	movq	%rsp, %rbp
     454: 48 83 ec 30                  	subq	$48, %rsp
     458: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     45c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     460: e8 ab 05 00 00               	callq	0xa10 <core::ptr::const_ptr::<impl *const T>::is_null>
     465: 88 45 ee                     	movb	%al, -18(%rbp)
     468: eb 2c                        	jmp	0x496 <core::intrinsics::is_aligned_and_not_null+0x46>
     46a: c6 45 ef 01                  	movb	$1, -17(%rbp)
     46e: eb 18                        	jmp	0x488 <core::intrinsics::is_aligned_and_not_null+0x38>
     470: c6 45 ef 00                  	movb	$0, -17(%rbp)
     474: eb 12                        	jmp	0x488 <core::intrinsics::is_aligned_and_not_null+0x38>
     476: 48 c7 45 f8 08 00 00 00      	movq	$8, -8(%rbp)
     47e: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     482: 48 89 45 d8                  	movq	%rax, -40(%rbp)
     486: eb 19                        	jmp	0x4a1 <core::intrinsics::is_aligned_and_not_null+0x51>
     488: 8a 45 ef                     	movb	-17(%rbp), %al
     48b: 24 01                        	andb	$1, %al
     48d: 0f b6 c0                     	movzbl	%al, %eax
     490: 48 83 c4 30                  	addq	$48, %rsp
     494: 5d                           	popq	%rbp
     495: c3                           	retq
     496: 8a 45 ee                     	movb	-18(%rbp), %al
     499: 34 ff                        	xorb	$-1, %al
     49b: a8 01                        	testb	$1, %al
     49d: 75 d7                        	jne	0x476 <core::intrinsics::is_aligned_and_not_null+0x26>
     49f: eb cf                        	jmp	0x470 <core::intrinsics::is_aligned_and_not_null+0x20>
     4a1: 48 8b 45 d8                  	movq	-40(%rbp), %rax
     4a5: 48 83 f8 00                  	cmpq	$0, %rax
     4a9: 0f 94 c0                     	sete	%al
     4ac: a8 01                        	testb	$1, %al
     4ae: 75 15                        	jne	0x4c5 <core::intrinsics::is_aligned_and_not_null+0x75>
     4b0: 48 8b 4d d8                  	movq	-40(%rbp), %rcx
     4b4: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     4b8: 31 d2                        	xorl	%edx, %edx
     4ba: 48 f7 f1                     	divq	%rcx
     4bd: 48 83 fa 00                  	cmpq	$0, %rdx
     4c1: 74 a7                        	je	0x46a <core::intrinsics::is_aligned_and_not_null+0x1a>
     4c3: eb ab                        	jmp	0x470 <core::intrinsics::is_aligned_and_not_null+0x20>
     4c5: 48 8d 3d f4 4b 00 00         	leaq	19444(%rip), %rdi  # 50c0 <str.2>
     4cc: 48 8d 15 65 3b 00 00         	leaq	15205(%rip), %rdx  # 4038 <fnf7m4j88ixvo7g+0x4038>
     4d3: be 39 00 00 00               	movl	$57, %esi
     4d8: e8 23 04 00 00               	callq	0x900 <core::panicking::panic>
     4dd: 0f 0b                        	ud2
     4df: cc                           	int3

00000000000004e0 <core::intrinsics::is_aligned_and_not_null>:
     4e0: 55                           	pushq	%rbp
     4e1: 48 89 e5                     	movq	%rsp, %rbp
     4e4: 48 83 ec 30                  	subq	$48, %rsp
     4e8: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     4ec: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     4f0: e8 4b 05 00 00               	callq	0xa40 <core::ptr::const_ptr::<impl *const T>::is_null>
     4f5: 88 45 ee                     	movb	%al, -18(%rbp)
     4f8: eb 2c                        	jmp	0x526 <core::intrinsics::is_aligned_and_not_null+0x46>
     4fa: c6 45 ef 01                  	movb	$1, -17(%rbp)
     4fe: eb 18                        	jmp	0x518 <core::intrinsics::is_aligned_and_not_null+0x38>
     500: c6 45 ef 00                  	movb	$0, -17(%rbp)
     504: eb 12                        	jmp	0x518 <core::intrinsics::is_aligned_and_not_null+0x38>
     506: 48 c7 45 f8 01 00 00 00      	movq	$1, -8(%rbp)
     50e: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     512: 48 89 45 d8                  	movq	%rax, -40(%rbp)
     516: eb 19                        	jmp	0x531 <core::intrinsics::is_aligned_and_not_null+0x51>
     518: 8a 45 ef                     	movb	-17(%rbp), %al
     51b: 24 01                        	andb	$1, %al
     51d: 0f b6 c0                     	movzbl	%al, %eax
     520: 48 83 c4 30                  	addq	$48, %rsp
     524: 5d                           	popq	%rbp
     525: c3                           	retq
     526: 8a 45 ee                     	movb	-18(%rbp), %al
     529: 34 ff                        	xorb	$-1, %al
     52b: a8 01                        	testb	$1, %al
     52d: 75 d7                        	jne	0x506 <core::intrinsics::is_aligned_and_not_null+0x26>
     52f: eb cf                        	jmp	0x500 <core::intrinsics::is_aligned_and_not_null+0x20>
     531: 48 8b 45 d8                  	movq	-40(%rbp), %rax
     535: 48 83 f8 00                  	cmpq	$0, %rax
     539: 0f 94 c0                     	sete	%al
     53c: a8 01                        	testb	$1, %al
     53e: 75 15                        	jne	0x555 <core::intrinsics::is_aligned_and_not_null+0x75>
     540: 48 8b 4d d8                  	movq	-40(%rbp), %rcx
     544: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     548: 31 d2                        	xorl	%edx, %edx
     54a: 48 f7 f1                     	divq	%rcx
     54d: 48 83 fa 00                  	cmpq	$0, %rdx
     551: 74 a7                        	je	0x4fa <core::intrinsics::is_aligned_and_not_null+0x1a>
     553: eb ab                        	jmp	0x500 <core::intrinsics::is_aligned_and_not_null+0x20>
     555: 48 8d 3d 64 4b 00 00         	leaq	19300(%rip), %rdi  # 50c0 <str.2>
     55c: 48 8d 15 d5 3a 00 00         	leaq	15061(%rip), %rdx  # 4038 <fnf7m4j88ixvo7g+0x4038>
     563: be 39 00 00 00               	movl	$57, %esi
     568: e8 93 03 00 00               	callq	0x900 <core::panicking::panic>
     56d: 0f 0b                        	ud2
     56f: cc                           	int3

0000000000000570 <core::intrinsics::is_aligned_and_not_null>:
     570: 55                           	pushq	%rbp
     571: 48 89 e5                     	movq	%rsp, %rbp
     574: 48 83 ec 30                  	subq	$48, %rsp
     578: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     57c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     580: e8 eb 07 00 00               	callq	0xd70 <core::ptr::const_ptr::<impl *const T>::is_null>
     585: 88 45 ee                     	movb	%al, -18(%rbp)
     588: eb 2c                        	jmp	0x5b6 <core::intrinsics::is_aligned_and_not_null+0x46>
     58a: c6 45 ef 01                  	movb	$1, -17(%rbp)
     58e: eb 18                        	jmp	0x5a8 <core::intrinsics::is_aligned_and_not_null+0x38>
     590: c6 45 ef 00                  	movb	$0, -17(%rbp)
     594: eb 12                        	jmp	0x5a8 <core::intrinsics::is_aligned_and_not_null+0x38>
     596: 48 c7 45 f8 01 00 00 00      	movq	$1, -8(%rbp)
     59e: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     5a2: 48 89 45 d8                  	movq	%rax, -40(%rbp)
     5a6: eb 19                        	jmp	0x5c1 <core::intrinsics::is_aligned_and_not_null+0x51>
     5a8: 8a 45 ef                     	movb	-17(%rbp), %al
     5ab: 24 01                        	andb	$1, %al
     5ad: 0f b6 c0                     	movzbl	%al, %eax
     5b0: 48 83 c4 30                  	addq	$48, %rsp
     5b4: 5d                           	popq	%rbp
     5b5: c3                           	retq
     5b6: 8a 45 ee                     	movb	-18(%rbp), %al
     5b9: 34 ff                        	xorb	$-1, %al
     5bb: a8 01                        	testb	$1, %al
     5bd: 75 d7                        	jne	0x596 <core::intrinsics::is_aligned_and_not_null+0x26>
     5bf: eb cf                        	jmp	0x590 <core::intrinsics::is_aligned_and_not_null+0x20>
     5c1: 48 8b 45 d8                  	movq	-40(%rbp), %rax
     5c5: 48 83 f8 00                  	cmpq	$0, %rax
     5c9: 0f 94 c0                     	sete	%al
     5cc: a8 01                        	testb	$1, %al
     5ce: 75 15                        	jne	0x5e5 <core::intrinsics::is_aligned_and_not_null+0x75>
     5d0: 48 8b 4d d8                  	movq	-40(%rbp), %rcx
     5d4: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     5d8: 31 d2                        	xorl	%edx, %edx
     5da: 48 f7 f1                     	divq	%rcx
     5dd: 48 83 fa 00                  	cmpq	$0, %rdx
     5e1: 74 a7                        	je	0x58a <core::intrinsics::is_aligned_and_not_null+0x1a>
     5e3: eb ab                        	jmp	0x590 <core::intrinsics::is_aligned_and_not_null+0x20>
     5e5: 48 8d 3d d4 4a 00 00         	leaq	19156(%rip), %rdi  # 50c0 <str.2>
     5ec: 48 8d 15 45 3a 00 00         	leaq	14917(%rip), %rdx  # 4038 <fnf7m4j88ixvo7g+0x4038>
     5f3: be 39 00 00 00               	movl	$57, %esi
     5f8: e8 03 03 00 00               	callq	0x900 <core::panicking::panic>
     5fd: 0f 0b                        	ud2
     5ff: cc                           	int3

0000000000000600 <core::intrinsics::is_nonoverlapping>:
     600: 55                           	pushq	%rbp
     601: 48 89 e5                     	movq	%rsp, %rbp
     604: 48 81 ec 80 00 00 00         	subq	$128, %rsp
     60b: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
     60f: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     613: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
     617: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
     61b: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
     61f: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
     623: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     627: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     62b: 48 8b 75 b0                  	movq	-80(%rbp), %rsi
     62f: bf 08 00 00 00               	movl	$8, %edi
     634: e8 87 1a 00 00               	callq	0x20c0 <core::num::<impl usize>::checked_mul>
     639: 48 89 45 a0                  	movq	%rax, -96(%rbp)
     63d: 48 89 55 a8                  	movq	%rdx, -88(%rbp)
     641: 48 8b 75 a8                  	movq	-88(%rbp), %rsi
     645: 48 8b 7d a0                  	movq	-96(%rbp), %rdi
     649: 48 8d 15 00 3a 00 00         	leaq	14848(%rip), %rdx  # 4050 <fnf7m4j88ixvo7g+0x4050>
     650: e8 0b 2c 00 00               	callq	0x3260 <core::option::Option<T>::unwrap>
     655: 48 89 45 98                  	movq	%rax, -104(%rbp)
     659: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     65d: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     661: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     665: 48 39 c8                     	cmpq	%rcx, %rax
     668: 76 18                        	jbe	0x682 <core::intrinsics::is_nonoverlapping+0x82>
     66a: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     66e: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     672: 48 29 c8                     	subq	%rcx, %rax
     675: 48 89 45 90                  	movq	%rax, -112(%rbp)
     679: 0f 92 c0                     	setb	%al
     67c: a8 01                        	testb	$1, %al
     67e: 75 45                        	jne	0x6c5 <core::intrinsics::is_nonoverlapping+0xc5>
     680: eb 18                        	jmp	0x69a <core::intrinsics::is_nonoverlapping+0x9a>
     682: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
     686: 48 8b 45 b8                  	movq	-72(%rbp), %rax
     68a: 48 29 c8                     	subq	%rcx, %rax
     68d: 48 89 45 88                  	movq	%rax, -120(%rbp)
     691: 0f 92 c0                     	setb	%al
     694: a8 01                        	testb	$1, %al
     696: 75 47                        	jne	0x6df <core::intrinsics::is_nonoverlapping+0xdf>
     698: eb 0a                        	jmp	0x6a4 <core::intrinsics::is_nonoverlapping+0xa4>
     69a: 48 8b 45 90                  	movq	-112(%rbp), %rax
     69e: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     6a2: eb 08                        	jmp	0x6ac <core::intrinsics::is_nonoverlapping+0xac>
     6a4: 48 8b 45 88                  	movq	-120(%rbp), %rax
     6a8: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     6ac: 48 8b 45 98                  	movq	-104(%rbp), %rax
     6b0: 48 39 45 c8                  	cmpq	%rax, -56(%rbp)
     6b4: 0f 93 c0                     	setae	%al
     6b7: 24 01                        	andb	$1, %al
     6b9: 0f b6 c0                     	movzbl	%al, %eax
     6bc: 48 81 c4 80 00 00 00         	addq	$128, %rsp
     6c3: 5d                           	popq	%rbp
     6c4: c3                           	retq
     6c5: 48 8d 3d 54 49 00 00         	leaq	18772(%rip), %rdi  # 5020 <str.0>
     6cc: 48 8d 15 95 39 00 00         	leaq	14741(%rip), %rdx  # 4068 <fnf7m4j88ixvo7g+0x4068>
     6d3: be 21 00 00 00               	movl	$33, %esi
     6d8: e8 23 02 00 00               	callq	0x900 <core::panicking::panic>
     6dd: 0f 0b                        	ud2
     6df: 48 8d 3d 3a 49 00 00         	leaq	18746(%rip), %rdi  # 5020 <str.0>
     6e6: 48 8d 15 93 39 00 00         	leaq	14739(%rip), %rdx  # 4080 <fnf7m4j88ixvo7g+0x4080>
     6ed: be 21 00 00 00               	movl	$33, %esi
     6f2: e8 09 02 00 00               	callq	0x900 <core::panicking::panic>
     6f7: 0f 0b                        	ud2
     6f9: cc                           	int3
     6fa: cc                           	int3
     6fb: cc                           	int3
     6fc: cc                           	int3
     6fd: cc                           	int3
     6fe: cc                           	int3
     6ff: cc                           	int3

0000000000000700 <core::intrinsics::is_nonoverlapping>:
     700: 55                           	pushq	%rbp
     701: 48 89 e5                     	movq	%rsp, %rbp
     704: 48 81 ec 80 00 00 00         	subq	$128, %rsp
     70b: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
     70f: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     713: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
     717: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
     71b: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
     71f: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
     723: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     727: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     72b: 48 8b 75 b0                  	movq	-80(%rbp), %rsi
     72f: bf 04 00 00 00               	movl	$4, %edi
     734: e8 87 19 00 00               	callq	0x20c0 <core::num::<impl usize>::checked_mul>
     739: 48 89 45 a0                  	movq	%rax, -96(%rbp)
     73d: 48 89 55 a8                  	movq	%rdx, -88(%rbp)
     741: 48 8b 75 a8                  	movq	-88(%rbp), %rsi
     745: 48 8b 7d a0                  	movq	-96(%rbp), %rdi
     749: 48 8d 15 00 39 00 00         	leaq	14592(%rip), %rdx  # 4050 <fnf7m4j88ixvo7g+0x4050>
     750: e8 0b 2b 00 00               	callq	0x3260 <core::option::Option<T>::unwrap>
     755: 48 89 45 98                  	movq	%rax, -104(%rbp)
     759: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     75d: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     761: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     765: 48 39 c8                     	cmpq	%rcx, %rax
     768: 76 18                        	jbe	0x782 <core::intrinsics::is_nonoverlapping+0x82>
     76a: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     76e: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     772: 48 29 c8                     	subq	%rcx, %rax
     775: 48 89 45 90                  	movq	%rax, -112(%rbp)
     779: 0f 92 c0                     	setb	%al
     77c: a8 01                        	testb	$1, %al
     77e: 75 45                        	jne	0x7c5 <core::intrinsics::is_nonoverlapping+0xc5>
     780: eb 18                        	jmp	0x79a <core::intrinsics::is_nonoverlapping+0x9a>
     782: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
     786: 48 8b 45 b8                  	movq	-72(%rbp), %rax
     78a: 48 29 c8                     	subq	%rcx, %rax
     78d: 48 89 45 88                  	movq	%rax, -120(%rbp)
     791: 0f 92 c0                     	setb	%al
     794: a8 01                        	testb	$1, %al
     796: 75 47                        	jne	0x7df <core::intrinsics::is_nonoverlapping+0xdf>
     798: eb 0a                        	jmp	0x7a4 <core::intrinsics::is_nonoverlapping+0xa4>
     79a: 48 8b 45 90                  	movq	-112(%rbp), %rax
     79e: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     7a2: eb 08                        	jmp	0x7ac <core::intrinsics::is_nonoverlapping+0xac>
     7a4: 48 8b 45 88                  	movq	-120(%rbp), %rax
     7a8: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     7ac: 48 8b 45 98                  	movq	-104(%rbp), %rax
     7b0: 48 39 45 c8                  	cmpq	%rax, -56(%rbp)
     7b4: 0f 93 c0                     	setae	%al
     7b7: 24 01                        	andb	$1, %al
     7b9: 0f b6 c0                     	movzbl	%al, %eax
     7bc: 48 81 c4 80 00 00 00         	addq	$128, %rsp
     7c3: 5d                           	popq	%rbp
     7c4: c3                           	retq
     7c5: 48 8d 3d 54 48 00 00         	leaq	18516(%rip), %rdi  # 5020 <str.0>
     7cc: 48 8d 15 95 38 00 00         	leaq	14485(%rip), %rdx  # 4068 <fnf7m4j88ixvo7g+0x4068>
     7d3: be 21 00 00 00               	movl	$33, %esi
     7d8: e8 23 01 00 00               	callq	0x900 <core::panicking::panic>
     7dd: 0f 0b                        	ud2
     7df: 48 8d 3d 3a 48 00 00         	leaq	18490(%rip), %rdi  # 5020 <str.0>
     7e6: 48 8d 15 93 38 00 00         	leaq	14483(%rip), %rdx  # 4080 <fnf7m4j88ixvo7g+0x4080>
     7ed: be 21 00 00 00               	movl	$33, %esi
     7f2: e8 09 01 00 00               	callq	0x900 <core::panicking::panic>
     7f7: 0f 0b                        	ud2
     7f9: cc                           	int3
     7fa: cc                           	int3
     7fb: cc                           	int3
     7fc: cc                           	int3
     7fd: cc                           	int3
     7fe: cc                           	int3
     7ff: cc                           	int3

0000000000000800 <core::intrinsics::is_nonoverlapping>:
     800: 55                           	pushq	%rbp
     801: 48 89 e5                     	movq	%rsp, %rbp
     804: 48 81 ec 80 00 00 00         	subq	$128, %rsp
     80b: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
     80f: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     813: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
     817: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
     81b: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
     81f: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
     823: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     827: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     82b: 48 8b 75 b0                  	movq	-80(%rbp), %rsi
     82f: bf 01 00 00 00               	movl	$1, %edi
     834: e8 87 18 00 00               	callq	0x20c0 <core::num::<impl usize>::checked_mul>
     839: 48 89 45 a0                  	movq	%rax, -96(%rbp)
     83d: 48 89 55 a8                  	movq	%rdx, -88(%rbp)
     841: 48 8b 75 a8                  	movq	-88(%rbp), %rsi
     845: 48 8b 7d a0                  	movq	-96(%rbp), %rdi
     849: 48 8d 15 00 38 00 00         	leaq	14336(%rip), %rdx  # 4050 <fnf7m4j88ixvo7g+0x4050>
     850: e8 0b 2a 00 00               	callq	0x3260 <core::option::Option<T>::unwrap>
     855: 48 89 45 98                  	movq	%rax, -104(%rbp)
     859: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     85d: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     861: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     865: 48 39 c8                     	cmpq	%rcx, %rax
     868: 76 18                        	jbe	0x882 <core::intrinsics::is_nonoverlapping+0x82>
     86a: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     86e: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     872: 48 29 c8                     	subq	%rcx, %rax
     875: 48 89 45 90                  	movq	%rax, -112(%rbp)
     879: 0f 92 c0                     	setb	%al
     87c: a8 01                        	testb	$1, %al
     87e: 75 45                        	jne	0x8c5 <core::intrinsics::is_nonoverlapping+0xc5>
     880: eb 18                        	jmp	0x89a <core::intrinsics::is_nonoverlapping+0x9a>
     882: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
     886: 48 8b 45 b8                  	movq	-72(%rbp), %rax
     88a: 48 29 c8                     	subq	%rcx, %rax
     88d: 48 89 45 88                  	movq	%rax, -120(%rbp)
     891: 0f 92 c0                     	setb	%al
     894: a8 01                        	testb	$1, %al
     896: 75 47                        	jne	0x8df <core::intrinsics::is_nonoverlapping+0xdf>
     898: eb 0a                        	jmp	0x8a4 <core::intrinsics::is_nonoverlapping+0xa4>
     89a: 48 8b 45 90                  	movq	-112(%rbp), %rax
     89e: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     8a2: eb 08                        	jmp	0x8ac <core::intrinsics::is_nonoverlapping+0xac>
     8a4: 48 8b 45 88                  	movq	-120(%rbp), %rax
     8a8: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     8ac: 48 8b 45 98                  	movq	-104(%rbp), %rax
     8b0: 48 39 45 c8                  	cmpq	%rax, -56(%rbp)
     8b4: 0f 93 c0                     	setae	%al
     8b7: 24 01                        	andb	$1, %al
     8b9: 0f b6 c0                     	movzbl	%al, %eax
     8bc: 48 81 c4 80 00 00 00         	addq	$128, %rsp
     8c3: 5d                           	popq	%rbp
     8c4: c3                           	retq
     8c5: 48 8d 3d 54 47 00 00         	leaq	18260(%rip), %rdi  # 5020 <str.0>
     8cc: 48 8d 15 95 37 00 00         	leaq	14229(%rip), %rdx  # 4068 <fnf7m4j88ixvo7g+0x4068>
     8d3: be 21 00 00 00               	movl	$33, %esi
     8d8: e8 23 00 00 00               	callq	0x900 <core::panicking::panic>
     8dd: 0f 0b                        	ud2
     8df: 48 8d 3d 3a 47 00 00         	leaq	18234(%rip), %rdi  # 5020 <str.0>
     8e6: 48 8d 15 93 37 00 00         	leaq	14227(%rip), %rdx  # 4080 <fnf7m4j88ixvo7g+0x4080>
     8ed: be 21 00 00 00               	movl	$33, %esi
     8f2: e8 09 00 00 00               	callq	0x900 <core::panicking::panic>
     8f7: 0f 0b                        	ud2
     8f9: cc                           	int3
     8fa: cc                           	int3
     8fb: cc                           	int3
     8fc: cc                           	int3
     8fd: cc                           	int3
     8fe: cc                           	int3
     8ff: cc                           	int3

0000000000000900 <core::panicking::panic>:
     900: 55                           	pushq	%rbp
     901: 48 89 e5                     	movq	%rsp, %rbp
     904: 48 83 ec 60                  	subq	$96, %rsp
     908: 48 89 55 a8                  	movq	%rdx, -88(%rbp)
     90c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     910: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     914: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     918: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
     91c: 48 8d 75 e0                  	leaq	-32(%rbp), %rsi
     920: 48 8d 7d b0                  	leaq	-80(%rbp), %rdi
     924: ba 01 00 00 00               	movl	$1, %edx
     929: 48 8d 0d d0 47 00 00         	leaq	18384(%rip), %rcx  # 5100 <str.2+0x40>
     930: 31 c0                        	xorl	%eax, %eax
     932: 41 89 c0                     	movl	%eax, %r8d
     935: e8 e6 1a 00 00               	callq	0x2420 <core::fmt::Arguments::new_v1>
     93a: 48 8b 75 a8                  	movq	-88(%rbp), %rsi
     93e: 48 8d 7d b0                  	leaq	-80(%rbp), %rdi
     942: e8 09 00 00 00               	callq	0x950 <core::panicking::panic_fmt>
     947: 0f 0b                        	ud2
     949: cc                           	int3
     94a: cc                           	int3
     94b: cc                           	int3
     94c: cc                           	int3
     94d: cc                           	int3
     94e: cc                           	int3
     94f: cc                           	int3

0000000000000950 <core::panicking::panic_fmt>:
     950: 55                           	pushq	%rbp
     951: 48 89 e5                     	movq	%rsp, %rbp
     954: 48 83 ec 40                  	subq	$64, %rsp
     958: 48 89 75 c8                  	movq	%rsi, -56(%rbp)
     95c: 48 89 f8                     	movq	%rdi, %rax
     95f: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
     963: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     967: e8 c4 03 00 00               	callq	0xd30 <core::panic::Location::caller>
     96c: 48 89 45 d0                  	movq	%rax, -48(%rbp)
     970: 48 8b 55 d0                  	movq	-48(%rbp), %rdx
     974: 48 8b 75 f8                  	movq	-8(%rbp), %rsi
     978: 48 8d 7d d8                  	leaq	-40(%rbp), %rdi
     97c: e8 6f 03 00 00               	callq	0xcf0 <core::panic::PanicInfo::internal_constructor>
     981: 48 8d 7d d8                  	leaq	-40(%rbp), %rdi
     985: e8 e6 f9 ff ff               	callq	0x370 <rust_begin_unwind>
     98a: 0f 0b                        	ud2
     98c: cc                           	int3
     98d: cc                           	int3
     98e: cc                           	int3
     98f: cc                           	int3

0000000000000990 <core::slice::<impl [T]>::len>:
     990: 55                           	pushq	%rbp
     991: 48 89 e5                     	movq	%rsp, %rbp
     994: 48 83 ec 20                  	subq	$32, %rsp
     998: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     99c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     9a0: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     9a4: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
     9a8: 48 8b 45 e8                  	movq	-24(%rbp), %rax
     9ac: 48 83 c4 20                  	addq	$32, %rsp
     9b0: 5d                           	popq	%rbp
     9b1: c3                           	retq
     9b2: cc                           	int3
     9b3: cc                           	int3
     9b4: cc                           	int3
     9b5: cc                           	int3
     9b6: cc                           	int3
     9b7: cc                           	int3
     9b8: cc                           	int3
     9b9: cc                           	int3
     9ba: cc                           	int3
     9bb: cc                           	int3
     9bc: cc                           	int3
     9bd: cc                           	int3
     9be: cc                           	int3
     9bf: cc                           	int3

00000000000009c0 <core::slice::<impl [T]>::as_ptr>:
     9c0: 55                           	pushq	%rbp
     9c1: 48 89 e5                     	movq	%rsp, %rbp
     9c4: 48 83 ec 10                  	subq	$16, %rsp
     9c8: 48 89 f8                     	movq	%rdi, %rax
     9cb: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     9cf: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     9d3: 48 83 c4 10                  	addq	$16, %rsp
     9d7: 5d                           	popq	%rbp
     9d8: c3                           	retq
     9d9: cc                           	int3
     9da: cc                           	int3
     9db: cc                           	int3
     9dc: cc                           	int3
     9dd: cc                           	int3
     9de: cc                           	int3
     9df: cc                           	int3

00000000000009e0 <core::slice::<impl [T]>::iter>:
     9e0: 55                           	pushq	%rbp
     9e1: 48 89 e5                     	movq	%rsp, %rbp
     9e4: 48 83 ec 20                  	subq	$32, %rsp
     9e8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     9ec: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     9f0: e8 bb 28 00 00               	callq	0x32b0 <core::slice::iter::Iter<T>::new>
     9f5: 48 89 45 e0                  	movq	%rax, -32(%rbp)
     9f9: 48 89 55 e8                  	movq	%rdx, -24(%rbp)
     9fd: 48 8b 55 e8                  	movq	-24(%rbp), %rdx
     a01: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     a05: 48 83 c4 20                  	addq	$32, %rsp
     a09: 5d                           	popq	%rbp
     a0a: c3                           	retq
     a0b: cc                           	int3
     a0c: cc                           	int3
     a0d: cc                           	int3
     a0e: cc                           	int3
     a0f: cc                           	int3

0000000000000a10 <core::ptr::const_ptr::<impl *const T>::is_null>:
     a10: 55                           	pushq	%rbp
     a11: 48 89 e5                     	movq	%rsp, %rbp
     a14: 48 83 ec 20                  	subq	$32, %rsp
     a18: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     a1c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     a20: 48 8b 7d f0                  	movq	-16(%rbp), %rdi
     a24: 31 c0                        	xorl	%eax, %eax
     a26: 89 c6                        	movl	%eax, %esi
     a28: e8 f3 00 00 00               	callq	0xb20 <core::ptr::const_ptr::<impl *const T>::guaranteed_eq>
     a2d: 88 45 ef                     	movb	%al, -17(%rbp)
     a30: 8a 45 ef                     	movb	-17(%rbp), %al
     a33: 24 01                        	andb	$1, %al
     a35: 0f b6 c0                     	movzbl	%al, %eax
     a38: 48 83 c4 20                  	addq	$32, %rsp
     a3c: 5d                           	popq	%rbp
     a3d: c3                           	retq
     a3e: cc                           	int3
     a3f: cc                           	int3

0000000000000a40 <core::ptr::const_ptr::<impl *const T>::is_null>:
     a40: 55                           	pushq	%rbp
     a41: 48 89 e5                     	movq	%rsp, %rbp
     a44: 48 83 ec 20                  	subq	$32, %rsp
     a48: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     a4c: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     a50: 48 8b 7d f0                  	movq	-16(%rbp), %rdi
     a54: 31 c0                        	xorl	%eax, %eax
     a56: 89 c6                        	movl	%eax, %esi
     a58: e8 c3 00 00 00               	callq	0xb20 <core::ptr::const_ptr::<impl *const T>::guaranteed_eq>
     a5d: 88 45 ef                     	movb	%al, -17(%rbp)
     a60: 8a 45 ef                     	movb	-17(%rbp), %al
     a63: 24 01                        	andb	$1, %al
     a65: 0f b6 c0                     	movzbl	%al, %eax
     a68: 48 83 c4 20                  	addq	$32, %rsp
     a6c: 5d                           	popq	%rbp
     a6d: c3                           	retq
     a6e: cc                           	int3
     a6f: cc                           	int3

0000000000000a70 <core::ptr::const_ptr::<impl *const T>::is_null>:
     a70: 55                           	pushq	%rbp
     a71: 48 89 e5                     	movq	%rsp, %rbp
     a74: 48 83 ec 20                  	subq	$32, %rsp
     a78: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     a7c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     a80: 48 8b 7d f0                  	movq	-16(%rbp), %rdi
     a84: 31 c0                        	xorl	%eax, %eax
     a86: 89 c6                        	movl	%eax, %esi
     a88: e8 93 00 00 00               	callq	0xb20 <core::ptr::const_ptr::<impl *const T>::guaranteed_eq>
     a8d: 88 45 ef                     	movb	%al, -17(%rbp)
     a90: 8a 45 ef                     	movb	-17(%rbp), %al
     a93: 24 01                        	andb	$1, %al
     a95: 0f b6 c0                     	movzbl	%al, %eax
     a98: 48 83 c4 20                  	addq	$32, %rsp
     a9c: 5d                           	popq	%rbp
     a9d: c3                           	retq
     a9e: cc                           	int3
     a9f: cc                           	int3

0000000000000aa0 <core::ptr::const_ptr::<impl *const T>::cast>:
     aa0: 55                           	pushq	%rbp
     aa1: 48 89 e5                     	movq	%rsp, %rbp
     aa4: 50                           	pushq	%rax
     aa5: 48 89 f8                     	movq	%rdi, %rax
     aa8: 48 89 45 f8                  	movq	%rax, -8(%rbp)
     aac: 48 83 c4 08                  	addq	$8, %rsp
     ab0: 5d                           	popq	%rbp
     ab1: c3                           	retq
     ab2: cc                           	int3
     ab3: cc                           	int3
     ab4: cc                           	int3
     ab5: cc                           	int3
     ab6: cc                           	int3
     ab7: cc                           	int3
     ab8: cc                           	int3
     ab9: cc                           	int3
     aba: cc                           	int3
     abb: cc                           	int3
     abc: cc                           	int3
     abd: cc                           	int3
     abe: cc                           	int3
     abf: cc                           	int3

0000000000000ac0 <core::ptr::const_ptr::<impl *const T>::offset>:
     ac0: 55                           	pushq	%rbp
     ac1: 48 89 e5                     	movq	%rsp, %rbp
     ac4: 48 83 ec 20                  	subq	$32, %rsp
     ac8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     acc: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     ad0: 48 01 f7                     	addq	%rsi, %rdi
     ad3: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     ad7: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     adb: 48 89 45 e0                  	movq	%rax, -32(%rbp)
     adf: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     ae3: 48 83 c4 20                  	addq	$32, %rsp
     ae7: 5d                           	popq	%rbp
     ae8: c3                           	retq
     ae9: cc                           	int3
     aea: cc                           	int3
     aeb: cc                           	int3
     aec: cc                           	int3
     aed: cc                           	int3
     aee: cc                           	int3
     aef: cc                           	int3

0000000000000af0 <core::ptr::const_ptr::<impl *const T>::wrapping_offset>:
     af0: 55                           	pushq	%rbp
     af1: 48 89 e5                     	movq	%rsp, %rbp
     af4: 48 83 ec 20                  	subq	$32, %rsp
     af8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     afc: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     b00: 48 01 f7                     	addq	%rsi, %rdi
     b03: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     b07: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     b0b: 48 89 45 e0                  	movq	%rax, -32(%rbp)
     b0f: 48 8b 45 e0                  	movq	-32(%rbp), %rax
     b13: 48 83 c4 20                  	addq	$32, %rsp
     b17: 5d                           	popq	%rbp
     b18: c3                           	retq
     b19: cc                           	int3
     b1a: cc                           	int3
     b1b: cc                           	int3
     b1c: cc                           	int3
     b1d: cc                           	int3
     b1e: cc                           	int3
     b1f: cc                           	int3

0000000000000b20 <core::ptr::const_ptr::<impl *const T>::guaranteed_eq>:
     b20: 55                           	pushq	%rbp
     b21: 48 89 e5                     	movq	%rsp, %rbp
     b24: 48 83 ec 20                  	subq	$32, %rsp
     b28: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     b2c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     b30: 48 39 f7                     	cmpq	%rsi, %rdi
     b33: 0f 94 c0                     	sete	%al
     b36: 24 01                        	andb	$1, %al
     b38: 88 45 ff                     	movb	%al, -1(%rbp)
     b3b: 8a 45 ff                     	movb	-1(%rbp), %al
     b3e: 88 45 e7                     	movb	%al, -25(%rbp)
     b41: 8a 45 e7                     	movb	-25(%rbp), %al
     b44: 24 01                        	andb	$1, %al
     b46: 0f b6 c0                     	movzbl	%al, %eax
     b49: 48 83 c4 20                  	addq	$32, %rsp
     b4d: 5d                           	popq	%rbp
     b4e: c3                           	retq
     b4f: cc                           	int3

0000000000000b50 <core::ptr::const_ptr::<impl *const T>::add>:
     b50: 55                           	pushq	%rbp
     b51: 48 89 e5                     	movq	%rsp, %rbp
     b54: 48 83 ec 20                  	subq	$32, %rsp
     b58: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     b5c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     b60: e8 5b ff ff ff               	callq	0xac0 <core::ptr::const_ptr::<impl *const T>::offset>
     b65: 48 89 45 e8                  	movq	%rax, -24(%rbp)
     b69: 48 8b 45 e8                  	movq	-24(%rbp), %rax
     b6d: 48 83 c4 20                  	addq	$32, %rsp
     b71: 5d                           	popq	%rbp
     b72: c3                           	retq
     b73: cc                           	int3
     b74: cc                           	int3
     b75: cc                           	int3
     b76: cc                           	int3
     b77: cc                           	int3
     b78: cc                           	int3
     b79: cc                           	int3
     b7a: cc                           	int3
     b7b: cc                           	int3
     b7c: cc                           	int3
     b7d: cc                           	int3
     b7e: cc                           	int3
     b7f: cc                           	int3

0000000000000b80 <core::ptr::const_ptr::<impl *const T>::wrapping_add>:
     b80: 55                           	pushq	%rbp
     b81: 48 89 e5                     	movq	%rsp, %rbp
     b84: 48 83 ec 20                  	subq	$32, %rsp
     b88: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     b8c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     b90: e8 5b ff ff ff               	callq	0xaf0 <core::ptr::const_ptr::<impl *const T>::wrapping_offset>
     b95: 48 89 45 e8                  	movq	%rax, -24(%rbp)
     b99: 48 8b 45 e8                  	movq	-24(%rbp), %rax
     b9d: 48 83 c4 20                  	addq	$32, %rsp
     ba1: 5d                           	popq	%rbp
     ba2: c3                           	retq
     ba3: cc                           	int3
     ba4: cc                           	int3
     ba5: cc                           	int3
     ba6: cc                           	int3
     ba7: cc                           	int3
     ba8: cc                           	int3
     ba9: cc                           	int3
     baa: cc                           	int3
     bab: cc                           	int3
     bac: cc                           	int3
     bad: cc                           	int3
     bae: cc                           	int3
     baf: cc                           	int3

0000000000000bb0 <<T as core::any::Any>::type_id>:
     bb0: 55                           	pushq	%rbp
     bb1: 48 89 e5                     	movq	%rsp, %rbp
     bb4: 48 83 ec 10                  	subq	$16, %rsp
     bb8: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     bbc: e8 4f 2a 00 00               	callq	0x3610 <core::any::TypeId::of>
     bc1: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     bc5: 48 8b 45 f0                  	movq	-16(%rbp), %rax
     bc9: 48 83 c4 10                  	addq	$16, %rsp
     bcd: 5d                           	popq	%rbp
     bce: c3                           	retq
     bcf: cc                           	int3

0000000000000bd0 <core::iter::adapters::map::Map<I,F>::new>:
     bd0: 55                           	pushq	%rbp
     bd1: 48 89 e5                     	movq	%rsp, %rbp
     bd4: 48 83 ec 28                  	subq	$40, %rsp
     bd8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     bdc: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     be0: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
     be4: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
     be8: 48 8b 45 d8                  	movq	-40(%rbp), %rax
     bec: 48 8b 55 e0                  	movq	-32(%rbp), %rdx
     bf0: 48 83 c4 28                  	addq	$40, %rsp
     bf4: 5d                           	popq	%rbp
     bf5: c3                           	retq
     bf6: cc                           	int3
     bf7: cc                           	int3
     bf8: cc                           	int3
     bf9: cc                           	int3
     bfa: cc                           	int3
     bfb: cc                           	int3
     bfc: cc                           	int3
     bfd: cc                           	int3
     bfe: cc                           	int3
     bff: cc                           	int3

0000000000000c00 <core::iter::adapters::map::map_fold>:
     c00: 55                           	pushq	%rbp
     c01: 48 89 e5                     	movq	%rsp, %rbp
     c04: 5d                           	popq	%rbp
     c05: c3                           	retq
     c06: cc                           	int3
     c07: cc                           	int3
     c08: cc                           	int3
     c09: cc                           	int3
     c0a: cc                           	int3
     c0b: cc                           	int3
     c0c: cc                           	int3
     c0d: cc                           	int3
     c0e: cc                           	int3
     c0f: cc                           	int3

0000000000000c10 <core::iter::adapters::map::map_fold::{{closure}}>:
     c10: 55                           	pushq	%rbp
     c11: 48 89 e5                     	movq	%rsp, %rbp
     c14: 48 83 ec 50                  	subq	$80, %rsp
     c18: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     c1c: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
     c20: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     c24: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
     c28: 48 89 f8                     	movq	%rdi, %rax
     c2b: 48 89 45 c0                  	movq	%rax, -64(%rbp)
     c2f: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
     c33: 48 8b 75 e0                  	movq	-32(%rbp), %rsi
     c37: e8 74 0a 00 00               	callq	0x16b0 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::to_usize::{{closure}}>
     c3c: 48 89 45 c8                  	movq	%rax, -56(%rbp)
     c40: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
     c44: 48 8b 45 c8                  	movq	-56(%rbp), %rax
     c48: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
     c4c: 48 89 4d d0                  	movq	%rcx, -48(%rbp)
     c50: 48 89 45 d8                  	movq	%rax, -40(%rbp)
     c54: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
     c58: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
     c5c: e8 1f 0c 00 00               	callq	0x1880 <<usize as core::iter::traits::accum::Sum>::sum::{{closure}}>
     c61: 48 89 45 b0                  	movq	%rax, -80(%rbp)
     c65: 48 8b 45 b0                  	movq	-80(%rbp), %rax
     c69: 48 83 c4 50                  	addq	$80, %rsp
     c6d: 5d                           	popq	%rbp
     c6e: c3                           	retq
     c6f: cc                           	int3

0000000000000c70 <<core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::fold>:
     c70: 55                           	pushq	%rbp
     c71: 48 89 e5                     	movq	%rsp, %rbp
     c74: 48 83 ec 40                  	subq	$64, %rsp
     c78: 48 89 55 c8                  	movq	%rdx, -56(%rbp)
     c7c: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
     c80: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
     c84: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
     c88: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
     c8c: 48 89 55 f0                  	movq	%rdx, -16(%rbp)
     c90: e8 6b ff ff ff               	callq	0xc00 <core::iter::adapters::map::map_fold>
     c95: 48 8b 55 c8                  	movq	-56(%rbp), %rdx
     c99: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
     c9d: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
     ca1: e8 3a 25 00 00               	callq	0x31e0 <core::iter::traits::iterator::Iterator::fold>
     ca6: 48 89 45 c0                  	movq	%rax, -64(%rbp)
     caa: 48 8b 45 c0                  	movq	-64(%rbp), %rax
     cae: 48 83 c4 40                  	addq	$64, %rsp
     cb2: 5d                           	popq	%rbp
     cb3: c3                           	retq
     cb4: cc                           	int3
     cb5: cc                           	int3
     cb6: cc                           	int3
     cb7: cc                           	int3
     cb8: cc                           	int3
     cb9: cc                           	int3
     cba: cc                           	int3
     cbb: cc                           	int3
     cbc: cc                           	int3
     cbd: cc                           	int3
     cbe: cc                           	int3
     cbf: cc                           	int3

0000000000000cc0 <core::iter::traits::iterator::Iterator::sum>:
     cc0: 55                           	pushq	%rbp
     cc1: 48 89 e5                     	movq	%rsp, %rbp
     cc4: 48 83 ec 20                  	subq	$32, %rsp
     cc8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     ccc: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     cd0: e8 7b 0b 00 00               	callq	0x1850 <<usize as core::iter::traits::accum::Sum>::sum>
     cd5: 48 89 45 e8                  	movq	%rax, -24(%rbp)
     cd9: 48 8b 45 e8                  	movq	-24(%rbp), %rax
     cdd: 48 83 c4 20                  	addq	$32, %rsp
     ce1: 5d                           	popq	%rbp
     ce2: c3                           	retq
     ce3: cc                           	int3
     ce4: cc                           	int3
     ce5: cc                           	int3
     ce6: cc                           	int3
     ce7: cc                           	int3
     ce8: cc                           	int3
     ce9: cc                           	int3
     cea: cc                           	int3
     ceb: cc                           	int3
     cec: cc                           	int3
     ced: cc                           	int3
     cee: cc                           	int3
     cef: cc                           	int3

0000000000000cf0 <core::panic::PanicInfo::internal_constructor>:
     cf0: 55                           	pushq	%rbp
     cf1: 48 89 e5                     	movq	%rsp, %rbp
     cf4: 48 83 ec 10                  	subq	$16, %rsp
     cf8: 48 89 f8                     	movq	%rdi, %rax
     cfb: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
     cff: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
     d03: 48 8d 0d f6 43 00 00         	leaq	17398(%rip), %rcx  # 5100 <str.2+0x40>
     d0a: 48 89 0f                     	movq	%rcx, (%rdi)
     d0d: 48 8d 0d 84 33 00 00         	leaq	13188(%rip), %rcx  # 4098 <fnf7m4j88ixvo7g+0x4098>
     d14: 48 89 4f 08                  	movq	%rcx, 8(%rdi)
     d18: 48 89 77 10                  	movq	%rsi, 16(%rdi)
     d1c: 48 89 57 18                  	movq	%rdx, 24(%rdi)
     d20: 48 83 c4 10                  	addq	$16, %rsp
     d24: 5d                           	popq	%rbp
     d25: c3                           	retq
     d26: cc                           	int3
     d27: cc                           	int3
     d28: cc                           	int3
     d29: cc                           	int3
     d2a: cc                           	int3
     d2b: cc                           	int3
     d2c: cc                           	int3
     d2d: cc                           	int3
     d2e: cc                           	int3
     d2f: cc                           	int3

0000000000000d30 <core::panic::Location::caller>:
     d30: 55                           	pushq	%rbp
     d31: 48 89 e5                     	movq	%rsp, %rbp
     d34: 48 83 ec 10                  	subq	$16, %rsp
     d38: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     d3c: 48 8b 45 f8                  	movq	-8(%rbp), %rax
     d40: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     d44: 48 8b 45 f0                  	movq	-16(%rbp), %rax
     d48: 48 83 c4 10                  	addq	$16, %rsp
     d4c: 5d                           	popq	%rbp
     d4d: c3                           	retq
     d4e: cc                           	int3
     d4f: cc                           	int3

0000000000000d50 <<usize as core::fmt::num::DisplayInt>::to_u64>:
     d50: 55                           	pushq	%rbp
     d51: 48 89 e5                     	movq	%rsp, %rbp
     d54: 50                           	pushq	%rax
     d55: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     d59: 48 8b 07                     	movq	(%rdi), %rax
     d5c: 48 83 c4 08                  	addq	$8, %rsp
     d60: 5d                           	popq	%rbp
     d61: c3                           	retq
     d62: cc                           	int3
     d63: cc                           	int3
     d64: cc                           	int3
     d65: cc                           	int3
     d66: cc                           	int3
     d67: cc                           	int3
     d68: cc                           	int3
     d69: cc                           	int3
     d6a: cc                           	int3
     d6b: cc                           	int3
     d6c: cc                           	int3
     d6d: cc                           	int3
     d6e: cc                           	int3
     d6f: cc                           	int3

0000000000000d70 <core::ptr::const_ptr::<impl *const T>::is_null>:
     d70: 55                           	pushq	%rbp
     d71: 48 89 e5                     	movq	%rsp, %rbp
     d74: 48 83 ec 20                  	subq	$32, %rsp
     d78: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     d7c: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
     d80: 48 8b 7d f0                  	movq	-16(%rbp), %rdi
     d84: 31 c0                        	xorl	%eax, %eax
     d86: 89 c6                        	movl	%eax, %esi
     d88: e8 93 fd ff ff               	callq	0xb20 <core::ptr::const_ptr::<impl *const T>::guaranteed_eq>
     d8d: 88 45 ef                     	movb	%al, -17(%rbp)
     d90: 8a 45 ef                     	movb	-17(%rbp), %al
     d93: 24 01                        	andb	$1, %al
     d95: 0f b6 c0                     	movzbl	%al, %eax
     d98: 48 83 c4 20                  	addq	$32, %rsp
     d9c: 5d                           	popq	%rbp
     d9d: c3                           	retq
     d9e: cc                           	int3
     d9f: cc                           	int3

0000000000000da0 <core::ptr::slice_from_raw_parts>:
     da0: 55                           	pushq	%rbp
     da1: 48 89 e5                     	movq	%rsp, %rbp
     da4: 48 83 ec 30                  	subq	$48, %rsp
     da8: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
     dac: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
     db0: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
     db4: e8 e7 fc ff ff               	callq	0xaa0 <core::ptr::const_ptr::<impl *const T>::cast>
     db9: 48 89 45 e8                  	movq	%rax, -24(%rbp)
     dbd: 48 8b 75 e0                  	movq	-32(%rbp), %rsi
     dc1: 48 8b 7d e8                  	movq	-24(%rbp), %rdi
     dc5: e8 06 15 00 00               	callq	0x22d0 <core::ptr::metadata::from_raw_parts>
     dca: 48 89 45 d0                  	movq	%rax, -48(%rbp)
     dce: 48 89 55 d8                  	movq	%rdx, -40(%rbp)
     dd2: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
     dd6: 48 8b 45 d0                  	movq	-48(%rbp), %rax
     dda: 48 83 c4 30                  	addq	$48, %rsp
     dde: 5d                           	popq	%rbp
     ddf: c3                           	retq

0000000000000de0 <core::ptr::swap_nonoverlapping>:
     de0: 55                           	pushq	%rbp
     de1: 48 89 e5                     	movq	%rsp, %rbp
     de4: 48 83 ec 70                  	subq	$112, %rsp
     de8: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
     dec: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     df0: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
     df4: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
     df8: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
     dfc: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
     e00: e8 4b f6 ff ff               	callq	0x450 <core::intrinsics::is_aligned_and_not_null>
     e05: 88 45 cc                     	movb	%al, -52(%rbp)
     e08: eb 61                        	jmp	0xe6b <core::ptr::swap_nonoverlapping+0x8b>
     e0a: c6 45 cd 01                  	movb	$1, -51(%rbp)
     e0e: eb 04                        	jmp	0xe14 <core::ptr::swap_nonoverlapping+0x34>
     e10: c6 45 cd 00                  	movb	$0, -51(%rbp)
     e14: f6 45 cd 01                  	testb	$1, -51(%rbp)
     e18: 75 6c                        	jne	0xe86 <core::ptr::swap_nonoverlapping+0xa6>
     e1a: eb 6e                        	jmp	0xe8a <core::ptr::swap_nonoverlapping+0xaa>
     e1c: c6 45 ce 01                  	movb	$1, -50(%rbp)
     e20: eb 1c                        	jmp	0xe3e <core::ptr::swap_nonoverlapping+0x5e>
     e22: c6 45 ce 00                  	movb	$0, -50(%rbp)
     e26: eb 16                        	jmp	0xe3e <core::ptr::swap_nonoverlapping+0x5e>
     e28: 48 8b 55 b0                  	movq	-80(%rbp), %rdx
     e2c: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
     e30: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
     e34: e8 c7 f7 ff ff               	callq	0x600 <core::intrinsics::is_nonoverlapping>
     e39: 88 45 af                     	movb	%al, -81(%rbp)
     e3c: eb 3f                        	jmp	0xe7d <core::ptr::swap_nonoverlapping+0x9d>
     e3e: 8a 45 ce                     	movb	-50(%rbp), %al
     e41: 34 ff                        	xorb	$-1, %al
     e43: a8 01                        	testb	$1, %al
     e45: 75 c3                        	jne	0xe0a <core::ptr::swap_nonoverlapping+0x2a>
     e47: eb c7                        	jmp	0xe10 <core::ptr::swap_nonoverlapping+0x30>
     e49: c6 45 cf 01                  	movb	$1, -49(%rbp)
     e4d: eb 14                        	jmp	0xe63 <core::ptr::swap_nonoverlapping+0x83>
     e4f: c6 45 cf 00                  	movb	$0, -49(%rbp)
     e53: eb 0e                        	jmp	0xe63 <core::ptr::swap_nonoverlapping+0x83>
     e55: 48 8b 7d b8                  	movq	-72(%rbp), %rdi
     e59: e8 f2 f5 ff ff               	callq	0x450 <core::intrinsics::is_aligned_and_not_null>
     e5e: 88 45 ae                     	movb	%al, -82(%rbp)
     e61: eb 11                        	jmp	0xe74 <core::ptr::swap_nonoverlapping+0x94>
     e63: f6 45 cf 01                  	testb	$1, -49(%rbp)
     e67: 75 bf                        	jne	0xe28 <core::ptr::swap_nonoverlapping+0x48>
     e69: eb b7                        	jmp	0xe22 <core::ptr::swap_nonoverlapping+0x42>
     e6b: 8a 45 cc                     	movb	-52(%rbp), %al
     e6e: a8 01                        	testb	$1, %al
     e70: 75 e3                        	jne	0xe55 <core::ptr::swap_nonoverlapping+0x75>
     e72: eb db                        	jmp	0xe4f <core::ptr::swap_nonoverlapping+0x6f>
     e74: 8a 45 ae                     	movb	-82(%rbp), %al
     e77: a8 01                        	testb	$1, %al
     e79: 75 ce                        	jne	0xe49 <core::ptr::swap_nonoverlapping+0x69>
     e7b: eb d2                        	jmp	0xe4f <core::ptr::swap_nonoverlapping+0x6f>
     e7d: 8a 45 af                     	movb	-81(%rbp), %al
     e80: a8 01                        	testb	$1, %al
     e82: 75 98                        	jne	0xe1c <core::ptr::swap_nonoverlapping+0x3c>
     e84: eb 9c                        	jmp	0xe22 <core::ptr::swap_nonoverlapping+0x42>
     e86: 0f 0b                        	ud2
     e88: 0f 0b                        	ud2
     e8a: 48 8b 45 b8                  	movq	-72(%rbp), %rax
     e8e: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
     e92: 48 89 4d 98                  	movq	%rcx, -104(%rbp)
     e96: 48 89 4d e8                  	movq	%rcx, -24(%rbp)
     e9a: 48 89 45 a0                  	movq	%rax, -96(%rbp)
     e9e: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     ea2: 48 8b 45 b0                  	movq	-80(%rbp), %rax
     ea6: b9 08 00 00 00               	movl	$8, %ecx
     eab: 48 f7 e1                     	mulq	%rcx
     eae: 48 89 45 90                  	movq	%rax, -112(%rbp)
     eb2: 0f 90 c0                     	seto	%al
     eb5: a8 01                        	testb	$1, %al
     eb7: 75 1b                        	jne	0xed4 <core::ptr::swap_nonoverlapping+0xf4>
     eb9: 48 8b 55 90                  	movq	-112(%rbp), %rdx
     ebd: 48 8b 75 a0                  	movq	-96(%rbp), %rsi
     ec1: 48 8b 7d 98                  	movq	-104(%rbp), %rdi
     ec5: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
     ec9: e8 92 03 00 00               	callq	0x1260 <core::ptr::swap_nonoverlapping_bytes>
     ece: 48 83 c4 70                  	addq	$112, %rsp
     ed2: 5d                           	popq	%rbp
     ed3: c3                           	retq
     ed4: 48 8d 3d 65 43 00 00         	leaq	17253(%rip), %rdi  # 5240 <str.0>
     edb: 48 8d 15 de 31 00 00         	leaq	12766(%rip), %rdx  # 40c0 <core::fmt::num::DEC_DIGITS_LUT+0x8>
     ee2: be 21 00 00 00               	movl	$33, %esi
     ee7: e8 14 fa ff ff               	callq	0x900 <core::panicking::panic>
     eec: 0f 0b                        	ud2
     eee: cc                           	int3
     eef: cc                           	int3

0000000000000ef0 <core::ptr::swap_nonoverlapping>:
     ef0: 55                           	pushq	%rbp
     ef1: 48 89 e5                     	movq	%rsp, %rbp
     ef4: 48 83 ec 70                  	subq	$112, %rsp
     ef8: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
     efc: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
     f00: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
     f04: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
     f08: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
     f0c: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
     f10: e8 ab f4 ff ff               	callq	0x3c0 <core::intrinsics::is_aligned_and_not_null>
     f15: 88 45 cc                     	movb	%al, -52(%rbp)
     f18: eb 61                        	jmp	0xf7b <core::ptr::swap_nonoverlapping+0x8b>
     f1a: c6 45 cd 01                  	movb	$1, -51(%rbp)
     f1e: eb 04                        	jmp	0xf24 <core::ptr::swap_nonoverlapping+0x34>
     f20: c6 45 cd 00                  	movb	$0, -51(%rbp)
     f24: f6 45 cd 01                  	testb	$1, -51(%rbp)
     f28: 75 6c                        	jne	0xf96 <core::ptr::swap_nonoverlapping+0xa6>
     f2a: eb 6e                        	jmp	0xf9a <core::ptr::swap_nonoverlapping+0xaa>
     f2c: c6 45 ce 01                  	movb	$1, -50(%rbp)
     f30: eb 1c                        	jmp	0xf4e <core::ptr::swap_nonoverlapping+0x5e>
     f32: c6 45 ce 00                  	movb	$0, -50(%rbp)
     f36: eb 16                        	jmp	0xf4e <core::ptr::swap_nonoverlapping+0x5e>
     f38: 48 8b 55 b0                  	movq	-80(%rbp), %rdx
     f3c: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
     f40: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
     f44: e8 b7 f7 ff ff               	callq	0x700 <core::intrinsics::is_nonoverlapping>
     f49: 88 45 af                     	movb	%al, -81(%rbp)
     f4c: eb 3f                        	jmp	0xf8d <core::ptr::swap_nonoverlapping+0x9d>
     f4e: 8a 45 ce                     	movb	-50(%rbp), %al
     f51: 34 ff                        	xorb	$-1, %al
     f53: a8 01                        	testb	$1, %al
     f55: 75 c3                        	jne	0xf1a <core::ptr::swap_nonoverlapping+0x2a>
     f57: eb c7                        	jmp	0xf20 <core::ptr::swap_nonoverlapping+0x30>
     f59: c6 45 cf 01                  	movb	$1, -49(%rbp)
     f5d: eb 14                        	jmp	0xf73 <core::ptr::swap_nonoverlapping+0x83>
     f5f: c6 45 cf 00                  	movb	$0, -49(%rbp)
     f63: eb 0e                        	jmp	0xf73 <core::ptr::swap_nonoverlapping+0x83>
     f65: 48 8b 7d b8                  	movq	-72(%rbp), %rdi
     f69: e8 52 f4 ff ff               	callq	0x3c0 <core::intrinsics::is_aligned_and_not_null>
     f6e: 88 45 ae                     	movb	%al, -82(%rbp)
     f71: eb 11                        	jmp	0xf84 <core::ptr::swap_nonoverlapping+0x94>
     f73: f6 45 cf 01                  	testb	$1, -49(%rbp)
     f77: 75 bf                        	jne	0xf38 <core::ptr::swap_nonoverlapping+0x48>
     f79: eb b7                        	jmp	0xf32 <core::ptr::swap_nonoverlapping+0x42>
     f7b: 8a 45 cc                     	movb	-52(%rbp), %al
     f7e: a8 01                        	testb	$1, %al
     f80: 75 e3                        	jne	0xf65 <core::ptr::swap_nonoverlapping+0x75>
     f82: eb db                        	jmp	0xf5f <core::ptr::swap_nonoverlapping+0x6f>
     f84: 8a 45 ae                     	movb	-82(%rbp), %al
     f87: a8 01                        	testb	$1, %al
     f89: 75 ce                        	jne	0xf59 <core::ptr::swap_nonoverlapping+0x69>
     f8b: eb d2                        	jmp	0xf5f <core::ptr::swap_nonoverlapping+0x6f>
     f8d: 8a 45 af                     	movb	-81(%rbp), %al
     f90: a8 01                        	testb	$1, %al
     f92: 75 98                        	jne	0xf2c <core::ptr::swap_nonoverlapping+0x3c>
     f94: eb 9c                        	jmp	0xf32 <core::ptr::swap_nonoverlapping+0x42>
     f96: 0f 0b                        	ud2
     f98: 0f 0b                        	ud2
     f9a: 48 8b 45 b8                  	movq	-72(%rbp), %rax
     f9e: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
     fa2: 48 89 4d 98                  	movq	%rcx, -104(%rbp)
     fa6: 48 89 4d e8                  	movq	%rcx, -24(%rbp)
     faa: 48 89 45 a0                  	movq	%rax, -96(%rbp)
     fae: 48 89 45 f0                  	movq	%rax, -16(%rbp)
     fb2: 48 8b 45 b0                  	movq	-80(%rbp), %rax
     fb6: b9 04 00 00 00               	movl	$4, %ecx
     fbb: 48 f7 e1                     	mulq	%rcx
     fbe: 48 89 45 90                  	movq	%rax, -112(%rbp)
     fc2: 0f 90 c0                     	seto	%al
     fc5: a8 01                        	testb	$1, %al
     fc7: 75 1b                        	jne	0xfe4 <core::ptr::swap_nonoverlapping+0xf4>
     fc9: 48 8b 55 90                  	movq	-112(%rbp), %rdx
     fcd: 48 8b 75 a0                  	movq	-96(%rbp), %rsi
     fd1: 48 8b 7d 98                  	movq	-104(%rbp), %rdi
     fd5: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
     fd9: e8 82 02 00 00               	callq	0x1260 <core::ptr::swap_nonoverlapping_bytes>
     fde: 48 83 c4 70                  	addq	$112, %rsp
     fe2: 5d                           	popq	%rbp
     fe3: c3                           	retq
     fe4: 48 8d 3d 55 42 00 00         	leaq	16981(%rip), %rdi  # 5240 <str.0>
     feb: 48 8d 15 ce 30 00 00         	leaq	12494(%rip), %rdx  # 40c0 <core::fmt::num::DEC_DIGITS_LUT+0x8>
     ff2: be 21 00 00 00               	movl	$33, %esi
     ff7: e8 04 f9 ff ff               	callq	0x900 <core::panicking::panic>
     ffc: 0f 0b                        	ud2
     ffe: cc                           	int3
     fff: cc                           	int3

0000000000001000 <core::ptr::swap_nonoverlapping>:
    1000: 55                           	pushq	%rbp
    1001: 48 89 e5                     	movq	%rsp, %rbp
    1004: 48 83 ec 60                  	subq	$96, %rsp
    1008: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
    100c: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
    1010: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
    1014: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
    1018: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
    101c: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    1020: e8 4b f5 ff ff               	callq	0x570 <core::intrinsics::is_aligned_and_not_null>
    1025: 88 45 cc                     	movb	%al, -52(%rbp)
    1028: eb 61                        	jmp	0x108b <core::ptr::swap_nonoverlapping+0x8b>
    102a: c6 45 cd 01                  	movb	$1, -51(%rbp)
    102e: eb 04                        	jmp	0x1034 <core::ptr::swap_nonoverlapping+0x34>
    1030: c6 45 cd 00                  	movb	$0, -51(%rbp)
    1034: f6 45 cd 01                  	testb	$1, -51(%rbp)
    1038: 75 6c                        	jne	0x10a6 <core::ptr::swap_nonoverlapping+0xa6>
    103a: eb 6e                        	jmp	0x10aa <core::ptr::swap_nonoverlapping+0xaa>
    103c: c6 45 ce 01                  	movb	$1, -50(%rbp)
    1040: eb 1c                        	jmp	0x105e <core::ptr::swap_nonoverlapping+0x5e>
    1042: c6 45 ce 00                  	movb	$0, -50(%rbp)
    1046: eb 16                        	jmp	0x105e <core::ptr::swap_nonoverlapping+0x5e>
    1048: 48 8b 55 b0                  	movq	-80(%rbp), %rdx
    104c: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
    1050: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
    1054: e8 a7 f7 ff ff               	callq	0x800 <core::intrinsics::is_nonoverlapping>
    1059: 88 45 af                     	movb	%al, -81(%rbp)
    105c: eb 3f                        	jmp	0x109d <core::ptr::swap_nonoverlapping+0x9d>
    105e: 8a 45 ce                     	movb	-50(%rbp), %al
    1061: 34 ff                        	xorb	$-1, %al
    1063: a8 01                        	testb	$1, %al
    1065: 75 c3                        	jne	0x102a <core::ptr::swap_nonoverlapping+0x2a>
    1067: eb c7                        	jmp	0x1030 <core::ptr::swap_nonoverlapping+0x30>
    1069: c6 45 cf 01                  	movb	$1, -49(%rbp)
    106d: eb 14                        	jmp	0x1083 <core::ptr::swap_nonoverlapping+0x83>
    106f: c6 45 cf 00                  	movb	$0, -49(%rbp)
    1073: eb 0e                        	jmp	0x1083 <core::ptr::swap_nonoverlapping+0x83>
    1075: 48 8b 7d b8                  	movq	-72(%rbp), %rdi
    1079: e8 f2 f4 ff ff               	callq	0x570 <core::intrinsics::is_aligned_and_not_null>
    107e: 88 45 ae                     	movb	%al, -82(%rbp)
    1081: eb 11                        	jmp	0x1094 <core::ptr::swap_nonoverlapping+0x94>
    1083: f6 45 cf 01                  	testb	$1, -49(%rbp)
    1087: 75 bf                        	jne	0x1048 <core::ptr::swap_nonoverlapping+0x48>
    1089: eb b7                        	jmp	0x1042 <core::ptr::swap_nonoverlapping+0x42>
    108b: 8a 45 cc                     	movb	-52(%rbp), %al
    108e: a8 01                        	testb	$1, %al
    1090: 75 e3                        	jne	0x1075 <core::ptr::swap_nonoverlapping+0x75>
    1092: eb db                        	jmp	0x106f <core::ptr::swap_nonoverlapping+0x6f>
    1094: 8a 45 ae                     	movb	-82(%rbp), %al
    1097: a8 01                        	testb	$1, %al
    1099: 75 ce                        	jne	0x1069 <core::ptr::swap_nonoverlapping+0x69>
    109b: eb d2                        	jmp	0x106f <core::ptr::swap_nonoverlapping+0x6f>
    109d: 8a 45 af                     	movb	-81(%rbp), %al
    10a0: a8 01                        	testb	$1, %al
    10a2: 75 98                        	jne	0x103c <core::ptr::swap_nonoverlapping+0x3c>
    10a4: eb 9c                        	jmp	0x1042 <core::ptr::swap_nonoverlapping+0x42>
    10a6: 0f 0b                        	ud2
    10a8: 0f 0b                        	ud2
    10aa: 48 8b 45 b8                  	movq	-72(%rbp), %rax
    10ae: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
    10b2: 48 89 4d e8                  	movq	%rcx, -24(%rbp)
    10b6: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    10ba: 48 8b 45 b0                  	movq	-80(%rbp), %rax
    10be: b9 01 00 00 00               	movl	$1, %ecx
    10c3: 48 f7 e1                     	mulq	%rcx
    10c6: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    10ca: 0f 90 c0                     	seto	%al
    10cd: a8 01                        	testb	$1, %al
    10cf: 75 1b                        	jne	0x10ec <core::ptr::swap_nonoverlapping+0xec>
    10d1: 48 8b 55 a0                  	movq	-96(%rbp), %rdx
    10d5: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
    10d9: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
    10dd: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
    10e1: e8 7a 01 00 00               	callq	0x1260 <core::ptr::swap_nonoverlapping_bytes>
    10e6: 48 83 c4 60                  	addq	$96, %rsp
    10ea: 5d                           	popq	%rbp
    10eb: c3                           	retq
    10ec: 48 8d 3d 4d 41 00 00         	leaq	16717(%rip), %rdi  # 5240 <str.0>
    10f3: 48 8d 15 c6 2f 00 00         	leaq	12230(%rip), %rdx  # 40c0 <core::fmt::num::DEC_DIGITS_LUT+0x8>
    10fa: be 21 00 00 00               	movl	$33, %esi
    10ff: e8 fc f7 ff ff               	callq	0x900 <core::panicking::panic>
    1104: 0f 0b                        	ud2
    1106: cc                           	int3
    1107: cc                           	int3
    1108: cc                           	int3
    1109: cc                           	int3
    110a: cc                           	int3
    110b: cc                           	int3
    110c: cc                           	int3
    110d: cc                           	int3
    110e: cc                           	int3
    110f: cc                           	int3

0000000000001110 <core::ptr::swap_nonoverlapping_one>:
    1110: 55                           	pushq	%rbp
    1111: 48 89 e5                     	movq	%rsp, %rbp
    1114: 48 83 ec 40                  	subq	$64, %rsp
    1118: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
    111c: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    1120: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    1124: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    1128: b8 04 00 00 00               	movl	$4, %eax
    112d: 48 83 f8 20                  	cmpq	$32, %rax
    1131: 73 11                        	jae	0x1144 <core::ptr::swap_nonoverlapping_one+0x34>
    1133: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    1137: e8 b4 03 00 00               	callq	0x14f0 <core::ptr::read>
    113c: 89 45 cc                     	movl	%eax, -52(%rbp)
    113f: 89 45 fc                     	movl	%eax, -4(%rbp)
    1142: eb 14                        	jmp	0x1158 <core::ptr::swap_nonoverlapping_one+0x48>
    1144: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
    1148: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    114c: ba 01 00 00 00               	movl	$1, %edx
    1151: e8 9a fd ff ff               	callq	0xef0 <core::ptr::swap_nonoverlapping>
    1156: eb 1a                        	jmp	0x1172 <core::ptr::swap_nonoverlapping_one+0x62>
    1158: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    115c: 48 8b 4d d0                  	movq	-48(%rbp), %rcx
    1160: 8b 09                        	movl	(%rcx), %ecx
    1162: 89 08                        	movl	%ecx, (%rax)
    1164: 8b 75 cc                     	movl	-52(%rbp), %esi
    1167: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    116b: e8 50 04 00 00               	callq	0x15c0 <core::ptr::write>
    1170: eb 02                        	jmp	0x1174 <core::ptr::swap_nonoverlapping_one+0x64>
    1172: eb 00                        	jmp	0x1174 <core::ptr::swap_nonoverlapping_one+0x64>
    1174: 48 83 c4 40                  	addq	$64, %rsp
    1178: 5d                           	popq	%rbp
    1179: c3                           	retq
    117a: cc                           	int3
    117b: cc                           	int3
    117c: cc                           	int3
    117d: cc                           	int3
    117e: cc                           	int3
    117f: cc                           	int3

0000000000001180 <core::ptr::swap_nonoverlapping_one>:
    1180: 55                           	pushq	%rbp
    1181: 48 89 e5                     	movq	%rsp, %rbp
    1184: 48 83 ec 40                  	subq	$64, %rsp
    1188: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
    118c: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    1190: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    1194: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    1198: b8 08 00 00 00               	movl	$8, %eax
    119d: 48 83 f8 20                  	cmpq	$32, %rax
    11a1: 73 13                        	jae	0x11b6 <core::ptr::swap_nonoverlapping_one+0x36>
    11a3: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    11a7: e8 84 03 00 00               	callq	0x1530 <core::ptr::read>
    11ac: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    11b0: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    11b4: eb 14                        	jmp	0x11ca <core::ptr::swap_nonoverlapping_one+0x4a>
    11b6: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
    11ba: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    11be: ba 01 00 00 00               	movl	$1, %edx
    11c3: e8 18 fc ff ff               	callq	0xde0 <core::ptr::swap_nonoverlapping>
    11c8: eb 1d                        	jmp	0x11e7 <core::ptr::swap_nonoverlapping_one+0x67>
    11ca: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    11ce: 48 8b 4d d0                  	movq	-48(%rbp), %rcx
    11d2: 48 8b 09                     	movq	(%rcx), %rcx
    11d5: 48 89 08                     	movq	%rcx, (%rax)
    11d8: 48 8b 75 c8                  	movq	-56(%rbp), %rsi
    11dc: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    11e0: e8 fb 03 00 00               	callq	0x15e0 <core::ptr::write>
    11e5: eb 02                        	jmp	0x11e9 <core::ptr::swap_nonoverlapping_one+0x69>
    11e7: eb 00                        	jmp	0x11e9 <core::ptr::swap_nonoverlapping_one+0x69>
    11e9: 48 83 c4 40                  	addq	$64, %rsp
    11ed: 5d                           	popq	%rbp
    11ee: c3                           	retq
    11ef: cc                           	int3

00000000000011f0 <core::ptr::swap_nonoverlapping_one>:
    11f0: 55                           	pushq	%rbp
    11f1: 48 89 e5                     	movq	%rsp, %rbp
    11f4: 48 83 ec 40                  	subq	$64, %rsp
    11f8: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
    11fc: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    1200: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    1204: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    1208: b8 01 00 00 00               	movl	$1, %eax
    120d: 48 83 f8 20                  	cmpq	$32, %rax
    1211: 73 11                        	jae	0x1224 <core::ptr::swap_nonoverlapping_one+0x34>
    1213: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    1217: e8 64 03 00 00               	callq	0x1580 <core::ptr::read>
    121c: 88 45 cf                     	movb	%al, -49(%rbp)
    121f: 88 45 ff                     	movb	%al, -1(%rbp)
    1222: eb 14                        	jmp	0x1238 <core::ptr::swap_nonoverlapping_one+0x48>
    1224: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
    1228: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    122c: ba 01 00 00 00               	movl	$1, %edx
    1231: e8 ca fd ff ff               	callq	0x1000 <core::ptr::swap_nonoverlapping>
    1236: eb 1d                        	jmp	0x1255 <core::ptr::swap_nonoverlapping_one+0x65>
    1238: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    123c: 48 8b 4d d0                  	movq	-48(%rbp), %rcx
    1240: 8a 09                        	movb	(%rcx), %cl
    1242: 88 08                        	movb	%cl, (%rax)
    1244: 8a 45 cf                     	movb	-49(%rbp), %al
    1247: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    124b: 0f b6 f0                     	movzbl	%al, %esi
    124e: e8 ad 03 00 00               	callq	0x1600 <core::ptr::write>
    1253: eb 02                        	jmp	0x1257 <core::ptr::swap_nonoverlapping_one+0x67>
    1255: eb 00                        	jmp	0x1257 <core::ptr::swap_nonoverlapping_one+0x67>
    1257: 48 83 c4 40                  	addq	$64, %rsp
    125b: 5d                           	popq	%rbp
    125c: c3                           	retq
    125d: cc                           	int3
    125e: cc                           	int3
    125f: cc                           	int3

0000000000001260 <core::ptr::swap_nonoverlapping_bytes>:
    1260: 55                           	pushq	%rbp
    1261: 48 89 e5                     	movq	%rsp, %rbp
    1264: 48 83 e4 e0                  	andq	$-32, %rsp
    1268: 48 81 ec 40 01 00 00         	subq	$320, %rsp
    126f: 48 89 54 24 58               	movq	%rdx, 88(%rsp)
    1274: 48 89 74 24 60               	movq	%rsi, 96(%rsp)
    1279: 48 89 7c 24 68               	movq	%rdi, 104(%rsp)
    127e: 48 89 bc 24 c8 00 00 00      	movq	%rdi, 200(%rsp)
    1286: 48 89 b4 24 d0 00 00 00      	movq	%rsi, 208(%rsp)
    128e: 48 89 94 24 d8 00 00 00      	movq	%rdx, 216(%rsp)
    1296: 48 c7 84 24 e0 00 00 00 20 00 00 00  	movq	$32, 224(%rsp)
    12a2: 48 c7 44 24 78 00 00 00 00   	movq	$0, 120(%rsp)
    12ab: 48 8b 44 24 78               	movq	120(%rsp), %rax
    12b0: 48 83 c0 20                  	addq	$32, %rax
    12b4: 48 89 44 24 50               	movq	%rax, 80(%rsp)
    12b9: 0f 92 c0                     	setb	%al
    12bc: a8 01                        	testb	$1, %al
    12be: 0f 85 d5 01 00 00            	jne	0x1499 <core::ptr::swap_nonoverlapping_bytes+0x239>
    12c4: 48 8b 44 24 50               	movq	80(%rsp), %rax
    12c9: 48 8b 4c 24 58               	movq	88(%rsp), %rcx
    12ce: 48 39 c8                     	cmpq	%rcx, %rax
    12d1: 76 15                        	jbe	0x12e8 <core::ptr::swap_nonoverlapping_bytes+0x88>
    12d3: 48 8b 44 24 58               	movq	88(%rsp), %rax
    12d8: 48 39 44 24 78               	cmpq	%rax, 120(%rsp)
    12dd: 0f 82 d2 00 00 00            	jb	0x13b5 <core::ptr::swap_nonoverlapping_bytes+0x155>
    12e3: e9 cf 00 00 00               	jmp	0x13b7 <core::ptr::swap_nonoverlapping_bytes+0x157>
    12e8: 48 8d 84 24 80 00 00 00      	leaq	128(%rsp), %rax
    12f0: 48 89 84 24 28 01 00 00      	movq	%rax, 296(%rsp)
    12f8: 48 8b 7c 24 68               	movq	104(%rsp), %rdi
    12fd: 48 8d 84 24 80 00 00 00      	leaq	128(%rsp), %rax
    1305: 48 89 44 24 40               	movq	%rax, 64(%rsp)
    130a: 48 89 84 24 e8 00 00 00      	movq	%rax, 232(%rsp)
    1312: 48 8b 74 24 78               	movq	120(%rsp), %rsi
    1317: e8 c4 10 00 00               	callq	0x23e0 <core::ptr::mut_ptr::<impl *mut T>::add>
    131c: 48 89 44 24 48               	movq	%rax, 72(%rsp)
    1321: 48 89 84 24 f0 00 00 00      	movq	%rax, 240(%rsp)
    1329: 48 8b 7c 24 60               	movq	96(%rsp), %rdi
    132e: 48 8b 74 24 78               	movq	120(%rsp), %rsi
    1333: e8 a8 10 00 00               	callq	0x23e0 <core::ptr::mut_ptr::<impl *mut T>::add>
    1338: 48 89 44 24 38               	movq	%rax, 56(%rsp)
    133d: 48 89 84 24 f8 00 00 00      	movq	%rax, 248(%rsp)
    1345: 48 8b 74 24 48               	movq	72(%rsp), %rsi
    134a: 48 8b 7c 24 40               	movq	64(%rsp), %rdi
    134f: ba 20 00 00 00               	movl	$32, %edx
    1354: 48 c1 e2 00                  	shlq	$0, %rdx
    1358: e8 c3 23 00 00               	callq	0x3720 <memcpy>
    135d: 48 8b 74 24 38               	movq	56(%rsp), %rsi
    1362: 48 8b 7c 24 48               	movq	72(%rsp), %rdi
    1367: ba 20 00 00 00               	movl	$32, %edx
    136c: 48 c1 e2 00                  	shlq	$0, %rdx
    1370: e8 ab 23 00 00               	callq	0x3720 <memcpy>
    1375: 48 8b 74 24 40               	movq	64(%rsp), %rsi
    137a: 48 8b 7c 24 38               	movq	56(%rsp), %rdi
    137f: ba 20 00 00 00               	movl	$32, %edx
    1384: 48 c1 e2 00                  	shlq	$0, %rdx
    1388: e8 93 23 00 00               	callq	0x3720 <memcpy>
    138d: 48 8b 44 24 78               	movq	120(%rsp), %rax
    1392: 48 83 c0 20                  	addq	$32, %rax
    1396: 48 89 44 24 30               	movq	%rax, 48(%rsp)
    139b: 0f 92 c0                     	setb	%al
    139e: a8 01                        	testb	$1, %al
    13a0: 0f 85 0d 01 00 00            	jne	0x14b3 <core::ptr::swap_nonoverlapping_bytes+0x253>
    13a6: 48 8b 44 24 30               	movq	48(%rsp), %rax
    13ab: 48 89 44 24 78               	movq	%rax, 120(%rsp)
    13b0: e9 f6 fe ff ff               	jmp	0x12ab <core::ptr::swap_nonoverlapping_bytes+0x4b>
    13b5: eb 05                        	jmp	0x13bc <core::ptr::swap_nonoverlapping_bytes+0x15c>
    13b7: e9 d8 00 00 00               	jmp	0x1494 <core::ptr::swap_nonoverlapping_bytes+0x234>
    13bc: 48 8b 44 24 58               	movq	88(%rsp), %rax
    13c1: 48 2b 44 24 78               	subq	120(%rsp), %rax
    13c6: 48 89 44 24 28               	movq	%rax, 40(%rsp)
    13cb: 0f 92 c0                     	setb	%al
    13ce: a8 01                        	testb	$1, %al
    13d0: 0f 85 f7 00 00 00            	jne	0x14cd <core::ptr::swap_nonoverlapping_bytes+0x26d>
    13d6: 48 8b 44 24 28               	movq	40(%rsp), %rax
    13db: 48 89 84 24 00 01 00 00      	movq	%rax, 256(%rsp)
    13e3: 48 8d 84 24 a8 00 00 00      	leaq	168(%rsp), %rax
    13eb: 48 89 84 24 20 01 00 00      	movq	%rax, 288(%rsp)
    13f3: 48 8d 84 24 a8 00 00 00      	leaq	168(%rsp), %rax
    13fb: 48 89 44 24 20               	movq	%rax, 32(%rsp)
    1400: 48 8b 7c 24 68               	movq	104(%rsp), %rdi
    1405: 48 8b 44 24 20               	movq	32(%rsp), %rax
    140a: 48 89 44 24 10               	movq	%rax, 16(%rsp)
    140f: 48 89 84 24 08 01 00 00      	movq	%rax, 264(%rsp)
    1417: 48 8b 74 24 78               	movq	120(%rsp), %rsi
    141c: e8 bf 0f 00 00               	callq	0x23e0 <core::ptr::mut_ptr::<impl *mut T>::add>
    1421: 48 89 44 24 18               	movq	%rax, 24(%rsp)
    1426: 48 89 84 24 10 01 00 00      	movq	%rax, 272(%rsp)
    142e: 48 8b 7c 24 60               	movq	96(%rsp), %rdi
    1433: 48 8b 74 24 78               	movq	120(%rsp), %rsi
    1438: e8 a3 0f 00 00               	callq	0x23e0 <core::ptr::mut_ptr::<impl *mut T>::add>
    143d: 48 89 44 24 08               	movq	%rax, 8(%rsp)
    1442: 48 89 84 24 18 01 00 00      	movq	%rax, 280(%rsp)
    144a: 48 8b 74 24 18               	movq	24(%rsp), %rsi
    144f: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
    1454: 48 8b 54 24 28               	movq	40(%rsp), %rdx
    1459: 48 c1 e2 00                  	shlq	$0, %rdx
    145d: e8 be 22 00 00               	callq	0x3720 <memcpy>
    1462: 48 8b 74 24 08               	movq	8(%rsp), %rsi
    1467: 48 8b 7c 24 18               	movq	24(%rsp), %rdi
    146c: 48 8b 54 24 28               	movq	40(%rsp), %rdx
    1471: 48 c1 e2 00                  	shlq	$0, %rdx
    1475: e8 a6 22 00 00               	callq	0x3720 <memcpy>
    147a: 48 8b 74 24 10               	movq	16(%rsp), %rsi
    147f: 48 8b 7c 24 08               	movq	8(%rsp), %rdi
    1484: 48 8b 54 24 28               	movq	40(%rsp), %rdx
    1489: 48 c1 e2 00                  	shlq	$0, %rdx
    148d: e8 8e 22 00 00               	callq	0x3720 <memcpy>
    1492: eb 00                        	jmp	0x1494 <core::ptr::swap_nonoverlapping_bytes+0x234>
    1494: 48 89 ec                     	movq	%rbp, %rsp
    1497: 5d                           	popq	%rbp
    1498: c3                           	retq
    1499: 48 8d 3d d0 3d 00 00         	leaq	15824(%rip), %rdi  # 5270 <str.1>
    14a0: 48 8d 15 31 2c 00 00         	leaq	11313(%rip), %rdx  # 40d8 <core::fmt::num::DEC_DIGITS_LUT+0x20>
    14a7: be 1c 00 00 00               	movl	$28, %esi
    14ac: e8 4f f4 ff ff               	callq	0x900 <core::panicking::panic>
    14b1: 0f 0b                        	ud2
    14b3: 48 8d 3d b6 3d 00 00         	leaq	15798(%rip), %rdi  # 5270 <str.1>
    14ba: 48 8d 15 2f 2c 00 00         	leaq	11311(%rip), %rdx  # 40f0 <core::fmt::num::DEC_DIGITS_LUT+0x38>
    14c1: be 1c 00 00 00               	movl	$28, %esi
    14c6: e8 35 f4 ff ff               	callq	0x900 <core::panicking::panic>
    14cb: 0f 0b                        	ud2
    14cd: 48 8d 3d bc 3d 00 00         	leaq	15804(%rip), %rdi  # 5290 <str.2>
    14d4: 48 8d 15 2d 2c 00 00         	leaq	11309(%rip), %rdx  # 4108 <core::fmt::num::DEC_DIGITS_LUT+0x50>
    14db: be 21 00 00 00               	movl	$33, %esi
    14e0: e8 1b f4 ff ff               	callq	0x900 <core::panicking::panic>
    14e5: 0f 0b                        	ud2
    14e7: cc                           	int3
    14e8: cc                           	int3
    14e9: cc                           	int3
    14ea: cc                           	int3
    14eb: cc                           	int3
    14ec: cc                           	int3
    14ed: cc                           	int3
    14ee: cc                           	int3
    14ef: cc                           	int3

00000000000014f0 <core::ptr::read>:
    14f0: 55                           	pushq	%rbp
    14f1: 48 89 e5                     	movq	%rsp, %rbp
    14f4: 48 83 ec 38                  	subq	$56, %rsp
    14f8: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
    14fc: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    1500: 8b 45 ec                     	movl	-20(%rbp), %eax
    1503: 89 45 dc                     	movl	%eax, -36(%rbp)
    1506: 48 8d 45 dc                  	leaq	-36(%rbp), %rax
    150a: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    150e: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    1512: 8b 00                        	movl	(%rax), %eax
    1514: 89 45 dc                     	movl	%eax, -36(%rbp)
    1517: 8b 45 dc                     	movl	-36(%rbp), %eax
    151a: 89 45 cc                     	movl	%eax, -52(%rbp)
    151d: 89 45 f0                     	movl	%eax, -16(%rbp)
    1520: 89 45 f4                     	movl	%eax, -12(%rbp)
    1523: 8b 45 cc                     	movl	-52(%rbp), %eax
    1526: 48 83 c4 38                  	addq	$56, %rsp
    152a: 5d                           	popq	%rbp
    152b: c3                           	retq
    152c: cc                           	int3
    152d: cc                           	int3
    152e: cc                           	int3
    152f: cc                           	int3

0000000000001530 <core::ptr::read>:
    1530: 55                           	pushq	%rbp
    1531: 48 89 e5                     	movq	%rsp, %rbp
    1534: 48 83 ec 40                  	subq	$64, %rsp
    1538: 48 89 7d c8                  	movq	%rdi, -56(%rbp)
    153c: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    1540: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    1544: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    1548: 48 8d 45 d0                  	leaq	-48(%rbp), %rax
    154c: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    1550: 48 8b 45 c8                  	movq	-56(%rbp), %rax
    1554: 48 8b 00                     	movq	(%rax), %rax
    1557: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    155b: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    155f: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    1563: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    1567: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    156b: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    156f: 48 83 c4 40                  	addq	$64, %rsp
    1573: 5d                           	popq	%rbp
    1574: c3                           	retq
    1575: cc                           	int3
    1576: cc                           	int3
    1577: cc                           	int3
    1578: cc                           	int3
    1579: cc                           	int3
    157a: cc                           	int3
    157b: cc                           	int3
    157c: cc                           	int3
    157d: cc                           	int3
    157e: cc                           	int3
    157f: cc                           	int3

0000000000001580 <core::ptr::read>:
    1580: 55                           	pushq	%rbp
    1581: 48 89 e5                     	movq	%rsp, %rbp
    1584: 48 83 ec 30                  	subq	$48, %rsp
    1588: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    158c: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    1590: 8a 45 f5                     	movb	-11(%rbp), %al
    1593: 88 45 e7                     	movb	%al, -25(%rbp)
    1596: 48 8d 45 e7                  	leaq	-25(%rbp), %rax
    159a: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    159e: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    15a2: 8a 00                        	movb	(%rax), %al
    15a4: 88 45 e7                     	movb	%al, -25(%rbp)
    15a7: 8a 45 e7                     	movb	-25(%rbp), %al
    15aa: 88 45 d7                     	movb	%al, -41(%rbp)
    15ad: 88 45 f6                     	movb	%al, -10(%rbp)
    15b0: 88 45 f7                     	movb	%al, -9(%rbp)
    15b3: 8a 45 d7                     	movb	-41(%rbp), %al
    15b6: 48 83 c4 30                  	addq	$48, %rsp
    15ba: 5d                           	popq	%rbp
    15bb: c3                           	retq
    15bc: cc                           	int3
    15bd: cc                           	int3
    15be: cc                           	int3
    15bf: cc                           	int3

00000000000015c0 <core::ptr::write>:
    15c0: 55                           	pushq	%rbp
    15c1: 48 89 e5                     	movq	%rsp, %rbp
    15c4: 48 83 ec 10                  	subq	$16, %rsp
    15c8: 89 75 f4                     	movl	%esi, -12(%rbp)
    15cb: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    15cf: 8b 45 f4                     	movl	-12(%rbp), %eax
    15d2: 89 07                        	movl	%eax, (%rdi)
    15d4: 48 83 c4 10                  	addq	$16, %rsp
    15d8: 5d                           	popq	%rbp
    15d9: c3                           	retq
    15da: cc                           	int3
    15db: cc                           	int3
    15dc: cc                           	int3
    15dd: cc                           	int3
    15de: cc                           	int3
    15df: cc                           	int3

00000000000015e0 <core::ptr::write>:
    15e0: 55                           	pushq	%rbp
    15e1: 48 89 e5                     	movq	%rsp, %rbp
    15e4: 48 83 ec 10                  	subq	$16, %rsp
    15e8: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    15ec: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    15f0: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    15f4: 48 89 07                     	movq	%rax, (%rdi)
    15f7: 48 83 c4 10                  	addq	$16, %rsp
    15fb: 5d                           	popq	%rbp
    15fc: c3                           	retq
    15fd: cc                           	int3
    15fe: cc                           	int3
    15ff: cc                           	int3

0000000000001600 <core::ptr::write>:
    1600: 55                           	pushq	%rbp
    1601: 48 89 e5                     	movq	%rsp, %rbp
    1604: 48 83 ec 10                  	subq	$16, %rsp
    1608: 40 88 f0                     	movb	%sil, %al
    160b: 88 45 f7                     	movb	%al, -9(%rbp)
    160e: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    1612: 8a 45 f7                     	movb	-9(%rbp), %al
    1615: 88 07                        	movb	%al, (%rdi)
    1617: 48 83 c4 10                  	addq	$16, %rsp
    161b: 5d                           	popq	%rbp
    161c: c3                           	retq
    161d: cc                           	int3
    161e: cc                           	int3
    161f: cc                           	int3

0000000000001620 <core::iter::adapters::filter::Filter<I,P>::new>:
    1620: 55                           	pushq	%rbp
    1621: 48 89 e5                     	movq	%rsp, %rbp
    1624: 48 83 ec 28                  	subq	$40, %rsp
    1628: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    162c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    1630: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    1634: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
    1638: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    163c: 48 8b 55 e0                  	movq	-32(%rbp), %rdx
    1640: 48 83 c4 28                  	addq	$40, %rsp
    1644: 5d                           	popq	%rbp
    1645: c3                           	retq
    1646: cc                           	int3
    1647: cc                           	int3
    1648: cc                           	int3
    1649: cc                           	int3
    164a: cc                           	int3
    164b: cc                           	int3
    164c: cc                           	int3
    164d: cc                           	int3
    164e: cc                           	int3
    164f: cc                           	int3

0000000000001650 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count>:
    1650: 55                           	pushq	%rbp
    1651: 48 89 e5                     	movq	%rsp, %rbp
    1654: 48 83 ec 40                  	subq	$64, %rsp
    1658: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
    165c: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    1660: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    1664: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    1668: e8 33 00 00 00               	callq	0x16a0 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::to_usize>
    166d: 48 8b 75 e0                  	movq	-32(%rbp), %rsi
    1671: 48 8b 7d e8                  	movq	-24(%rbp), %rdi
    1675: e8 06 1b 00 00               	callq	0x3180 <core::iter::traits::iterator::Iterator::map>
    167a: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    167e: 48 89 55 d8                  	movq	%rdx, -40(%rbp)
    1682: 48 8b 75 d8                  	movq	-40(%rbp), %rsi
    1686: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    168a: e8 31 f6 ff ff               	callq	0xcc0 <core::iter::traits::iterator::Iterator::sum>
    168f: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    1693: 48 8b 45 c8                  	movq	-56(%rbp), %rax
    1697: 48 83 c4 40                  	addq	$64, %rsp
    169b: 5d                           	popq	%rbp
    169c: c3                           	retq
    169d: cc                           	int3
    169e: cc                           	int3
    169f: cc                           	int3

00000000000016a0 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::to_usize>:
    16a0: 55                           	pushq	%rbp
    16a1: 48 89 e5                     	movq	%rsp, %rbp
    16a4: 5d                           	popq	%rbp
    16a5: c3                           	retq
    16a6: cc                           	int3
    16a7: cc                           	int3
    16a8: cc                           	int3
    16a9: cc                           	int3
    16aa: cc                           	int3
    16ab: cc                           	int3
    16ac: cc                           	int3
    16ad: cc                           	int3
    16ae: cc                           	int3
    16af: cc                           	int3

00000000000016b0 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::to_usize::{{closure}}>:
    16b0: 55                           	pushq	%rbp
    16b1: 48 89 e5                     	movq	%rsp, %rbp
    16b4: 48 83 ec 30                  	subq	$48, %rsp
    16b8: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    16bc: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    16c0: 48 8d 45 e8                  	leaq	-24(%rbp), %rax
    16c4: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    16c8: 48 8b 75 f0                  	movq	-16(%rbp), %rsi
    16cc: e8 cf 1e 00 00               	callq	0x35a0 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count::{{closure}}>
    16d1: 88 45 e7                     	movb	%al, -25(%rbp)
    16d4: 8a 45 e7                     	movb	-25(%rbp), %al
    16d7: 24 01                        	andb	$1, %al
    16d9: 0f b6 c0                     	movzbl	%al, %eax
    16dc: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    16e0: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    16e4: 48 83 c4 30                  	addq	$48, %rsp
    16e8: 5d                           	popq	%rbp
    16e9: c3                           	retq
    16ea: cc                           	int3
    16eb: cc                           	int3
    16ec: cc                           	int3
    16ed: cc                           	int3
    16ee: cc                           	int3
    16ef: cc                           	int3

00000000000016f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>:
    16f0: 55                           	pushq	%rbp
    16f1: 48 89 e5                     	movq	%rsp, %rbp
    16f4: 48 83 ec 01                  	subq	$1, %rsp
    16f8: 40 88 f8                     	movb	%dil, %al
    16fb: 88 c1                        	movb	%al, %cl
    16fd: 80 e1 01                     	andb	$1, %cl
    1700: 88 4d ff                     	movb	%cl, -1(%rbp)
    1703: 24 01                        	andb	$1, %al
    1705: 0f b6 c0                     	movzbl	%al, %eax
    1708: 48 83 c4 01                  	addq	$1, %rsp
    170c: 5d                           	popq	%rbp
    170d: c3                           	retq
    170e: cc                           	int3
    170f: cc                           	int3

0000000000001710 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>:
    1710: 55                           	pushq	%rbp
    1711: 48 89 e5                     	movq	%rsp, %rbp
    1714: 48 83 ec 10                  	subq	$16, %rsp
    1718: 89 f2                        	movl	%esi, %edx
    171a: 48 89 f8                     	movq	%rdi, %rax
    171d: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    1721: 89 55 f8                     	movl	%edx, -8(%rbp)
    1724: 48 83 c4 10                  	addq	$16, %rsp
    1728: 5d                           	popq	%rbp
    1729: c3                           	retq
    172a: cc                           	int3
    172b: cc                           	int3
    172c: cc                           	int3
    172d: cc                           	int3
    172e: cc                           	int3
    172f: cc                           	int3

0000000000001730 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>:
    1730: 55                           	pushq	%rbp
    1731: 48 89 e5                     	movq	%rsp, %rbp
    1734: 48 83 ec 18                  	subq	$24, %rsp
    1738: c7 45 f0 00 00 11 00         	movl	$1114112, -16(%rbp)
    173f: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    1743: 8b 55 f0                     	movl	-16(%rbp), %edx
    1746: 48 83 c4 18                  	addq	$24, %rsp
    174a: 5d                           	popq	%rbp
    174b: c3                           	retq
    174c: cc                           	int3
    174d: cc                           	int3
    174e: cc                           	int3
    174f: cc                           	int3

0000000000001750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>:
    1750: 55                           	pushq	%rbp
    1751: 48 89 e5                     	movq	%rsp, %rbp
    1754: 48 83 ec 10                  	subq	$16, %rsp
    1758: c6 45 f7 01                  	movb	$1, -9(%rbp)
    175c: 8a 45 f7                     	movb	-9(%rbp), %al
    175f: 24 01                        	andb	$1, %al
    1761: 0f b6 c0                     	movzbl	%al, %eax
    1764: 48 83 c4 10                  	addq	$16, %rsp
    1768: 5d                           	popq	%rbp
    1769: c3                           	retq
    176a: cc                           	int3
    176b: cc                           	int3
    176c: cc                           	int3
    176d: cc                           	int3
    176e: cc                           	int3
    176f: cc                           	int3

0000000000001770 <core::slice::raw::from_raw_parts>:
    1770: 55                           	pushq	%rbp
    1771: 48 89 e5                     	movq	%rsp, %rbp
    1774: 48 83 ec 40                  	subq	$64, %rsp
    1778: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
    177c: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    1780: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    1784: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    1788: e8 53 ed ff ff               	callq	0x4e0 <core::intrinsics::is_aligned_and_not_null>
    178d: 88 45 ef                     	movb	%al, -17(%rbp)
    1790: 8a 45 ef                     	movb	-17(%rbp), %al
    1793: 34 ff                        	xorb	$-1, %al
    1795: a8 01                        	testb	$1, %al
    1797: 75 02                        	jne	0x179b <core::slice::raw::from_raw_parts+0x2b>
    1799: eb 1a                        	jmp	0x17b5 <core::slice::raw::from_raw_parts+0x45>
    179b: 48 8d 3d 0f 3b 00 00         	leaq	15119(%rip), %rdi  # 52b1 <str.2+0x21>
    17a2: 48 8d 15 77 29 00 00         	leaq	10615(%rip), %rdx  # 4120 <core::fmt::num::DEC_DIGITS_LUT+0x68>
    17a9: be 29 00 00 00               	movl	$41, %esi
    17ae: e8 4d f1 ff ff               	callq	0x900 <core::panicking::panic>
    17b3: 0f 0b                        	ud2
    17b5: eb 00                        	jmp	0x17b7 <core::slice::raw::from_raw_parts+0x47>
    17b7: 48 8b 75 d8                  	movq	-40(%rbp), %rsi
    17bb: bf 01 00 00 00               	movl	$1, %edi
    17c0: e8 6b 09 00 00               	callq	0x2130 <core::num::<impl usize>::saturating_mul>
    17c5: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    17c9: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    17cd: 48 b9 ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rcx
    17d7: 48 39 c8                     	cmpq	%rcx, %rax
    17da: 0f 96 c0                     	setbe	%al
    17dd: 34 ff                        	xorb	$-1, %al
    17df: a8 01                        	testb	$1, %al
    17e1: 75 02                        	jne	0x17e5 <core::slice::raw::from_raw_parts+0x75>
    17e3: eb 1a                        	jmp	0x17ff <core::slice::raw::from_raw_parts+0x8f>
    17e5: 48 8d 3d 60 3b 00 00         	leaq	15200(%rip), %rdi  # 534c <str.2+0xbc>
    17ec: 48 8d 15 45 29 00 00         	leaq	10565(%rip), %rdx  # 4138 <core::fmt::num::DEC_DIGITS_LUT+0x80>
    17f3: be 40 00 00 00               	movl	$64, %esi
    17f8: e8 03 f1 ff ff               	callq	0x900 <core::panicking::panic>
    17fd: 0f 0b                        	ud2
    17ff: 48 8b 75 d8                  	movq	-40(%rbp), %rsi
    1803: 48 8b 7d e0                  	movq	-32(%rbp), %rdi
    1807: e8 94 f5 ff ff               	callq	0xda0 <core::ptr::slice_from_raw_parts>
    180c: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    1810: 48 89 55 c8                  	movq	%rdx, -56(%rbp)
    1814: 48 8b 55 c8                  	movq	-56(%rbp), %rdx
    1818: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    181c: 48 83 c4 40                  	addq	$64, %rsp
    1820: 5d                           	popq	%rbp
    1821: c3                           	retq
    1822: cc                           	int3
    1823: cc                           	int3
    1824: cc                           	int3
    1825: cc                           	int3
    1826: cc                           	int3
    1827: cc                           	int3
    1828: cc                           	int3
    1829: cc                           	int3
    182a: cc                           	int3
    182b: cc                           	int3
    182c: cc                           	int3
    182d: cc                           	int3
    182e: cc                           	int3
    182f: cc                           	int3

0000000000001830 <core::clone::impls::<impl core::clone::Clone for usize>::clone>:
    1830: 55                           	pushq	%rbp
    1831: 48 89 e5                     	movq	%rsp, %rbp
    1834: 50                           	pushq	%rax
    1835: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    1839: 48 8b 07                     	movq	(%rdi), %rax
    183c: 48 83 c4 08                  	addq	$8, %rsp
    1840: 5d                           	popq	%rbp
    1841: c3                           	retq
    1842: cc                           	int3
    1843: cc                           	int3
    1844: cc                           	int3
    1845: cc                           	int3
    1846: cc                           	int3
    1847: cc                           	int3
    1848: cc                           	int3
    1849: cc                           	int3
    184a: cc                           	int3
    184b: cc                           	int3
    184c: cc                           	int3
    184d: cc                           	int3
    184e: cc                           	int3
    184f: cc                           	int3

0000000000001850 <<usize as core::iter::traits::accum::Sum>::sum>:
    1850: 55                           	pushq	%rbp
    1851: 48 89 e5                     	movq	%rsp, %rbp
    1854: 48 83 ec 20                  	subq	$32, %rsp
    1858: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    185c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    1860: 31 c0                        	xorl	%eax, %eax
    1862: 89 c2                        	movl	%eax, %edx
    1864: e8 07 f4 ff ff               	callq	0xc70 <<core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::fold>
    1869: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    186d: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    1871: 48 83 c4 20                  	addq	$32, %rsp
    1875: 5d                           	popq	%rbp
    1876: c3                           	retq
    1877: cc                           	int3
    1878: cc                           	int3
    1879: cc                           	int3
    187a: cc                           	int3
    187b: cc                           	int3
    187c: cc                           	int3
    187d: cc                           	int3
    187e: cc                           	int3
    187f: cc                           	int3

0000000000001880 <<usize as core::iter::traits::accum::Sum>::sum::{{closure}}>:
    1880: 55                           	pushq	%rbp
    1881: 48 89 e5                     	movq	%rsp, %rbp
    1884: 48 83 ec 20                  	subq	$32, %rsp
    1888: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    188c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    1890: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
    1894: 48 01 d6                     	addq	%rdx, %rsi
    1897: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
    189b: 0f 92 c0                     	setb	%al
    189e: a8 01                        	testb	$1, %al
    18a0: 75 0a                        	jne	0x18ac <<usize as core::iter::traits::accum::Sum>::sum::{{closure}}+0x2c>
    18a2: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    18a6: 48 83 c4 20                  	addq	$32, %rsp
    18aa: 5d                           	popq	%rbp
    18ab: c3                           	retq
    18ac: 48 8d 3d 7d 3b 00 00         	leaq	15229(%rip), %rdi  # 5430 <str.5>
    18b3: 48 8d 15 96 28 00 00         	leaq	10390(%rip), %rdx  # 4150 <core::fmt::num::DEC_DIGITS_LUT+0x98>
    18ba: be 1c 00 00 00               	movl	$28, %esi
    18bf: e8 3c f0 ff ff               	callq	0x900 <core::panicking::panic>
    18c4: 0f 0b                        	ud2
    18c6: cc                           	int3
    18c7: cc                           	int3
    18c8: cc                           	int3
    18c9: cc                           	int3
    18ca: cc                           	int3
    18cb: cc                           	int3
    18cc: cc                           	int3
    18cd: cc                           	int3
    18ce: cc                           	int3
    18cf: cc                           	int3

00000000000018d0 <core::fmt::num::imp::fmt_u64>:
    18d0: 55                           	pushq	%rbp
    18d1: 48 89 e5                     	movq	%rsp, %rbp
    18d4: 48 81 ec c0 01 00 00         	subq	$448, %rsp
    18db: 48 89 95 40 ff ff ff         	movq	%rdx, -192(%rbp)
    18e2: 40 88 f0                     	movb	%sil, %al
    18e5: 88 85 4e ff ff ff            	movb	%al, -178(%rbp)
    18eb: 48 89 bd 50 ff ff ff         	movq	%rdi, -176(%rbp)
    18f2: 24 01                        	andb	$1, %al
    18f4: 88 45 97                     	movb	%al, -105(%rbp)
    18f7: 48 89 55 98                  	movq	%rdx, -104(%rbp)
    18fb: 8a 45 ef                     	movb	-17(%rbp), %al
    18fe: 88 85 4f ff ff ff            	movb	%al, -177(%rbp)
    1904: 8a 85 4f ff ff ff            	movb	-177(%rbp), %al
    190a: 48 8d bd 59 ff ff ff         	leaq	-167(%rbp), %rdi
    1911: ba 27 00 00 00               	movl	$39, %edx
    1916: 0f b6 f0                     	movzbl	%al, %esi
    1919: e8 52 1e 00 00               	callq	0x3770 <memset>
    191e: 48 8d bd 59 ff ff ff         	leaq	-167(%rbp), %rdi
    1925: be 27 00 00 00               	movl	$39, %esi
    192a: e8 c1 06 00 00               	callq	0x1ff0 <core::slice::<impl [T]>::len>
    192f: 48 89 85 38 ff ff ff         	movq	%rax, -200(%rbp)
    1936: 48 8b 85 38 ff ff ff         	movq	-200(%rbp), %rax
    193d: 48 89 45 80                  	movq	%rax, -128(%rbp)
    1941: 48 8d bd 59 ff ff ff         	leaq	-167(%rbp), %rdi
    1948: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    194c: 48 c7 45 f8 27 00 00 00      	movq	$39, -8(%rbp)
    1954: be 27 00 00 00               	movl	$39, %esi
    1959: e8 c2 06 00 00               	callq	0x2020 <core::slice::<impl [T]>::as_mut_ptr>
    195e: 48 89 85 30 ff ff ff         	movq	%rax, -208(%rbp)
    1965: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    1969: 48 8b 3d 48 27 00 00         	movq	10056(%rip), %rdi  # 40b8 <core::fmt::num::DEC_DIGITS_LUT>
    1970: be c8 00 00 00               	movl	$200, %esi
    1975: e8 46 f0 ff ff               	callq	0x9c0 <core::slice::<impl [T]>::as_ptr>
    197a: 48 89 85 28 ff ff ff         	movq	%rax, -216(%rbp)
    1981: 48 89 45 a8                  	movq	%rax, -88(%rbp)
    1985: eb 00                        	jmp	0x1987 <core::fmt::num::imp::fmt_u64+0xb7>
    1987: b8 08 00 00 00               	movl	$8, %eax
    198c: 48 83 f8 02                  	cmpq	$2, %rax
    1990: 0f 93 c0                     	setae	%al
    1993: 34 ff                        	xorb	$-1, %al
    1995: a8 01                        	testb	$1, %al
    1997: 75 02                        	jne	0x199b <core::fmt::num::imp::fmt_u64+0xcb>
    1999: eb 1a                        	jmp	0x19b5 <core::fmt::num::imp::fmt_u64+0xe5>
    199b: 48 8d 3d aa 3a 00 00         	leaq	15018(%rip), %rdi  # 544c <str.5+0x1c>
    19a2: 48 8d 15 bf 27 00 00         	leaq	10175(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    19a9: be 33 00 00 00               	movl	$51, %esi
    19ae: e8 4d ef ff ff               	callq	0x900 <core::panicking::panic>
    19b3: 0f 0b                        	ud2
    19b5: eb 00                        	jmp	0x19b7 <core::fmt::num::imp::fmt_u64+0xe7>
    19b7: 48 81 bd 50 ff ff ff 10 27 00 00     	cmpq	$10000, -176(%rbp)
    19c2: 73 1b                        	jae	0x19df <core::fmt::num::imp::fmt_u64+0x10f>
    19c4: 48 8b 85 50 ff ff ff         	movq	-176(%rbp), %rax
    19cb: 48 89 45 88                  	movq	%rax, -120(%rbp)
    19cf: 48 83 7d 88 64               	cmpq	$100, -120(%rbp)
    19d4: 0f 8d 9a 01 00 00            	jge	0x1b74 <core::fmt::num::imp::fmt_u64+0x2a4>
    19da: e9 bc 01 00 00               	jmp	0x1b9b <core::fmt::num::imp::fmt_u64+0x2cb>
    19df: 48 8b 85 50 ff ff ff         	movq	-176(%rbp), %rax
    19e6: b9 10 27 00 00               	movl	$10000, %ecx
    19eb: 31 d2                        	xorl	%edx, %edx
    19ed: 48 f7 f1                     	divq	%rcx
    19f0: 48 89 95 20 ff ff ff         	movq	%rdx, -224(%rbp)
    19f7: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
    19fb: 48 8b 85 50 ff ff ff         	movq	-176(%rbp), %rax
    1a02: b9 10 27 00 00               	movl	$10000, %ecx
    1a07: 31 d2                        	xorl	%edx, %edx
    1a09: 48 f7 f1                     	divq	%rcx
    1a0c: 48 8b 95 20 ff ff ff         	movq	-224(%rbp), %rdx
    1a13: 48 89 85 50 ff ff ff         	movq	%rax, -176(%rbp)
    1a1a: 48 b8 00 00 00 00 00 00 00 80	movabsq	$-9223372036854775808, %rax
    1a24: 48 39 c2                     	cmpq	%rax, %rdx
    1a27: 0f 94 c0                     	sete	%al
    1a2a: 24 00                        	andb	$0, %al
    1a2c: a8 01                        	testb	$1, %al
    1a2e: 0f 85 01 04 00 00            	jne	0x1e35 <core::fmt::num::imp::fmt_u64+0x565>
    1a34: 48 8b 85 20 ff ff ff         	movq	-224(%rbp), %rax
    1a3b: b9 64 00 00 00               	movl	$100, %ecx
    1a40: 48 99                        	cqto
    1a42: 48 f7 f9                     	idivq	%rcx
    1a45: 48 c1 e0 01                  	shlq	$1, %rax
    1a49: 48 89 85 18 ff ff ff         	movq	%rax, -232(%rbp)
    1a50: 48 8b 85 20 ff ff ff         	movq	-224(%rbp), %rax
    1a57: 48 8b 8d 18 ff ff ff         	movq	-232(%rbp), %rcx
    1a5e: 48 89 4d b8                  	movq	%rcx, -72(%rbp)
    1a62: 48 b9 00 00 00 00 00 00 00 80	movabsq	$-9223372036854775808, %rcx
    1a6c: 48 39 c8                     	cmpq	%rcx, %rax
    1a6f: 0f 94 c0                     	sete	%al
    1a72: 24 00                        	andb	$0, %al
    1a74: a8 01                        	testb	$1, %al
    1a76: 0f 85 d3 03 00 00            	jne	0x1e4f <core::fmt::num::imp::fmt_u64+0x57f>
    1a7c: 48 8b 85 20 ff ff ff         	movq	-224(%rbp), %rax
    1a83: b9 64 00 00 00               	movl	$100, %ecx
    1a88: 48 99                        	cqto
    1a8a: 48 f7 f9                     	idivq	%rcx
    1a8d: 48 c1 e2 01                  	shlq	$1, %rdx
    1a91: 48 89 95 10 ff ff ff         	movq	%rdx, -240(%rbp)
    1a98: 48 8b 85 10 ff ff ff         	movq	-240(%rbp), %rax
    1a9f: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    1aa3: 48 8b 45 80                  	movq	-128(%rbp), %rax
    1aa7: 48 83 e8 04                  	subq	$4, %rax
    1aab: 48 89 85 08 ff ff ff         	movq	%rax, -248(%rbp)
    1ab2: 0f 90 c0                     	seto	%al
    1ab5: a8 01                        	testb	$1, %al
    1ab7: 0f 85 ac 03 00 00            	jne	0x1e69 <core::fmt::num::imp::fmt_u64+0x599>
    1abd: 48 8b b5 18 ff ff ff         	movq	-232(%rbp), %rsi
    1ac4: 48 8b bd 28 ff ff ff         	movq	-216(%rbp), %rdi
    1acb: 48 8b 85 08 ff ff ff         	movq	-248(%rbp), %rax
    1ad2: 48 89 45 80                  	movq	%rax, -128(%rbp)
    1ad6: e8 e5 ef ff ff               	callq	0xac0 <core::ptr::const_ptr::<impl *const T>::offset>
    1adb: 48 89 85 00 ff ff ff         	movq	%rax, -256(%rbp)
    1ae2: 48 8b bd 30 ff ff ff         	movq	-208(%rbp), %rdi
    1ae9: 48 8b 75 80                  	movq	-128(%rbp), %rsi
    1aed: e8 8e 08 00 00               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    1af2: 48 89 85 f8 fe ff ff         	movq	%rax, -264(%rbp)
    1af9: 48 8b 85 f8 fe ff ff         	movq	-264(%rbp), %rax
    1b00: 48 8b 8d 00 ff ff ff         	movq	-256(%rbp), %rcx
    1b07: 66 8b 09                     	movw	(%rcx), %cx
    1b0a: 66 89 08                     	movw	%cx, (%rax)
    1b0d: 48 8b b5 10 ff ff ff         	movq	-240(%rbp), %rsi
    1b14: 48 8b bd 28 ff ff ff         	movq	-216(%rbp), %rdi
    1b1b: e8 a0 ef ff ff               	callq	0xac0 <core::ptr::const_ptr::<impl *const T>::offset>
    1b20: 48 89 85 f0 fe ff ff         	movq	%rax, -272(%rbp)
    1b27: 48 8b 45 80                  	movq	-128(%rbp), %rax
    1b2b: 48 83 c0 02                  	addq	$2, %rax
    1b2f: 48 89 85 e8 fe ff ff         	movq	%rax, -280(%rbp)
    1b36: 0f 90 c0                     	seto	%al
    1b39: a8 01                        	testb	$1, %al
    1b3b: 0f 85 42 03 00 00            	jne	0x1e83 <core::fmt::num::imp::fmt_u64+0x5b3>
    1b41: 48 8b b5 e8 fe ff ff         	movq	-280(%rbp), %rsi
    1b48: 48 8b bd 30 ff ff ff         	movq	-208(%rbp), %rdi
    1b4f: e8 2c 08 00 00               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    1b54: 48 89 85 e0 fe ff ff         	movq	%rax, -288(%rbp)
    1b5b: 48 8b 85 e0 fe ff ff         	movq	-288(%rbp), %rax
    1b62: 48 8b 8d f0 fe ff ff         	movq	-272(%rbp), %rcx
    1b69: 66 8b 09                     	movw	(%rcx), %cx
    1b6c: 66 89 08                     	movw	%cx, (%rax)
    1b6f: e9 43 fe ff ff               	jmp	0x19b7 <core::fmt::num::imp::fmt_u64+0xe7>
    1b74: 48 8b 45 88                  	movq	-120(%rbp), %rax
    1b78: 48 89 85 d8 fe ff ff         	movq	%rax, -296(%rbp)
    1b7f: 48 b9 00 00 00 00 00 00 00 80	movabsq	$-9223372036854775808, %rcx
    1b89: 48 39 c8                     	cmpq	%rcx, %rax
    1b8c: 0f 94 c0                     	sete	%al
    1b8f: 24 00                        	andb	$0, %al
    1b91: a8 01                        	testb	$1, %al
    1b93: 0f 85 04 03 00 00            	jne	0x1e9d <core::fmt::num::imp::fmt_u64+0x5cd>
    1b99: eb 05                        	jmp	0x1ba0 <core::fmt::num::imp::fmt_u64+0x2d0>
    1b9b: e9 c0 00 00 00               	jmp	0x1c60 <core::fmt::num::imp::fmt_u64+0x390>
    1ba0: 48 8b 85 d8 fe ff ff         	movq	-296(%rbp), %rax
    1ba7: b9 64 00 00 00               	movl	$100, %ecx
    1bac: 48 99                        	cqto
    1bae: 48 f7 f9                     	idivq	%rcx
    1bb1: 48 c1 e2 01                  	shlq	$1, %rdx
    1bb5: 48 89 95 d0 fe ff ff         	movq	%rdx, -304(%rbp)
    1bbc: 48 8b 85 d0 fe ff ff         	movq	-304(%rbp), %rax
    1bc3: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    1bc7: 48 b8 00 00 00 00 00 00 00 80	movabsq	$-9223372036854775808, %rax
    1bd1: 48 39 45 88                  	cmpq	%rax, -120(%rbp)
    1bd5: 0f 94 c0                     	sete	%al
    1bd8: 24 00                        	andb	$0, %al
    1bda: a8 01                        	testb	$1, %al
    1bdc: 0f 85 d5 02 00 00            	jne	0x1eb7 <core::fmt::num::imp::fmt_u64+0x5e7>
    1be2: 48 8b 45 88                  	movq	-120(%rbp), %rax
    1be6: b9 64 00 00 00               	movl	$100, %ecx
    1beb: 48 99                        	cqto
    1bed: 48 f7 f9                     	idivq	%rcx
    1bf0: 48 89 45 88                  	movq	%rax, -120(%rbp)
    1bf4: 48 8b 45 80                  	movq	-128(%rbp), %rax
    1bf8: 48 83 e8 02                  	subq	$2, %rax
    1bfc: 48 89 85 c8 fe ff ff         	movq	%rax, -312(%rbp)
    1c03: 0f 90 c0                     	seto	%al
    1c06: a8 01                        	testb	$1, %al
    1c08: 0f 85 c3 02 00 00            	jne	0x1ed1 <core::fmt::num::imp::fmt_u64+0x601>
    1c0e: 48 8b b5 d0 fe ff ff         	movq	-304(%rbp), %rsi
    1c15: 48 8b bd 28 ff ff ff         	movq	-216(%rbp), %rdi
    1c1c: 48 8b 85 c8 fe ff ff         	movq	-312(%rbp), %rax
    1c23: 48 89 45 80                  	movq	%rax, -128(%rbp)
    1c27: e8 94 ee ff ff               	callq	0xac0 <core::ptr::const_ptr::<impl *const T>::offset>
    1c2c: 48 89 85 c0 fe ff ff         	movq	%rax, -320(%rbp)
    1c33: 48 8b bd 30 ff ff ff         	movq	-208(%rbp), %rdi
    1c3a: 48 8b 75 80                  	movq	-128(%rbp), %rsi
    1c3e: e8 3d 07 00 00               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    1c43: 48 89 85 b8 fe ff ff         	movq	%rax, -328(%rbp)
    1c4a: 48 8b 85 b8 fe ff ff         	movq	-328(%rbp), %rax
    1c51: 48 8b 8d c0 fe ff ff         	movq	-320(%rbp), %rcx
    1c58: 66 8b 09                     	movw	(%rcx), %cx
    1c5b: 66 89 08                     	movw	%cx, (%rax)
    1c5e: eb 00                        	jmp	0x1c60 <core::fmt::num::imp::fmt_u64+0x390>
    1c60: 48 83 7d 88 0a               	cmpq	$10, -120(%rbp)
    1c65: 7d 1b                        	jge	0x1c82 <core::fmt::num::imp::fmt_u64+0x3b2>
    1c67: 48 8b 45 80                  	movq	-128(%rbp), %rax
    1c6b: 48 ff c8                     	decq	%rax
    1c6e: 48 89 85 b0 fe ff ff         	movq	%rax, -336(%rbp)
    1c75: 0f 90 c0                     	seto	%al
    1c78: a8 01                        	testb	$1, %al
    1c7a: 0f 85 6b 02 00 00            	jne	0x1eeb <core::fmt::num::imp::fmt_u64+0x61b>
    1c80: eb 11                        	jmp	0x1c93 <core::fmt::num::imp::fmt_u64+0x3c3>
    1c82: 48 8b 45 88                  	movq	-120(%rbp), %rax
    1c86: 48 c1 e0 01                  	shlq	$1, %rax
    1c8a: 48 89 85 a8 fe ff ff         	movq	%rax, -344(%rbp)
    1c91: eb 4a                        	jmp	0x1cdd <core::fmt::num::imp::fmt_u64+0x40d>
    1c93: 48 8b 85 b0 fe ff ff         	movq	-336(%rbp), %rax
    1c9a: 48 89 45 80                  	movq	%rax, -128(%rbp)
    1c9e: 48 8b 45 88                  	movq	-120(%rbp), %rax
    1ca2: 04 30                        	addb	$48, %al
    1ca4: 88 85 a7 fe ff ff            	movb	%al, -345(%rbp)
    1caa: 0f 92 c0                     	setb	%al
    1cad: a8 01                        	testb	$1, %al
    1caf: 0f 85 50 02 00 00            	jne	0x1f05 <core::fmt::num::imp::fmt_u64+0x635>
    1cb5: 48 8b bd 30 ff ff ff         	movq	-208(%rbp), %rdi
    1cbc: 48 8b 75 80                  	movq	-128(%rbp), %rsi
    1cc0: e8 bb 06 00 00               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    1cc5: 48 89 85 98 fe ff ff         	movq	%rax, -360(%rbp)
    1ccc: 48 8b 85 98 fe ff ff         	movq	-360(%rbp), %rax
    1cd3: 8a 8d a7 fe ff ff            	movb	-345(%rbp), %cl
    1cd9: 88 08                        	movb	%cl, (%rax)
    1cdb: eb 77                        	jmp	0x1d54 <core::fmt::num::imp::fmt_u64+0x484>
    1cdd: 48 8b 85 a8 fe ff ff         	movq	-344(%rbp), %rax
    1ce4: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    1ce8: 48 8b 45 80                  	movq	-128(%rbp), %rax
    1cec: 48 83 e8 02                  	subq	$2, %rax
    1cf0: 48 89 85 90 fe ff ff         	movq	%rax, -368(%rbp)
    1cf7: 0f 90 c0                     	seto	%al
    1cfa: a8 01                        	testb	$1, %al
    1cfc: 0f 85 1d 02 00 00            	jne	0x1f1f <core::fmt::num::imp::fmt_u64+0x64f>
    1d02: 48 8b b5 a8 fe ff ff         	movq	-344(%rbp), %rsi
    1d09: 48 8b bd 28 ff ff ff         	movq	-216(%rbp), %rdi
    1d10: 48 8b 85 90 fe ff ff         	movq	-368(%rbp), %rax
    1d17: 48 89 45 80                  	movq	%rax, -128(%rbp)
    1d1b: e8 a0 ed ff ff               	callq	0xac0 <core::ptr::const_ptr::<impl *const T>::offset>
    1d20: 48 89 85 88 fe ff ff         	movq	%rax, -376(%rbp)
    1d27: 48 8b bd 30 ff ff ff         	movq	-208(%rbp), %rdi
    1d2e: 48 8b 75 80                  	movq	-128(%rbp), %rsi
    1d32: e8 49 06 00 00               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    1d37: 48 89 85 80 fe ff ff         	movq	%rax, -384(%rbp)
    1d3e: 48 8b 85 80 fe ff ff         	movq	-384(%rbp), %rax
    1d45: 48 8b 8d 88 fe ff ff         	movq	-376(%rbp), %rcx
    1d4c: 66 8b 09                     	movw	(%rcx), %cx
    1d4f: 66 89 08                     	movw	%cx, (%rax)
    1d52: eb 00                        	jmp	0x1d54 <core::fmt::num::imp::fmt_u64+0x484>
    1d54: 48 8b bd 30 ff ff ff         	movq	-208(%rbp), %rdi
    1d5b: 48 8b 75 80                  	movq	-128(%rbp), %rsi
    1d5f: e8 1c 06 00 00               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    1d64: 48 89 85 78 fe ff ff         	movq	%rax, -392(%rbp)
    1d6b: 48 8d bd 59 ff ff ff         	leaq	-167(%rbp), %rdi
    1d72: be 27 00 00 00               	movl	$39, %esi
    1d77: e8 74 02 00 00               	callq	0x1ff0 <core::slice::<impl [T]>::len>
    1d7c: 48 89 85 70 fe ff ff         	movq	%rax, -400(%rbp)
    1d83: 48 8b 85 70 fe ff ff         	movq	-400(%rbp), %rax
    1d8a: 48 2b 45 80                  	subq	-128(%rbp), %rax
    1d8e: 48 89 85 68 fe ff ff         	movq	%rax, -408(%rbp)
    1d95: 0f 92 c0                     	setb	%al
    1d98: a8 01                        	testb	$1, %al
    1d9a: 0f 85 99 01 00 00            	jne	0x1f39 <core::fmt::num::imp::fmt_u64+0x669>
    1da0: 48 8b b5 68 fe ff ff         	movq	-408(%rbp), %rsi
    1da7: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    1dae: e8 bd f9 ff ff               	callq	0x1770 <core::slice::raw::from_raw_parts>
    1db3: 48 89 85 58 fe ff ff         	movq	%rax, -424(%rbp)
    1dba: 48 89 95 60 fe ff ff         	movq	%rdx, -416(%rbp)
    1dc1: 48 8b b5 60 fe ff ff         	movq	-416(%rbp), %rsi
    1dc8: 48 8b bd 58 fe ff ff         	movq	-424(%rbp), %rdi
    1dcf: e8 4c 17 00 00               	callq	0x3520 <core::str::converts::from_utf8_unchecked>
    1dd4: 48 89 85 48 fe ff ff         	movq	%rax, -440(%rbp)
    1ddb: 48 89 95 50 fe ff ff         	movq	%rdx, -432(%rbp)
    1de2: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    1de6: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    1dea: 4c 8b 8d 50 fe ff ff         	movq	-432(%rbp), %r9
    1df1: 4c 8b 85 48 fe ff ff         	movq	-440(%rbp), %r8
    1df8: 48 8b bd 40 ff ff ff         	movq	-192(%rbp), %rdi
    1dff: 8a 85 4e ff ff ff            	movb	-178(%rbp), %al
    1e05: 0f b6 f0                     	movzbl	%al, %esi
    1e08: 83 e6 01                     	andl	$1, %esi
    1e0b: 48 8d 15 9f 34 00 00         	leaq	13471(%rip), %rdx  # 52b1 <str.2+0x21>
    1e12: 31 c0                        	xorl	%eax, %eax
    1e14: 89 c1                        	movl	%eax, %ecx
    1e16: e8 85 07 00 00               	callq	0x25a0 <core::fmt::Formatter::pad_integral>
    1e1b: 88 85 47 fe ff ff            	movb	%al, -441(%rbp)
    1e21: 8a 85 47 fe ff ff            	movb	-441(%rbp), %al
    1e27: 24 01                        	andb	$1, %al
    1e29: 0f b6 c0                     	movzbl	%al, %eax
    1e2c: 48 81 c4 c0 01 00 00         	addq	$448, %rsp
    1e33: 5d                           	popq	%rbp
    1e34: c3                           	retq
    1e35: 48 8d 3d b4 36 00 00         	leaq	14004(%rip), %rdi  # 54f0 <str.6>
    1e3c: 48 8d 15 25 23 00 00         	leaq	8997(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1e43: be 1f 00 00 00               	movl	$31, %esi
    1e48: e8 b3 ea ff ff               	callq	0x900 <core::panicking::panic>
    1e4d: 0f 0b                        	ud2
    1e4f: 48 8d 3d ba 36 00 00         	leaq	14010(%rip), %rdi  # 5510 <str.7>
    1e56: 48 8d 15 0b 23 00 00         	leaq	8971(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1e5d: be 30 00 00 00               	movl	$48, %esi
    1e62: e8 99 ea ff ff               	callq	0x900 <core::panicking::panic>
    1e67: 0f 0b                        	ud2
    1e69: 48 8d 3d 20 35 00 00         	leaq	13600(%rip), %rdi  # 5390 <str.0>
    1e70: 48 8d 15 f1 22 00 00         	leaq	8945(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1e77: be 21 00 00 00               	movl	$33, %esi
    1e7c: e8 7f ea ff ff               	callq	0x900 <core::panicking::panic>
    1e81: 0f 0b                        	ud2
    1e83: 48 8d 3d a6 35 00 00         	leaq	13734(%rip), %rdi  # 5430 <str.5>
    1e8a: 48 8d 15 d7 22 00 00         	leaq	8919(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1e91: be 1c 00 00 00               	movl	$28, %esi
    1e96: e8 65 ea ff ff               	callq	0x900 <core::panicking::panic>
    1e9b: 0f 0b                        	ud2
    1e9d: 48 8d 3d 6c 36 00 00         	leaq	13932(%rip), %rdi  # 5510 <str.7>
    1ea4: 48 8d 15 bd 22 00 00         	leaq	8893(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1eab: be 30 00 00 00               	movl	$48, %esi
    1eb0: e8 4b ea ff ff               	callq	0x900 <core::panicking::panic>
    1eb5: 0f 0b                        	ud2
    1eb7: 48 8d 3d 32 36 00 00         	leaq	13874(%rip), %rdi  # 54f0 <str.6>
    1ebe: 48 8d 15 a3 22 00 00         	leaq	8867(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1ec5: be 1f 00 00 00               	movl	$31, %esi
    1eca: e8 31 ea ff ff               	callq	0x900 <core::panicking::panic>
    1ecf: 0f 0b                        	ud2
    1ed1: 48 8d 3d b8 34 00 00         	leaq	13496(%rip), %rdi  # 5390 <str.0>
    1ed8: 48 8d 15 89 22 00 00         	leaq	8841(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1edf: be 21 00 00 00               	movl	$33, %esi
    1ee4: e8 17 ea ff ff               	callq	0x900 <core::panicking::panic>
    1ee9: 0f 0b                        	ud2
    1eeb: 48 8d 3d 9e 34 00 00         	leaq	13470(%rip), %rdi  # 5390 <str.0>
    1ef2: 48 8d 15 6f 22 00 00         	leaq	8815(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1ef9: be 21 00 00 00               	movl	$33, %esi
    1efe: e8 fd e9 ff ff               	callq	0x900 <core::panicking::panic>
    1f03: 0f 0b                        	ud2
    1f05: 48 8d 3d 24 35 00 00         	leaq	13604(%rip), %rdi  # 5430 <str.5>
    1f0c: 48 8d 15 55 22 00 00         	leaq	8789(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1f13: be 1c 00 00 00               	movl	$28, %esi
    1f18: e8 e3 e9 ff ff               	callq	0x900 <core::panicking::panic>
    1f1d: 0f 0b                        	ud2
    1f1f: 48 8d 3d 6a 34 00 00         	leaq	13418(%rip), %rdi  # 5390 <str.0>
    1f26: 48 8d 15 3b 22 00 00         	leaq	8763(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1f2d: be 21 00 00 00               	movl	$33, %esi
    1f32: e8 c9 e9 ff ff               	callq	0x900 <core::panicking::panic>
    1f37: 0f 0b                        	ud2
    1f39: 48 8d 3d 50 34 00 00         	leaq	13392(%rip), %rdi  # 5390 <str.0>
    1f40: 48 8d 15 21 22 00 00         	leaq	8737(%rip), %rdx  # 4168 <core::fmt::num::DEC_DIGITS_LUT+0xb0>
    1f47: be 21 00 00 00               	movl	$33, %esi
    1f4c: e8 af e9 ff ff               	callq	0x900 <core::panicking::panic>
    1f51: 0f 0b                        	ud2
    1f53: cc                           	int3
    1f54: cc                           	int3
    1f55: cc                           	int3
    1f56: cc                           	int3
    1f57: cc                           	int3
    1f58: cc                           	int3
    1f59: cc                           	int3
    1f5a: cc                           	int3
    1f5b: cc                           	int3
    1f5c: cc                           	int3
    1f5d: cc                           	int3
    1f5e: cc                           	int3
    1f5f: cc                           	int3

0000000000001f60 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>:
    1f60: 55                           	pushq	%rbp
    1f61: 48 89 e5                     	movq	%rsp, %rbp
    1f64: 48 83 ec 50                  	subq	$80, %rsp
    1f68: 48 89 75 c8                  	movq	%rsi, -56(%rbp)
    1f6c: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
    1f70: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    1f74: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    1f78: 48 83 3f 00                  	cmpq	$0, (%rdi)
    1f7c: 0f 93 c0                     	setae	%al
    1f7f: 88 45 df                     	movb	%al, -33(%rbp)
    1f82: 88 c1                        	movb	%al, %cl
    1f84: 80 e1 01                     	andb	$1, %cl
    1f87: 88 4d ff                     	movb	%cl, -1(%rbp)
    1f8a: a8 01                        	testb	$1, %al
    1f8c: 75 02                        	jne	0x1f90 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt+0x30>
    1f8e: eb 0f                        	jmp	0x1f9f <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt+0x3f>
    1f90: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    1f94: e8 b7 ed ff ff               	callq	0xd50 <<usize as core::fmt::num::DisplayInt>::to_u64>
    1f99: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    1f9d: eb 23                        	jmp	0x1fc2 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt+0x62>
    1f9f: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    1fa3: e8 a8 ed ff ff               	callq	0xd50 <<usize as core::fmt::num::DisplayInt>::to_u64>
    1fa8: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    1fac: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
    1fb0: 48 83 f7 ff                  	xorq	$-1, %rdi
    1fb4: be 01 00 00 00               	movl	$1, %esi
    1fb9: e8 b2 00 00 00               	callq	0x2070 <core::num::<impl u64>::wrapping_add>
    1fbe: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    1fc2: 48 8b 55 c8                  	movq	-56(%rbp), %rdx
    1fc6: 8a 45 df                     	movb	-33(%rbp), %al
    1fc9: 48 8b 7d e0                  	movq	-32(%rbp), %rdi
    1fcd: 0f b6 f0                     	movzbl	%al, %esi
    1fd0: 83 e6 01                     	andl	$1, %esi
    1fd3: e8 f8 f8 ff ff               	callq	0x18d0 <core::fmt::num::imp::fmt_u64>
    1fd8: 88 45 bf                     	movb	%al, -65(%rbp)
    1fdb: 8a 45 bf                     	movb	-65(%rbp), %al
    1fde: 24 01                        	andb	$1, %al
    1fe0: 0f b6 c0                     	movzbl	%al, %eax
    1fe3: 48 83 c4 50                  	addq	$80, %rsp
    1fe7: 5d                           	popq	%rbp
    1fe8: c3                           	retq
    1fe9: cc                           	int3
    1fea: cc                           	int3
    1feb: cc                           	int3
    1fec: cc                           	int3
    1fed: cc                           	int3
    1fee: cc                           	int3
    1fef: cc                           	int3

0000000000001ff0 <core::slice::<impl [T]>::len>:
    1ff0: 55                           	pushq	%rbp
    1ff1: 48 89 e5                     	movq	%rsp, %rbp
    1ff4: 48 83 ec 20                  	subq	$32, %rsp
    1ff8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    1ffc: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    2000: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    2004: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    2008: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    200c: 48 83 c4 20                  	addq	$32, %rsp
    2010: 5d                           	popq	%rbp
    2011: c3                           	retq
    2012: cc                           	int3
    2013: cc                           	int3
    2014: cc                           	int3
    2015: cc                           	int3
    2016: cc                           	int3
    2017: cc                           	int3
    2018: cc                           	int3
    2019: cc                           	int3
    201a: cc                           	int3
    201b: cc                           	int3
    201c: cc                           	int3
    201d: cc                           	int3
    201e: cc                           	int3
    201f: cc                           	int3

0000000000002020 <core::slice::<impl [T]>::as_mut_ptr>:
    2020: 55                           	pushq	%rbp
    2021: 48 89 e5                     	movq	%rsp, %rbp
    2024: 48 83 ec 10                  	subq	$16, %rsp
    2028: 48 89 f8                     	movq	%rdi, %rax
    202b: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    202f: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    2033: 48 83 c4 10                  	addq	$16, %rsp
    2037: 5d                           	popq	%rbp
    2038: c3                           	retq
    2039: cc                           	int3
    203a: cc                           	int3
    203b: cc                           	int3
    203c: cc                           	int3
    203d: cc                           	int3
    203e: cc                           	int3
    203f: cc                           	int3

0000000000002040 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt>:
    2040: 55                           	pushq	%rbp
    2041: 48 89 e5                     	movq	%rsp, %rbp
    2044: 48 83 ec 10                  	subq	$16, %rsp
    2048: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    204c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    2050: 48 8b 07                     	movq	(%rdi), %rax
    2053: 48 3b 06                     	cmpq	(%rsi), %rax
    2056: 0f 92 c0                     	setb	%al
    2059: 24 01                        	andb	$1, %al
    205b: 0f b6 c0                     	movzbl	%al, %eax
    205e: 48 83 c4 10                  	addq	$16, %rsp
    2062: 5d                           	popq	%rbp
    2063: c3                           	retq
    2064: cc                           	int3
    2065: cc                           	int3
    2066: cc                           	int3
    2067: cc                           	int3
    2068: cc                           	int3
    2069: cc                           	int3
    206a: cc                           	int3
    206b: cc                           	int3
    206c: cc                           	int3
    206d: cc                           	int3
    206e: cc                           	int3
    206f: cc                           	int3

0000000000002070 <core::num::<impl u64>::wrapping_add>:
    2070: 55                           	pushq	%rbp
    2071: 48 89 e5                     	movq	%rsp, %rbp
    2074: 48 83 ec 10                  	subq	$16, %rsp
    2078: 48 89 f8                     	movq	%rdi, %rax
    207b: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    207f: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    2083: 48 01 f0                     	addq	%rsi, %rax
    2086: 48 83 c4 10                  	addq	$16, %rsp
    208a: 5d                           	popq	%rbp
    208b: c3                           	retq
    208c: cc                           	int3
    208d: cc                           	int3
    208e: cc                           	int3
    208f: cc                           	int3

0000000000002090 <core::num::<impl usize>::unchecked_add>:
    2090: 55                           	pushq	%rbp
    2091: 48 89 e5                     	movq	%rsp, %rbp
    2094: 48 83 ec 20                  	subq	$32, %rsp
    2098: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    209c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    20a0: 48 01 f7                     	addq	%rsi, %rdi
    20a3: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    20a7: 48 8b 45 f8                  	movq	-8(%rbp), %rax
    20ab: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    20af: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    20b3: 48 83 c4 20                  	addq	$32, %rsp
    20b7: 5d                           	popq	%rbp
    20b8: c3                           	retq
    20b9: cc                           	int3
    20ba: cc                           	int3
    20bb: cc                           	int3
    20bc: cc                           	int3
    20bd: cc                           	int3
    20be: cc                           	int3
    20bf: cc                           	int3

00000000000020c0 <core::num::<impl usize>::checked_mul>:
    20c0: 55                           	pushq	%rbp
    20c1: 48 89 e5                     	movq	%rsp, %rbp
    20c4: 48 83 ec 50                  	subq	$80, %rsp
    20c8: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    20cc: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    20d0: e8 ab 00 00 00               	callq	0x2180 <core::num::<impl usize>::overflowing_mul>
    20d5: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    20d9: 88 55 cf                     	movb	%dl, -49(%rbp)
    20dc: 8a 45 cf                     	movb	-49(%rbp), %al
    20df: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
    20e3: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    20e7: 88 c1                        	movb	%al, %cl
    20e9: 80 e1 01                     	andb	$1, %cl
    20ec: 88 4d fe                     	movb	%cl, -2(%rbp)
    20ef: 24 01                        	andb	$1, %al
    20f1: 88 45 ff                     	movb	%al, -1(%rbp)
    20f4: 8a 45 ff                     	movb	-1(%rbp), %al
    20f7: 88 45 bf                     	movb	%al, -65(%rbp)
    20fa: 8a 45 bf                     	movb	-65(%rbp), %al
    20fd: a8 01                        	testb	$1, %al
    20ff: 75 02                        	jne	0x2103 <core::num::<impl usize>::checked_mul+0x43>
    2101: eb 0a                        	jmp	0x210d <core::num::<impl usize>::checked_mul+0x4d>
    2103: 48 c7 45 d0 00 00 00 00      	movq	$0, -48(%rbp)
    210b: eb 10                        	jmp	0x211d <core::num::<impl usize>::checked_mul+0x5d>
    210d: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    2111: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    2115: 48 c7 45 d0 01 00 00 00      	movq	$1, -48(%rbp)
    211d: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    2121: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
    2125: 48 83 c4 50                  	addq	$80, %rsp
    2129: 5d                           	popq	%rbp
    212a: c3                           	retq
    212b: cc                           	int3
    212c: cc                           	int3
    212d: cc                           	int3
    212e: cc                           	int3
    212f: cc                           	int3

0000000000002130 <core::num::<impl usize>::saturating_mul>:
    2130: 55                           	pushq	%rbp
    2131: 48 89 e5                     	movq	%rsp, %rbp
    2134: 48 83 ec 30                  	subq	$48, %rsp
    2138: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    213c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    2140: e8 7b ff ff ff               	callq	0x20c0 <core::num::<impl usize>::checked_mul>
    2145: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    2149: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    214d: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    2151: 48 85 c0                     	testq	%rax, %rax
    2154: 74 04                        	je	0x215a <core::num::<impl usize>::saturating_mul+0x2a>
    2156: eb 00                        	jmp	0x2158 <core::num::<impl usize>::saturating_mul+0x28>
    2158: eb 0c                        	jmp	0x2166 <core::num::<impl usize>::saturating_mul+0x36>
    215a: 48 c7 45 d0 ff ff ff ff      	movq	$-1, -48(%rbp)
    2162: eb 0e                        	jmp	0x2172 <core::num::<impl usize>::saturating_mul+0x42>
    2164: 0f 0b                        	ud2
    2166: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    216a: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    216e: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    2172: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    2176: 48 83 c4 30                  	addq	$48, %rsp
    217a: 5d                           	popq	%rbp
    217b: c3                           	retq
    217c: cc                           	int3
    217d: cc                           	int3
    217e: cc                           	int3
    217f: cc                           	int3

0000000000002180 <core::num::<impl usize>::overflowing_mul>:
    2180: 55                           	pushq	%rbp
    2181: 48 89 e5                     	movq	%rsp, %rbp
    2184: 48 83 ec 50                  	subq	$80, %rsp
    2188: 48 89 f8                     	movq	%rdi, %rax
    218b: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    218f: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
    2193: 48 f7 e6                     	mulq	%rsi
    2196: 48 89 c1                     	movq	%rax, %rcx
    2199: 0f 90 c0                     	seto	%al
    219c: 24 01                        	andb	$1, %al
    219e: 48 89 4d e0                  	movq	%rcx, -32(%rbp)
    21a2: 88 45 e8                     	movb	%al, -24(%rbp)
    21a5: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    21a9: 48 89 45 b0                  	movq	%rax, -80(%rbp)
    21ad: 8a 45 e8                     	movb	-24(%rbp), %al
    21b0: 88 45 bf                     	movb	%al, -65(%rbp)
    21b3: 48 8b 4d b0                  	movq	-80(%rbp), %rcx
    21b7: 8a 45 bf                     	movb	-65(%rbp), %al
    21ba: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    21be: 24 01                        	andb	$1, %al
    21c0: 88 45 ff                     	movb	%al, -1(%rbp)
    21c3: 48 89 4d c0                  	movq	%rcx, -64(%rbp)
    21c7: 88 45 c8                     	movb	%al, -56(%rbp)
    21ca: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    21ce: 8a 55 c8                     	movb	-56(%rbp), %dl
    21d1: 48 83 c4 50                  	addq	$80, %rsp
    21d5: 5d                           	popq	%rbp
    21d6: c3                           	retq
    21d7: cc                           	int3
    21d8: cc                           	int3
    21d9: cc                           	int3
    21da: cc                           	int3
    21db: cc                           	int3
    21dc: cc                           	int3
    21dd: cc                           	int3
    21de: cc                           	int3
    21df: cc                           	int3

00000000000021e0 <core::mem::swap>:
    21e0: 55                           	pushq	%rbp
    21e1: 48 89 e5                     	movq	%rsp, %rbp
    21e4: 48 83 ec 10                  	subq	$16, %rsp
    21e8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    21ec: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    21f0: e8 fb ef ff ff               	callq	0x11f0 <core::ptr::swap_nonoverlapping_one>
    21f5: 48 83 c4 10                  	addq	$16, %rsp
    21f9: 5d                           	popq	%rbp
    21fa: c3                           	retq
    21fb: cc                           	int3
    21fc: cc                           	int3
    21fd: cc                           	int3
    21fe: cc                           	int3
    21ff: cc                           	int3

0000000000002200 <core::mem::swap>:
    2200: 55                           	pushq	%rbp
    2201: 48 89 e5                     	movq	%rsp, %rbp
    2204: 48 83 ec 10                  	subq	$16, %rsp
    2208: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    220c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    2210: e8 fb ee ff ff               	callq	0x1110 <core::ptr::swap_nonoverlapping_one>
    2215: 48 83 c4 10                  	addq	$16, %rsp
    2219: 5d                           	popq	%rbp
    221a: c3                           	retq
    221b: cc                           	int3
    221c: cc                           	int3
    221d: cc                           	int3
    221e: cc                           	int3
    221f: cc                           	int3

0000000000002220 <core::mem::swap>:
    2220: 55                           	pushq	%rbp
    2221: 48 89 e5                     	movq	%rsp, %rbp
    2224: 48 83 ec 10                  	subq	$16, %rsp
    2228: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    222c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    2230: e8 4b ef ff ff               	callq	0x1180 <core::ptr::swap_nonoverlapping_one>
    2235: 48 83 c4 10                  	addq	$16, %rsp
    2239: 5d                           	popq	%rbp
    223a: c3                           	retq
    223b: cc                           	int3
    223c: cc                           	int3
    223d: cc                           	int3
    223e: cc                           	int3
    223f: cc                           	int3

0000000000002240 <core::mem::replace>:
    2240: 55                           	pushq	%rbp
    2241: 48 89 e5                     	movq	%rsp, %rbp
    2244: 48 83 ec 10                  	subq	$16, %rsp
    2248: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    224c: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    2250: 48 8d 75 f0                  	leaq	-16(%rbp), %rsi
    2254: e8 c7 ff ff ff               	callq	0x2220 <core::mem::swap>
    2259: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    225d: 48 83 c4 10                  	addq	$16, %rsp
    2261: 5d                           	popq	%rbp
    2262: c3                           	retq
    2263: cc                           	int3
    2264: cc                           	int3
    2265: cc                           	int3
    2266: cc                           	int3
    2267: cc                           	int3
    2268: cc                           	int3
    2269: cc                           	int3
    226a: cc                           	int3
    226b: cc                           	int3
    226c: cc                           	int3
    226d: cc                           	int3
    226e: cc                           	int3
    226f: cc                           	int3

0000000000002270 <core::mem::replace>:
    2270: 55                           	pushq	%rbp
    2271: 48 89 e5                     	movq	%rsp, %rbp
    2274: 48 83 ec 10                  	subq	$16, %rsp
    2278: 89 75 f4                     	movl	%esi, -12(%rbp)
    227b: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    227f: 48 8d 75 f4                  	leaq	-12(%rbp), %rsi
    2283: e8 78 ff ff ff               	callq	0x2200 <core::mem::swap>
    2288: 8b 45 f4                     	movl	-12(%rbp), %eax
    228b: 48 83 c4 10                  	addq	$16, %rsp
    228f: 5d                           	popq	%rbp
    2290: c3                           	retq
    2291: cc                           	int3
    2292: cc                           	int3
    2293: cc                           	int3
    2294: cc                           	int3
    2295: cc                           	int3
    2296: cc                           	int3
    2297: cc                           	int3
    2298: cc                           	int3
    2299: cc                           	int3
    229a: cc                           	int3
    229b: cc                           	int3
    229c: cc                           	int3
    229d: cc                           	int3
    229e: cc                           	int3
    229f: cc                           	int3

00000000000022a0 <core::mem::replace>:
    22a0: 55                           	pushq	%rbp
    22a1: 48 89 e5                     	movq	%rsp, %rbp
    22a4: 48 83 ec 10                  	subq	$16, %rsp
    22a8: 40 88 f0                     	movb	%sil, %al
    22ab: 88 45 f7                     	movb	%al, -9(%rbp)
    22ae: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    22b2: 48 8d 75 f7                  	leaq	-9(%rbp), %rsi
    22b6: e8 25 ff ff ff               	callq	0x21e0 <core::mem::swap>
    22bb: 8a 45 f7                     	movb	-9(%rbp), %al
    22be: 48 83 c4 10                  	addq	$16, %rsp
    22c2: 5d                           	popq	%rbp
    22c3: c3                           	retq
    22c4: cc                           	int3
    22c5: cc                           	int3
    22c6: cc                           	int3
    22c7: cc                           	int3
    22c8: cc                           	int3
    22c9: cc                           	int3
    22ca: cc                           	int3
    22cb: cc                           	int3
    22cc: cc                           	int3
    22cd: cc                           	int3
    22ce: cc                           	int3
    22cf: cc                           	int3

00000000000022d0 <core::ptr::metadata::from_raw_parts>:
    22d0: 55                           	pushq	%rbp
    22d1: 48 89 e5                     	movq	%rsp, %rbp
    22d4: 48 83 ec 30                  	subq	$48, %rsp
    22d8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    22dc: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    22e0: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    22e4: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    22e8: 48 8b 4d e0                  	movq	-32(%rbp), %rcx
    22ec: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    22f0: 48 89 4d d0                  	movq	%rcx, -48(%rbp)
    22f4: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    22f8: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    22fc: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
    2300: 48 83 c4 30                  	addq	$48, %rsp
    2304: 5d                           	popq	%rbp
    2305: c3                           	retq
    2306: cc                           	int3
    2307: cc                           	int3
    2308: cc                           	int3
    2309: cc                           	int3
    230a: cc                           	int3
    230b: cc                           	int3
    230c: cc                           	int3
    230d: cc                           	int3
    230e: cc                           	int3
    230f: cc                           	int3

0000000000002310 <core::ptr::non_null::NonNull<T>::new_unchecked>:
    2310: 55                           	pushq	%rbp
    2311: 48 89 e5                     	movq	%rsp, %rbp
    2314: 48 83 ec 10                  	subq	$16, %rsp
    2318: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    231c: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    2320: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    2324: 48 83 c4 10                  	addq	$16, %rsp
    2328: 5d                           	popq	%rbp
    2329: c3                           	retq
    232a: cc                           	int3
    232b: cc                           	int3
    232c: cc                           	int3
    232d: cc                           	int3
    232e: cc                           	int3
    232f: cc                           	int3

0000000000002330 <core::ptr::non_null::NonNull<T>::as_ptr>:
    2330: 55                           	pushq	%rbp
    2331: 48 89 e5                     	movq	%rsp, %rbp
    2334: 50                           	pushq	%rax
    2335: 48 89 f8                     	movq	%rdi, %rax
    2338: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    233c: 48 83 c4 08                  	addq	$8, %rsp
    2340: 5d                           	popq	%rbp
    2341: c3                           	retq
    2342: cc                           	int3
    2343: cc                           	int3
    2344: cc                           	int3
    2345: cc                           	int3
    2346: cc                           	int3
    2347: cc                           	int3
    2348: cc                           	int3
    2349: cc                           	int3
    234a: cc                           	int3
    234b: cc                           	int3
    234c: cc                           	int3
    234d: cc                           	int3
    234e: cc                           	int3
    234f: cc                           	int3

0000000000002350 <core::ptr::mut_ptr::<impl *mut T>::is_null>:
    2350: 55                           	pushq	%rbp
    2351: 48 89 e5                     	movq	%rsp, %rbp
    2354: 48 83 ec 20                  	subq	$32, %rsp
    2358: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    235c: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    2360: 48 8b 7d f0                  	movq	-16(%rbp), %rdi
    2364: 31 c0                        	xorl	%eax, %eax
    2366: 89 c6                        	movl	%eax, %esi
    2368: e8 43 00 00 00               	callq	0x23b0 <core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq>
    236d: 88 45 ef                     	movb	%al, -17(%rbp)
    2370: 8a 45 ef                     	movb	-17(%rbp), %al
    2373: 24 01                        	andb	$1, %al
    2375: 0f b6 c0                     	movzbl	%al, %eax
    2378: 48 83 c4 20                  	addq	$32, %rsp
    237c: 5d                           	popq	%rbp
    237d: c3                           	retq
    237e: cc                           	int3
    237f: cc                           	int3

0000000000002380 <core::ptr::mut_ptr::<impl *mut T>::offset>:
    2380: 55                           	pushq	%rbp
    2381: 48 89 e5                     	movq	%rsp, %rbp
    2384: 48 83 ec 20                  	subq	$32, %rsp
    2388: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    238c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    2390: 48 01 f7                     	addq	%rsi, %rdi
    2393: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    2397: 48 8b 45 f8                  	movq	-8(%rbp), %rax
    239b: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    239f: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    23a3: 48 83 c4 20                  	addq	$32, %rsp
    23a7: 5d                           	popq	%rbp
    23a8: c3                           	retq
    23a9: cc                           	int3
    23aa: cc                           	int3
    23ab: cc                           	int3
    23ac: cc                           	int3
    23ad: cc                           	int3
    23ae: cc                           	int3
    23af: cc                           	int3

00000000000023b0 <core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq>:
    23b0: 55                           	pushq	%rbp
    23b1: 48 89 e5                     	movq	%rsp, %rbp
    23b4: 48 83 ec 20                  	subq	$32, %rsp
    23b8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    23bc: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    23c0: 48 39 f7                     	cmpq	%rsi, %rdi
    23c3: 0f 94 c0                     	sete	%al
    23c6: 24 01                        	andb	$1, %al
    23c8: 88 45 ff                     	movb	%al, -1(%rbp)
    23cb: 8a 45 ff                     	movb	-1(%rbp), %al
    23ce: 88 45 e7                     	movb	%al, -25(%rbp)
    23d1: 8a 45 e7                     	movb	-25(%rbp), %al
    23d4: 24 01                        	andb	$1, %al
    23d6: 0f b6 c0                     	movzbl	%al, %eax
    23d9: 48 83 c4 20                  	addq	$32, %rsp
    23dd: 5d                           	popq	%rbp
    23de: c3                           	retq
    23df: cc                           	int3

00000000000023e0 <core::ptr::mut_ptr::<impl *mut T>::add>:
    23e0: 55                           	pushq	%rbp
    23e1: 48 89 e5                     	movq	%rsp, %rbp
    23e4: 48 83 ec 20                  	subq	$32, %rsp
    23e8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    23ec: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    23f0: e8 8b ff ff ff               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    23f5: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    23f9: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    23fd: 48 83 c4 20                  	addq	$32, %rsp
    2401: 5d                           	popq	%rbp
    2402: c3                           	retq
    2403: cc                           	int3
    2404: cc                           	int3
    2405: cc                           	int3
    2406: cc                           	int3
    2407: cc                           	int3
    2408: cc                           	int3
    2409: cc                           	int3
    240a: cc                           	int3
    240b: cc                           	int3
    240c: cc                           	int3
    240d: cc                           	int3
    240e: cc                           	int3
    240f: cc                           	int3

0000000000002410 <<T as core::convert::From<T>>::from>:
    2410: 55                           	pushq	%rbp
    2411: 48 89 e5                     	movq	%rsp, %rbp
    2414: 50                           	pushq	%rax
    2415: 48 83 c4 08                  	addq	$8, %rsp
    2419: 5d                           	popq	%rbp
    241a: c3                           	retq
    241b: cc                           	int3
    241c: cc                           	int3
    241d: cc                           	int3
    241e: cc                           	int3
    241f: cc                           	int3

0000000000002420 <core::fmt::Arguments::new_v1>:
    2420: 55                           	pushq	%rbp
    2421: 48 89 e5                     	movq	%rsp, %rbp
    2424: 48 83 ec 30                  	subq	$48, %rsp
    2428: 48 89 f8                     	movq	%rdi, %rax
    242b: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
    242f: 48 89 55 e8                  	movq	%rdx, -24(%rbp)
    2433: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    2437: 4c 89 45 f8                  	movq	%r8, -8(%rbp)
    243b: 48 c7 45 d0 00 00 00 00      	movq	$0, -48(%rbp)
    2443: 48 89 37                     	movq	%rsi, (%rdi)
    2446: 48 89 57 08                  	movq	%rdx, 8(%rdi)
    244a: 48 8b 75 d0                  	movq	-48(%rbp), %rsi
    244e: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
    2452: 48 89 77 10                  	movq	%rsi, 16(%rdi)
    2456: 48 89 57 18                  	movq	%rdx, 24(%rdi)
    245a: 48 89 4f 20                  	movq	%rcx, 32(%rdi)
    245e: 4c 89 47 28                  	movq	%r8, 40(%rdi)
    2462: 48 83 c4 30                  	addq	$48, %rsp
    2466: 5d                           	popq	%rbp
    2467: c3                           	retq
    2468: cc                           	int3
    2469: cc                           	int3
    246a: cc                           	int3
    246b: cc                           	int3
    246c: cc                           	int3
    246d: cc                           	int3
    246e: cc                           	int3
    246f: cc                           	int3

0000000000002470 <core::fmt::PostPadding::new>:
    2470: 55                           	pushq	%rbp
    2471: 48 89 e5                     	movq	%rsp, %rbp
    2474: 48 83 ec 20                  	subq	$32, %rsp
    2478: 89 7d f4                     	movl	%edi, -12(%rbp)
    247b: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    247f: 89 7d e8                     	movl	%edi, -24(%rbp)
    2482: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
    2486: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    248a: 8b 55 e8                     	movl	-24(%rbp), %edx
    248d: 48 83 c4 20                  	addq	$32, %rsp
    2491: 5d                           	popq	%rbp
    2492: c3                           	retq
    2493: cc                           	int3
    2494: cc                           	int3
    2495: cc                           	int3
    2496: cc                           	int3
    2497: cc                           	int3
    2498: cc                           	int3
    2499: cc                           	int3
    249a: cc                           	int3
    249b: cc                           	int3
    249c: cc                           	int3
    249d: cc                           	int3
    249e: cc                           	int3
    249f: cc                           	int3

00000000000024a0 <core::fmt::PostPadding::write>:
    24a0: 55                           	pushq	%rbp
    24a1: 48 89 e5                     	movq	%rsp, %rbp
    24a4: 48 81 ec b0 00 00 00         	subq	$176, %rsp
    24ab: 48 89 8d 58 ff ff ff         	movq	%rcx, -168(%rbp)
    24b2: 48 89 95 60 ff ff ff         	movq	%rdx, -160(%rbp)
    24b9: 89 b5 6c ff ff ff            	movl	%esi, -148(%rbp)
    24bf: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
    24c3: 89 75 c8                     	movl	%esi, -56(%rbp)
    24c6: 48 89 55 d0                  	movq	%rdx, -48(%rbp)
    24ca: 48 89 4d d8                  	movq	%rcx, -40(%rbp)
    24ce: 48 c7 45 88 00 00 00 00      	movq	$0, -120(%rbp)
    24d6: 48 89 7d 90                  	movq	%rdi, -112(%rbp)
    24da: 48 8b 7d 88                  	movq	-120(%rbp), %rdi
    24de: 48 8b 75 90                  	movq	-112(%rbp), %rsi
    24e2: e8 19 10 00 00               	callq	0x3500 <<I as core::iter::traits::collect::IntoIterator>::into_iter>
    24e7: 48 89 85 70 ff ff ff         	movq	%rax, -144(%rbp)
    24ee: 48 89 95 78 ff ff ff         	movq	%rdx, -136(%rbp)
    24f5: 48 8b 85 78 ff ff ff         	movq	-136(%rbp), %rax
    24fc: 48 8b 8d 70 ff ff ff         	movq	-144(%rbp), %rcx
    2503: 48 89 4d 98                  	movq	%rcx, -104(%rbp)
    2507: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    250b: 48 8d 7d 98                  	leaq	-104(%rbp), %rdi
    250f: e8 5c 0f 00 00               	callq	0x3470 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next>
    2514: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
    2518: 48 89 45 a8                  	movq	%rax, -88(%rbp)
    251c: 48 8b 45 a8                  	movq	-88(%rbp), %rax
    2520: 48 85 c0                     	testq	%rax, %rax
    2523: 74 04                        	je	0x2529 <core::fmt::PostPadding::write+0x89>
    2525: eb 00                        	jmp	0x2527 <core::fmt::PostPadding::write+0x87>
    2527: eb 08                        	jmp	0x2531 <core::fmt::PostPadding::write+0x91>
    2529: c6 45 87 00                  	movb	$0, -121(%rbp)
    252d: eb 60                        	jmp	0x258f <core::fmt::PostPadding::write+0xef>
    252f: 0f 0b                        	ud2
    2531: 48 8b 85 58 ff ff ff         	movq	-168(%rbp), %rax
    2538: 8b b5 6c ff ff ff            	movl	-148(%rbp), %esi
    253e: 48 8b bd 60 ff ff ff         	movq	-160(%rbp), %rdi
    2545: 48 8b 4d b0                  	movq	-80(%rbp), %rcx
    2549: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    254d: 48 89 4d f8                  	movq	%rcx, -8(%rbp)
    2551: ff 50 20                     	callq	*32(%rax)
    2554: 88 85 57 ff ff ff            	movb	%al, -169(%rbp)
    255a: 8a 85 57 ff ff ff            	movb	-169(%rbp), %al
    2560: 0f b6 f8                     	movzbl	%al, %edi
    2563: 83 e7 01                     	andl	$1, %edi
    2566: e8 85 f1 ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    256b: 24 01                        	andb	$1, %al
    256d: 88 45 bf                     	movb	%al, -65(%rbp)
    2570: 0f b6 45 bf                  	movzbl	-65(%rbp), %eax
    2574: a8 01                        	testb	$1, %al
    2576: 74 04                        	je	0x257c <core::fmt::PostPadding::write+0xdc>
    2578: eb 00                        	jmp	0x257a <core::fmt::PostPadding::write+0xda>
    257a: eb 04                        	jmp	0x2580 <core::fmt::PostPadding::write+0xe0>
    257c: eb 8d                        	jmp	0x250b <core::fmt::PostPadding::write+0x6b>
    257e: 0f 0b                        	ud2
    2580: e8 8b fe ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2585: e8 c6 f1 ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    258a: 24 01                        	andb	$1, %al
    258c: 88 45 87                     	movb	%al, -121(%rbp)
    258f: 8a 45 87                     	movb	-121(%rbp), %al
    2592: 24 01                        	andb	$1, %al
    2594: 0f b6 c0                     	movzbl	%al, %eax
    2597: 48 81 c4 b0 00 00 00         	addq	$176, %rsp
    259e: 5d                           	popq	%rbp
    259f: c3                           	retq

00000000000025a0 <core::fmt::Formatter::pad_integral>:
    25a0: 55                           	pushq	%rbp
    25a1: 48 89 e5                     	movq	%rsp, %rbp
    25a4: 48 81 ec 60 02 00 00         	subq	$608, %rsp
    25ab: 4c 89 8d 68 fe ff ff         	movq	%r9, -408(%rbp)
    25b2: 4c 89 85 70 fe ff ff         	movq	%r8, -400(%rbp)
    25b9: 48 89 8d 58 fe ff ff         	movq	%rcx, -424(%rbp)
    25c0: 48 89 95 60 fe ff ff         	movq	%rdx, -416(%rbp)
    25c7: 89 f0                        	movl	%esi, %eax
    25c9: 48 8b b5 68 fe ff ff         	movq	-408(%rbp), %rsi
    25d0: 49 89 f8                     	movq	%rdi, %r8
    25d3: 48 8b bd 70 fe ff ff         	movq	-400(%rbp), %rdi
    25da: 4c 89 85 78 fe ff ff         	movq	%r8, -392(%rbp)
    25e1: 88 85 86 fe ff ff            	movb	%al, -378(%rbp)
    25e7: 4c 89 85 e0 fe ff ff         	movq	%r8, -288(%rbp)
    25ee: 24 01                        	andb	$1, %al
    25f0: 88 85 ef fe ff ff            	movb	%al, -273(%rbp)
    25f6: 48 89 95 f0 fe ff ff         	movq	%rdx, -272(%rbp)
    25fd: 48 89 8d f8 fe ff ff         	movq	%rcx, -264(%rbp)
    2604: 48 89 bd 00 ff ff ff         	movq	%rdi, -256(%rbp)
    260b: 48 89 b5 08 ff ff ff         	movq	%rsi, -248(%rbp)
    2612: e8 29 10 00 00               	callq	0x3640 <core::str::<impl str>::len>
    2617: 48 89 85 88 fe ff ff         	movq	%rax, -376(%rbp)
    261e: 8a 85 86 fe ff ff            	movb	-378(%rbp), %al
    2624: c7 85 94 fe ff ff 00 00 11 00	movl	$1114112, -364(%rbp)
    262e: 34 ff                        	xorb	$-1, %al
    2630: a8 01                        	testb	$1, %al
    2632: 75 02                        	jne	0x2636 <core::fmt::Formatter::pad_integral+0x96>
    2634: eb 29                        	jmp	0x265f <core::fmt::Formatter::pad_integral+0xbf>
    2636: c7 85 94 fe ff ff 2d 00 00 00	movl	$45, -364(%rbp)
    2640: 48 8b 85 88 fe ff ff         	movq	-376(%rbp), %rax
    2647: 48 83 c0 01                  	addq	$1, %rax
    264b: 48 89 85 50 fe ff ff         	movq	%rax, -432(%rbp)
    2652: 0f 92 c0                     	setb	%al
    2655: a8 01                        	testb	$1, %al
    2657: 0f 85 08 07 00 00            	jne	0x2d65 <core::fmt::Formatter::pad_integral+0x7c5>
    265d: eb 14                        	jmp	0x2673 <core::fmt::Formatter::pad_integral+0xd3>
    265f: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2666: e8 b5 0a 00 00               	callq	0x3120 <core::fmt::Formatter::sign_plus>
    266b: 88 85 4f fe ff ff            	movb	%al, -433(%rbp)
    2671: eb 10                        	jmp	0x2683 <core::fmt::Formatter::pad_integral+0xe3>
    2673: 48 8b 85 50 fe ff ff         	movq	-432(%rbp), %rax
    267a: 48 89 85 88 fe ff ff         	movq	%rax, -376(%rbp)
    2681: eb 45                        	jmp	0x26c8 <core::fmt::Formatter::pad_integral+0x128>
    2683: 8a 85 4f fe ff ff            	movb	-433(%rbp), %al
    2689: a8 01                        	testb	$1, %al
    268b: 75 02                        	jne	0x268f <core::fmt::Formatter::pad_integral+0xef>
    268d: eb 29                        	jmp	0x26b8 <core::fmt::Formatter::pad_integral+0x118>
    268f: c7 85 94 fe ff ff 2b 00 00 00	movl	$43, -364(%rbp)
    2699: 48 8b 85 88 fe ff ff         	movq	-376(%rbp), %rax
    26a0: 48 83 c0 01                  	addq	$1, %rax
    26a4: 48 89 85 40 fe ff ff         	movq	%rax, -448(%rbp)
    26ab: 0f 92 c0                     	setb	%al
    26ae: a8 01                        	testb	$1, %al
    26b0: 0f 85 c9 06 00 00            	jne	0x2d7f <core::fmt::Formatter::pad_integral+0x7df>
    26b6: eb 02                        	jmp	0x26ba <core::fmt::Formatter::pad_integral+0x11a>
    26b8: eb 0e                        	jmp	0x26c8 <core::fmt::Formatter::pad_integral+0x128>
    26ba: 48 8b 85 40 fe ff ff         	movq	-448(%rbp), %rax
    26c1: 48 89 85 88 fe ff ff         	movq	%rax, -376(%rbp)
    26c8: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    26cf: e8 6c 0a 00 00               	callq	0x3140 <core::fmt::Formatter::alternate>
    26d4: 88 85 3f fe ff ff            	movb	%al, -449(%rbp)
    26da: 8a 85 3f fe ff ff            	movb	-449(%rbp), %al
    26e0: a8 01                        	testb	$1, %al
    26e2: 75 02                        	jne	0x26e6 <core::fmt::Formatter::pad_integral+0x146>
    26e4: eb 23                        	jmp	0x2709 <core::fmt::Formatter::pad_integral+0x169>
    26e6: 48 8b b5 58 fe ff ff         	movq	-424(%rbp), %rsi
    26ed: 48 8b bd 60 fe ff ff         	movq	-416(%rbp), %rdi
    26f4: e8 97 0f 00 00               	callq	0x3690 <core::str::<impl str>::chars>
    26f9: 48 89 85 28 fe ff ff         	movq	%rax, -472(%rbp)
    2700: 48 89 95 30 fe ff ff         	movq	%rdx, -464(%rbp)
    2707: eb 0d                        	jmp	0x2716 <core::fmt::Formatter::pad_integral+0x176>
    2709: 48 c7 85 98 fe ff ff 00 00 00 00     	movq	$0, -360(%rbp)
    2714: eb 64                        	jmp	0x277a <core::fmt::Formatter::pad_integral+0x1da>
    2716: 48 8b b5 30 fe ff ff         	movq	-464(%rbp), %rsi
    271d: 48 8b bd 28 fe ff ff         	movq	-472(%rbp), %rdi
    2724: e8 37 0e 00 00               	callq	0x3560 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count>
    2729: 48 89 85 20 fe ff ff         	movq	%rax, -480(%rbp)
    2730: 48 8b 85 20 fe ff ff         	movq	-480(%rbp), %rax
    2737: 48 03 85 88 fe ff ff         	addq	-376(%rbp), %rax
    273e: 48 89 85 18 fe ff ff         	movq	%rax, -488(%rbp)
    2745: 0f 92 c0                     	setb	%al
    2748: a8 01                        	testb	$1, %al
    274a: 0f 85 49 06 00 00            	jne	0x2d99 <core::fmt::Formatter::pad_integral+0x7f9>
    2750: 48 8b 85 58 fe ff ff         	movq	-424(%rbp), %rax
    2757: 48 8b 8d 60 fe ff ff         	movq	-416(%rbp), %rcx
    275e: 48 8b 95 18 fe ff ff         	movq	-488(%rbp), %rdx
    2765: 48 89 95 88 fe ff ff         	movq	%rdx, -376(%rbp)
    276c: 48 89 8d 98 fe ff ff         	movq	%rcx, -360(%rbp)
    2773: 48 89 85 a0 fe ff ff         	movq	%rax, -352(%rbp)
    277a: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2781: 48 8b 00                     	movq	(%rax), %rax
    2784: 48 85 c0                     	testq	%rax, %rax
    2787: 74 09                        	je	0x2792 <core::fmt::Formatter::pad_integral+0x1f2>
    2789: eb 00                        	jmp	0x278b <core::fmt::Formatter::pad_integral+0x1eb>
    278b: e9 96 00 00 00               	jmp	0x2826 <core::fmt::Formatter::pad_integral+0x286>
    2790: 0f 0b                        	ud2
    2792: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2799: 8b b5 94 fe ff ff            	movl	-364(%rbp), %esi
    279f: 48 8b 95 98 fe ff ff         	movq	-360(%rbp), %rdx
    27a6: 48 8b 8d a0 fe ff ff         	movq	-352(%rbp), %rcx
    27ad: e8 3e 06 00 00               	callq	0x2df0 <core::fmt::Formatter::pad_integral::write_prefix>
    27b2: 88 85 17 fe ff ff            	movb	%al, -489(%rbp)
    27b8: 8a 85 17 fe ff ff            	movb	-489(%rbp), %al
    27be: 0f b6 f8                     	movzbl	%al, %edi
    27c1: 83 e7 01                     	andl	$1, %edi
    27c4: e8 27 ef ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    27c9: 24 01                        	andb	$1, %al
    27cb: 88 85 ac fe ff ff            	movb	%al, -340(%rbp)
    27d1: 0f b6 85 ac fe ff ff         	movzbl	-340(%rbp), %eax
    27d8: a8 01                        	testb	$1, %al
    27da: 74 04                        	je	0x27e0 <core::fmt::Formatter::pad_integral+0x240>
    27dc: eb 00                        	jmp	0x27de <core::fmt::Formatter::pad_integral+0x23e>
    27de: eb 2f                        	jmp	0x280f <core::fmt::Formatter::pad_integral+0x26f>
    27e0: 48 8b 95 68 fe ff ff         	movq	-408(%rbp), %rdx
    27e7: 48 8b b5 70 fe ff ff         	movq	-400(%rbp), %rsi
    27ee: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    27f5: 48 8b 78 20                  	movq	32(%rax), %rdi
    27f9: 48 8b 40 28                  	movq	40(%rax), %rax
    27fd: ff 50 18                     	callq	*24(%rax)
    2800: 24 01                        	andb	$1, %al
    2802: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2808: e9 44 05 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    280d: 0f 0b                        	ud2
    280f: e8 fc fb ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2814: e8 37 ef ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2819: 24 01                        	andb	$1, %al
    281b: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2821: e9 2b 05 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2826: 48 8b 8d 78 fe ff ff         	movq	-392(%rbp), %rcx
    282d: 48 89 c8                     	movq	%rcx, %rax
    2830: 48 83 c0 08                  	addq	$8, %rax
    2834: 48 89 45 90                  	movq	%rax, -112(%rbp)
    2838: 48 8b 85 88 fe ff ff         	movq	-376(%rbp), %rax
    283f: 48 3b 41 08                  	cmpq	8(%rcx), %rax
    2843: 72 30                        	jb	0x2875 <core::fmt::Formatter::pad_integral+0x2d5>
    2845: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    284c: 48 8b 47 08                  	movq	8(%rdi), %rax
    2850: 48 89 45 98                  	movq	%rax, -104(%rbp)
    2854: 8b b5 94 fe ff ff            	movl	-364(%rbp), %esi
    285a: 48 8b 95 98 fe ff ff         	movq	-360(%rbp), %rdx
    2861: 48 8b 8d a0 fe ff ff         	movq	-352(%rbp), %rcx
    2868: e8 83 05 00 00               	callq	0x2df0 <core::fmt::Formatter::pad_integral::write_prefix>
    286d: 88 85 16 fe ff ff            	movb	%al, -490(%rbp)
    2873: eb 1f                        	jmp	0x2894 <core::fmt::Formatter::pad_integral+0x2f4>
    2875: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    287c: 48 89 f8                     	movq	%rdi, %rax
    287f: 48 83 c0 08                  	addq	$8, %rax
    2883: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    2887: e8 d4 08 00 00               	callq	0x3160 <core::fmt::Formatter::sign_aware_zero_pad>
    288c: 88 85 15 fe ff ff            	movb	%al, -491(%rbp)
    2892: eb 6e                        	jmp	0x2902 <core::fmt::Formatter::pad_integral+0x362>
    2894: 8a 85 16 fe ff ff            	movb	-490(%rbp), %al
    289a: 0f b6 f8                     	movzbl	%al, %edi
    289d: 83 e7 01                     	andl	$1, %edi
    28a0: e8 4b ee ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    28a5: 24 01                        	andb	$1, %al
    28a7: 88 85 ad fe ff ff            	movb	%al, -339(%rbp)
    28ad: 0f b6 85 ad fe ff ff         	movzbl	-339(%rbp), %eax
    28b4: a8 01                        	testb	$1, %al
    28b6: 74 04                        	je	0x28bc <core::fmt::Formatter::pad_integral+0x31c>
    28b8: eb 00                        	jmp	0x28ba <core::fmt::Formatter::pad_integral+0x31a>
    28ba: eb 2f                        	jmp	0x28eb <core::fmt::Formatter::pad_integral+0x34b>
    28bc: 48 8b 95 68 fe ff ff         	movq	-408(%rbp), %rdx
    28c3: 48 8b b5 70 fe ff ff         	movq	-400(%rbp), %rsi
    28ca: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    28d1: 48 8b 78 20                  	movq	32(%rax), %rdi
    28d5: 48 8b 40 28                  	movq	40(%rax), %rax
    28d9: ff 50 18                     	callq	*24(%rax)
    28dc: 24 01                        	andb	$1, %al
    28de: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    28e4: e9 68 04 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    28e9: 0f 0b                        	ud2
    28eb: e8 20 fb ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    28f0: e8 5b ee ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    28f5: 24 01                        	andb	$1, %al
    28f7: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    28fd: e9 4f 04 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2902: 8a 85 15 fe ff ff            	movb	-491(%rbp), %al
    2908: a8 01                        	testb	$1, %al
    290a: 75 02                        	jne	0x290e <core::fmt::Formatter::pad_integral+0x36e>
    290c: eb 2f                        	jmp	0x293d <core::fmt::Formatter::pad_integral+0x39d>
    290e: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2915: 48 8b 47 08                  	movq	8(%rdi), %rax
    2919: 48 89 85 08 fe ff ff         	movq	%rax, -504(%rbp)
    2920: 48 89 45 a8                  	movq	%rax, -88(%rbp)
    2924: 48 83 c7 34                  	addq	$52, %rdi
    2928: be 30 00 00 00               	movl	$48, %esi
    292d: e8 3e f9 ff ff               	callq	0x2270 <core::mem::replace>
    2932: 89 85 10 fe ff ff            	movl	%eax, -496(%rbp)
    2938: 89 45 b0                     	movl	%eax, -80(%rbp)
    293b: eb 2d                        	jmp	0x296a <core::fmt::Formatter::pad_integral+0x3ca>
    293d: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2944: 48 8b 40 08                  	movq	8(%rax), %rax
    2948: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    294c: 48 2b 85 88 fe ff ff         	subq	-376(%rbp), %rax
    2953: 48 89 85 00 fe ff ff         	movq	%rax, -512(%rbp)
    295a: 0f 92 c0                     	setb	%al
    295d: a8 01                        	testb	$1, %al
    295f: 0f 85 68 04 00 00            	jne	0x2dcd <core::fmt::Formatter::pad_integral+0x82d>
    2965: e9 4d 02 00 00               	jmp	0x2bb7 <core::fmt::Formatter::pad_integral+0x617>
    296a: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2971: 48 83 c7 38                  	addq	$56, %rdi
    2975: c6 85 ae fe ff ff 01         	movb	$1, -338(%rbp)
    297c: 0f b6 b5 ae fe ff ff         	movzbl	-338(%rbp), %esi
    2983: e8 18 f9 ff ff               	callq	0x22a0 <core::mem::replace>
    2988: 88 85 ff fd ff ff            	movb	%al, -513(%rbp)
    298e: 88 45 b7                     	movb	%al, -73(%rbp)
    2991: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2998: 8b b5 94 fe ff ff            	movl	-364(%rbp), %esi
    299e: 48 8b 95 98 fe ff ff         	movq	-360(%rbp), %rdx
    29a5: 48 8b 8d a0 fe ff ff         	movq	-352(%rbp), %rcx
    29ac: e8 3f 04 00 00               	callq	0x2df0 <core::fmt::Formatter::pad_integral::write_prefix>
    29b1: 88 85 fe fd ff ff            	movb	%al, -514(%rbp)
    29b7: 8a 85 fe fd ff ff            	movb	-514(%rbp), %al
    29bd: 0f b6 f8                     	movzbl	%al, %edi
    29c0: 83 e7 01                     	andl	$1, %edi
    29c3: e8 28 ed ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    29c8: 24 01                        	andb	$1, %al
    29ca: 88 85 af fe ff ff            	movb	%al, -337(%rbp)
    29d0: 0f b6 85 af fe ff ff         	movzbl	-337(%rbp), %eax
    29d7: a8 01                        	testb	$1, %al
    29d9: 74 04                        	je	0x29df <core::fmt::Formatter::pad_integral+0x43f>
    29db: eb 00                        	jmp	0x29dd <core::fmt::Formatter::pad_integral+0x43d>
    29dd: eb 24                        	jmp	0x2a03 <core::fmt::Formatter::pad_integral+0x463>
    29df: 48 8b 85 08 fe ff ff         	movq	-504(%rbp), %rax
    29e6: 48 2b 85 88 fe ff ff         	subq	-376(%rbp), %rax
    29ed: 48 89 85 f0 fd ff ff         	movq	%rax, -528(%rbp)
    29f4: 0f 92 c0                     	setb	%al
    29f7: a8 01                        	testb	$1, %al
    29f9: 0f 85 b4 03 00 00            	jne	0x2db3 <core::fmt::Formatter::pad_integral+0x813>
    29ff: eb 19                        	jmp	0x2a1a <core::fmt::Formatter::pad_integral+0x47a>
    2a01: 0f 0b                        	ud2
    2a03: e8 08 fa ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2a08: e8 43 ed ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2a0d: 24 01                        	andb	$1, %al
    2a0f: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2a15: e9 37 03 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2a1a: 48 8b b5 f0 fd ff ff         	movq	-528(%rbp), %rsi
    2a21: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2a28: c6 85 c5 fe ff ff 01         	movb	$1, -315(%rbp)
    2a2f: 0f b6 95 c5 fe ff ff         	movzbl	-315(%rbp), %edx
    2a36: e8 95 04 00 00               	callq	0x2ed0 <core::fmt::Formatter::padding>
    2a3b: 48 89 85 e0 fd ff ff         	movq	%rax, -544(%rbp)
    2a42: 89 95 ec fd ff ff            	movl	%edx, -532(%rbp)
    2a48: 8b b5 ec fd ff ff            	movl	-532(%rbp), %esi
    2a4e: 48 8b bd e0 fd ff ff         	movq	-544(%rbp), %rdi
    2a55: e8 b6 ec ff ff               	callq	0x1710 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2a5a: 89 95 b8 fe ff ff            	movl	%edx, -328(%rbp)
    2a60: 48 89 85 b0 fe ff ff         	movq	%rax, -336(%rbp)
    2a67: 8b 85 b8 fe ff ff            	movl	-328(%rbp), %eax
    2a6d: 05 00 00 ef ff               	addl	$4293853184, %eax
    2a72: 0f 94 c0                     	sete	%al
    2a75: 0f b6 c0                     	movzbl	%al, %eax
    2a78: 75 04                        	jne	0x2a7e <core::fmt::Formatter::pad_integral+0x4de>
    2a7a: eb 00                        	jmp	0x2a7c <core::fmt::Formatter::pad_integral+0x4dc>
    2a7c: eb 52                        	jmp	0x2ad0 <core::fmt::Formatter::pad_integral+0x530>
    2a7e: 48 8b 95 68 fe ff ff         	movq	-408(%rbp), %rdx
    2a85: 48 8b b5 70 fe ff ff         	movq	-400(%rbp), %rsi
    2a8c: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2a93: 48 8b bd b0 fe ff ff         	movq	-336(%rbp), %rdi
    2a9a: 48 89 bd d0 fd ff ff         	movq	%rdi, -560(%rbp)
    2aa1: 8b 8d b8 fe ff ff            	movl	-328(%rbp), %ecx
    2aa7: 89 8d d8 fd ff ff            	movl	%ecx, -552(%rbp)
    2aad: 48 89 7d b8                  	movq	%rdi, -72(%rbp)
    2ab1: 89 4d c0                     	movl	%ecx, -64(%rbp)
    2ab4: 48 89 7d c8                  	movq	%rdi, -56(%rbp)
    2ab8: 89 4d d0                     	movl	%ecx, -48(%rbp)
    2abb: 48 8b 78 20                  	movq	32(%rax), %rdi
    2abf: 48 8b 40 28                  	movq	40(%rax), %rax
    2ac3: ff 50 18                     	callq	*24(%rax)
    2ac6: 88 85 df fd ff ff            	movb	%al, -545(%rbp)
    2acc: eb 19                        	jmp	0x2ae7 <core::fmt::Formatter::pad_integral+0x547>
    2ace: 0f 0b                        	ud2
    2ad0: e8 3b f9 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2ad5: e8 76 ec ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2ada: 24 01                        	andb	$1, %al
    2adc: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2ae2: e9 6a 02 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2ae7: 8a 85 df fd ff ff            	movb	-545(%rbp), %al
    2aed: 0f b6 f8                     	movzbl	%al, %edi
    2af0: 83 e7 01                     	andl	$1, %edi
    2af3: e8 f8 eb ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2af8: 24 01                        	andb	$1, %al
    2afa: 88 85 c6 fe ff ff            	movb	%al, -314(%rbp)
    2b00: 0f b6 85 c6 fe ff ff         	movzbl	-314(%rbp), %eax
    2b07: a8 01                        	testb	$1, %al
    2b09: 74 04                        	je	0x2b0f <core::fmt::Formatter::pad_integral+0x56f>
    2b0b: eb 00                        	jmp	0x2b0d <core::fmt::Formatter::pad_integral+0x56d>
    2b0d: eb 2b                        	jmp	0x2b3a <core::fmt::Formatter::pad_integral+0x59a>
    2b0f: 8b b5 d8 fd ff ff            	movl	-552(%rbp), %esi
    2b15: 48 8b bd d0 fd ff ff         	movq	-560(%rbp), %rdi
    2b1c: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2b23: 48 8b 50 20                  	movq	32(%rax), %rdx
    2b27: 48 8b 48 28                  	movq	40(%rax), %rcx
    2b2b: e8 70 f9 ff ff               	callq	0x24a0 <core::fmt::PostPadding::write>
    2b30: 88 85 cf fd ff ff            	movb	%al, -561(%rbp)
    2b36: eb 19                        	jmp	0x2b51 <core::fmt::Formatter::pad_integral+0x5b1>
    2b38: 0f 0b                        	ud2
    2b3a: e8 d1 f8 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2b3f: e8 0c ec ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2b44: 24 01                        	andb	$1, %al
    2b46: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2b4c: e9 00 02 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2b51: 8a 85 cf fd ff ff            	movb	-561(%rbp), %al
    2b57: 0f b6 f8                     	movzbl	%al, %edi
    2b5a: 83 e7 01                     	andl	$1, %edi
    2b5d: e8 8e eb ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2b62: 24 01                        	andb	$1, %al
    2b64: 88 85 c7 fe ff ff            	movb	%al, -313(%rbp)
    2b6a: 0f b6 85 c7 fe ff ff         	movzbl	-313(%rbp), %eax
    2b71: a8 01                        	testb	$1, %al
    2b73: 74 04                        	je	0x2b79 <core::fmt::Formatter::pad_integral+0x5d9>
    2b75: eb 00                        	jmp	0x2b77 <core::fmt::Formatter::pad_integral+0x5d7>
    2b77: eb 27                        	jmp	0x2ba0 <core::fmt::Formatter::pad_integral+0x600>
    2b79: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2b80: 8a 8d ff fd ff ff            	movb	-513(%rbp), %cl
    2b86: 8b 95 10 fe ff ff            	movl	-496(%rbp), %edx
    2b8c: 89 50 34                     	movl	%edx, 52(%rax)
    2b8f: 88 48 38                     	movb	%cl, 56(%rax)
    2b92: c6 85 87 fe ff ff 00         	movb	$0, -377(%rbp)
    2b99: e9 b3 01 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2b9e: 0f 0b                        	ud2
    2ba0: e8 6b f8 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2ba5: e8 a6 eb ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2baa: 24 01                        	andb	$1, %al
    2bac: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2bb2: e9 9a 01 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2bb7: 48 8b b5 00 fe ff ff         	movq	-512(%rbp), %rsi
    2bbe: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2bc5: c6 85 dd fe ff ff 01         	movb	$1, -291(%rbp)
    2bcc: 0f b6 95 dd fe ff ff         	movzbl	-291(%rbp), %edx
    2bd3: e8 f8 02 00 00               	callq	0x2ed0 <core::fmt::Formatter::padding>
    2bd8: 48 89 85 c0 fd ff ff         	movq	%rax, -576(%rbp)
    2bdf: 89 95 c8 fd ff ff            	movl	%edx, -568(%rbp)
    2be5: 8b b5 c8 fd ff ff            	movl	-568(%rbp), %esi
    2beb: 48 8b bd c0 fd ff ff         	movq	-576(%rbp), %rdi
    2bf2: e8 19 eb ff ff               	callq	0x1710 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2bf7: 89 95 d0 fe ff ff            	movl	%edx, -304(%rbp)
    2bfd: 48 89 85 c8 fe ff ff         	movq	%rax, -312(%rbp)
    2c04: 8b 85 d0 fe ff ff            	movl	-304(%rbp), %eax
    2c0a: 05 00 00 ef ff               	addl	$4293853184, %eax
    2c0f: 0f 94 c0                     	sete	%al
    2c12: 0f b6 c0                     	movzbl	%al, %eax
    2c15: 75 04                        	jne	0x2c1b <core::fmt::Formatter::pad_integral+0x67b>
    2c17: eb 00                        	jmp	0x2c19 <core::fmt::Formatter::pad_integral+0x679>
    2c19: eb 52                        	jmp	0x2c6d <core::fmt::Formatter::pad_integral+0x6cd>
    2c1b: 48 8b bd 78 fe ff ff         	movq	-392(%rbp), %rdi
    2c22: 48 8b 8d c8 fe ff ff         	movq	-312(%rbp), %rcx
    2c29: 48 89 8d b0 fd ff ff         	movq	%rcx, -592(%rbp)
    2c30: 8b 85 d0 fe ff ff            	movl	-304(%rbp), %eax
    2c36: 89 85 b8 fd ff ff            	movl	%eax, -584(%rbp)
    2c3c: 48 89 4d e0                  	movq	%rcx, -32(%rbp)
    2c40: 89 45 e8                     	movl	%eax, -24(%rbp)
    2c43: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    2c47: 89 45 f8                     	movl	%eax, -8(%rbp)
    2c4a: 8b b5 94 fe ff ff            	movl	-364(%rbp), %esi
    2c50: 48 8b 95 98 fe ff ff         	movq	-360(%rbp), %rdx
    2c57: 48 8b 8d a0 fe ff ff         	movq	-352(%rbp), %rcx
    2c5e: e8 8d 01 00 00               	callq	0x2df0 <core::fmt::Formatter::pad_integral::write_prefix>
    2c63: 88 85 bf fd ff ff            	movb	%al, -577(%rbp)
    2c69: eb 19                        	jmp	0x2c84 <core::fmt::Formatter::pad_integral+0x6e4>
    2c6b: 0f 0b                        	ud2
    2c6d: e8 9e f7 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2c72: e8 d9 ea ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2c77: 24 01                        	andb	$1, %al
    2c79: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2c7f: e9 cd 00 00 00               	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2c84: 8a 85 bf fd ff ff            	movb	-577(%rbp), %al
    2c8a: 0f b6 f8                     	movzbl	%al, %edi
    2c8d: 83 e7 01                     	andl	$1, %edi
    2c90: e8 5b ea ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2c95: 24 01                        	andb	$1, %al
    2c97: 88 85 de fe ff ff            	movb	%al, -290(%rbp)
    2c9d: 0f b6 85 de fe ff ff         	movzbl	-290(%rbp), %eax
    2ca4: a8 01                        	testb	$1, %al
    2ca6: 74 04                        	je	0x2cac <core::fmt::Formatter::pad_integral+0x70c>
    2ca8: eb 00                        	jmp	0x2caa <core::fmt::Formatter::pad_integral+0x70a>
    2caa: eb 2a                        	jmp	0x2cd6 <core::fmt::Formatter::pad_integral+0x736>
    2cac: 48 8b 95 68 fe ff ff         	movq	-408(%rbp), %rdx
    2cb3: 48 8b b5 70 fe ff ff         	movq	-400(%rbp), %rsi
    2cba: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2cc1: 48 8b 78 20                  	movq	32(%rax), %rdi
    2cc5: 48 8b 40 28                  	movq	40(%rax), %rax
    2cc9: ff 50 18                     	callq	*24(%rax)
    2ccc: 88 85 af fd ff ff            	movb	%al, -593(%rbp)
    2cd2: eb 16                        	jmp	0x2cea <core::fmt::Formatter::pad_integral+0x74a>
    2cd4: 0f 0b                        	ud2
    2cd6: e8 35 f7 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2cdb: e8 70 ea ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2ce0: 24 01                        	andb	$1, %al
    2ce2: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2ce8: eb 67                        	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2cea: 8a 85 af fd ff ff            	movb	-593(%rbp), %al
    2cf0: 0f b6 f8                     	movzbl	%al, %edi
    2cf3: 83 e7 01                     	andl	$1, %edi
    2cf6: e8 f5 e9 ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2cfb: 24 01                        	andb	$1, %al
    2cfd: 88 85 df fe ff ff            	movb	%al, -289(%rbp)
    2d03: 0f b6 85 df fe ff ff         	movzbl	-289(%rbp), %eax
    2d0a: a8 01                        	testb	$1, %al
    2d0c: 74 04                        	je	0x2d12 <core::fmt::Formatter::pad_integral+0x772>
    2d0e: eb 00                        	jmp	0x2d10 <core::fmt::Formatter::pad_integral+0x770>
    2d10: eb 2d                        	jmp	0x2d3f <core::fmt::Formatter::pad_integral+0x79f>
    2d12: 8b b5 b8 fd ff ff            	movl	-584(%rbp), %esi
    2d18: 48 8b bd b0 fd ff ff         	movq	-592(%rbp), %rdi
    2d1f: 48 8b 85 78 fe ff ff         	movq	-392(%rbp), %rax
    2d26: 48 8b 50 20                  	movq	32(%rax), %rdx
    2d2a: 48 8b 48 28                  	movq	40(%rax), %rcx
    2d2e: e8 6d f7 ff ff               	callq	0x24a0 <core::fmt::PostPadding::write>
    2d33: 24 01                        	andb	$1, %al
    2d35: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2d3b: eb 14                        	jmp	0x2d51 <core::fmt::Formatter::pad_integral+0x7b1>
    2d3d: 0f 0b                        	ud2
    2d3f: e8 cc f6 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2d44: e8 07 ea ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2d49: 24 01                        	andb	$1, %al
    2d4b: 88 85 87 fe ff ff            	movb	%al, -377(%rbp)
    2d51: 8a 85 87 fe ff ff            	movb	-377(%rbp), %al
    2d57: 24 01                        	andb	$1, %al
    2d59: 0f b6 c0                     	movzbl	%al, %eax
    2d5c: 48 81 c4 60 02 00 00         	addq	$608, %rsp
    2d63: 5d                           	popq	%rbp
    2d64: c3                           	retq
    2d65: 48 8d 3d 14 28 00 00         	leaq	10260(%rip), %rdi  # 5580 <str.1>
    2d6c: 48 8d 15 0d 14 00 00         	leaq	5133(%rip), %rdx  # 4180 <core::fmt::num::DEC_DIGITS_LUT+0xc8>
    2d73: be 1c 00 00 00               	movl	$28, %esi
    2d78: e8 83 db ff ff               	callq	0x900 <core::panicking::panic>
    2d7d: 0f 0b                        	ud2
    2d7f: 48 8d 3d fa 27 00 00         	leaq	10234(%rip), %rdi  # 5580 <str.1>
    2d86: 48 8d 15 0b 14 00 00         	leaq	5131(%rip), %rdx  # 4198 <core::fmt::num::DEC_DIGITS_LUT+0xe0>
    2d8d: be 1c 00 00 00               	movl	$28, %esi
    2d92: e8 69 db ff ff               	callq	0x900 <core::panicking::panic>
    2d97: 0f 0b                        	ud2
    2d99: 48 8d 3d e0 27 00 00         	leaq	10208(%rip), %rdi  # 5580 <str.1>
    2da0: 48 8d 15 09 14 00 00         	leaq	5129(%rip), %rdx  # 41b0 <core::fmt::num::DEC_DIGITS_LUT+0xf8>
    2da7: be 1c 00 00 00               	movl	$28, %esi
    2dac: e8 4f db ff ff               	callq	0x900 <core::panicking::panic>
    2db1: 0f 0b                        	ud2
    2db3: 48 8d 3d 96 27 00 00         	leaq	10134(%rip), %rdi  # 5550 <str.0>
    2dba: 48 8d 15 07 14 00 00         	leaq	5127(%rip), %rdx  # 41c8 <core::fmt::num::DEC_DIGITS_LUT+0x110>
    2dc1: be 21 00 00 00               	movl	$33, %esi
    2dc6: e8 35 db ff ff               	callq	0x900 <core::panicking::panic>
    2dcb: 0f 0b                        	ud2
    2dcd: 48 8d 3d 7c 27 00 00         	leaq	10108(%rip), %rdi  # 5550 <str.0>
    2dd4: 48 8d 15 05 14 00 00         	leaq	5125(%rip), %rdx  # 41e0 <core::fmt::num::DEC_DIGITS_LUT+0x128>
    2ddb: be 21 00 00 00               	movl	$33, %esi
    2de0: e8 1b db ff ff               	callq	0x900 <core::panicking::panic>
    2de5: 0f 0b                        	ud2
    2de7: cc                           	int3
    2de8: cc                           	int3
    2de9: cc                           	int3
    2dea: cc                           	int3
    2deb: cc                           	int3
    2dec: cc                           	int3
    2ded: cc                           	int3
    2dee: cc                           	int3
    2def: cc                           	int3

0000000000002df0 <core::fmt::Formatter::pad_integral::write_prefix>:
    2df0: 55                           	pushq	%rbp
    2df1: 48 89 e5                     	movq	%rsp, %rbp
    2df4: 48 83 ec 60                  	subq	$96, %rsp
    2df8: 48 89 7d b0                  	movq	%rdi, -80(%rbp)
    2dfc: 89 75 bc                     	movl	%esi, -68(%rbp)
    2dff: 48 89 55 c0                  	movq	%rdx, -64(%rbp)
    2e03: 48 89 4d c8                  	movq	%rcx, -56(%rbp)
    2e07: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    2e0b: 8b 55 bc                     	movl	-68(%rbp), %edx
    2e0e: 81 ea 00 00 11 00            	subl	$1114112, %edx
    2e14: b8 01 00 00 00               	movl	$1, %eax
    2e19: 31 c9                        	xorl	%ecx, %ecx
    2e1b: 83 fa 00                     	cmpl	$0, %edx
    2e1e: 48 0f 44 c1                  	cmoveq	%rcx, %rax
    2e22: 48 83 f8 01                  	cmpq	$1, %rax
    2e26: 74 02                        	je	0x2e2a <core::fmt::Formatter::pad_integral::write_prefix+0x3a>
    2e28: eb 4c                        	jmp	0x2e76 <core::fmt::Formatter::pad_integral::write_prefix+0x86>
    2e2a: 48 8b 45 b0                  	movq	-80(%rbp), %rax
    2e2e: 8b 75 bc                     	movl	-68(%rbp), %esi
    2e31: 89 75 ec                     	movl	%esi, -20(%rbp)
    2e34: 48 8b 78 20                  	movq	32(%rax), %rdi
    2e38: 48 8b 40 28                  	movq	40(%rax), %rax
    2e3c: ff 50 20                     	callq	*32(%rax)
    2e3f: 88 45 af                     	movb	%al, -81(%rbp)
    2e42: 8a 45 af                     	movb	-81(%rbp), %al
    2e45: 0f b6 f8                     	movzbl	%al, %edi
    2e48: 83 e7 01                     	andl	$1, %edi
    2e4b: e8 a0 e8 ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    2e50: 24 01                        	andb	$1, %al
    2e52: 88 45 d7                     	movb	%al, -41(%rbp)
    2e55: 0f b6 45 d7                  	movzbl	-41(%rbp), %eax
    2e59: a8 01                        	testb	$1, %al
    2e5b: 74 04                        	je	0x2e61 <core::fmt::Formatter::pad_integral::write_prefix+0x71>
    2e5d: eb 00                        	jmp	0x2e5f <core::fmt::Formatter::pad_integral::write_prefix+0x6f>
    2e5f: eb 04                        	jmp	0x2e65 <core::fmt::Formatter::pad_integral::write_prefix+0x75>
    2e61: eb 13                        	jmp	0x2e76 <core::fmt::Formatter::pad_integral::write_prefix+0x86>
    2e63: 0f 0b                        	ud2
    2e65: e8 a6 f5 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    2e6a: e8 e1 e8 ff ff               	callq	0x1750 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    2e6f: 24 01                        	andb	$1, %al
    2e71: 88 45 d6                     	movb	%al, -42(%rbp)
    2e74: eb 40                        	jmp	0x2eb6 <core::fmt::Formatter::pad_integral::write_prefix+0xc6>
    2e76: b8 01 00 00 00               	movl	$1, %eax
    2e7b: 31 c9                        	xorl	%ecx, %ecx
    2e7d: 48 83 7d c0 00               	cmpq	$0, -64(%rbp)
    2e82: 48 0f 44 c1                  	cmoveq	%rcx, %rax
    2e86: 48 83 f8 01                  	cmpq	$1, %rax
    2e8a: 74 06                        	je	0x2e92 <core::fmt::Formatter::pad_integral::write_prefix+0xa2>
    2e8c: c6 45 d6 00                  	movb	$0, -42(%rbp)
    2e90: eb 24                        	jmp	0x2eb6 <core::fmt::Formatter::pad_integral::write_prefix+0xc6>
    2e92: 48 8b 45 b0                  	movq	-80(%rbp), %rax
    2e96: 48 8b 75 c0                  	movq	-64(%rbp), %rsi
    2e9a: 48 8b 55 c8                  	movq	-56(%rbp), %rdx
    2e9e: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    2ea2: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
    2ea6: 48 8b 78 20                  	movq	32(%rax), %rdi
    2eaa: 48 8b 40 28                  	movq	40(%rax), %rax
    2eae: ff 50 18                     	callq	*24(%rax)
    2eb1: 24 01                        	andb	$1, %al
    2eb3: 88 45 d6                     	movb	%al, -42(%rbp)
    2eb6: 8a 45 d6                     	movb	-42(%rbp), %al
    2eb9: 24 01                        	andb	$1, %al
    2ebb: 0f b6 c0                     	movzbl	%al, %eax
    2ebe: 48 83 c4 60                  	addq	$96, %rsp
    2ec2: 5d                           	popq	%rbp
    2ec3: c3                           	retq
    2ec4: cc                           	int3
    2ec5: cc                           	int3
    2ec6: cc                           	int3
    2ec7: cc                           	int3
    2ec8: cc                           	int3
    2ec9: cc                           	int3
    2eca: cc                           	int3
    2ecb: cc                           	int3
    2ecc: cc                           	int3
    2ecd: cc                           	int3
    2ece: cc                           	int3
    2ecf: cc                           	int3

0000000000002ed0 <core::fmt::Formatter::padding>:
    2ed0: 55                           	pushq	%rbp
    2ed1: 48 89 e5                     	movq	%rsp, %rbp
    2ed4: 48 81 ec 10 01 00 00         	subq	$272, %rsp
    2edb: 48 89 b5 40 ff ff ff         	movq	%rsi, -192(%rbp)
    2ee2: 48 89 bd 48 ff ff ff         	movq	%rdi, -184(%rbp)
    2ee9: 88 d0                        	movb	%dl, %al
    2eeb: 88 85 57 ff ff ff            	movb	%al, -169(%rbp)
    2ef1: 48 89 7d b8                  	movq	%rdi, -72(%rbp)
    2ef5: 48 89 75 c0                  	movq	%rsi, -64(%rbp)
    2ef9: 88 45 cf                     	movb	%al, -49(%rbp)
    2efc: 0f b6 47 38                  	movzbl	56(%rdi), %eax
    2f00: 48 83 f8 03                  	cmpq	$3, %rax
    2f04: 74 12                        	je	0x2f18 <core::fmt::Formatter::padding+0x48>
    2f06: 48 8b 85 48 ff ff ff         	movq	-184(%rbp), %rax
    2f0d: 8a 40 38                     	movb	56(%rax), %al
    2f10: 88 85 6f ff ff ff            	movb	%al, -145(%rbp)
    2f16: eb 0c                        	jmp	0x2f24 <core::fmt::Formatter::padding+0x54>
    2f18: 8a 85 57 ff ff ff            	movb	-169(%rbp), %al
    2f1e: 88 85 6f ff ff ff            	movb	%al, -145(%rbp)
    2f24: 0f b6 85 6f ff ff ff         	movzbl	-145(%rbp), %eax
    2f2b: 48 89 85 38 ff ff ff         	movq	%rax, -200(%rbp)
    2f32: 48 8b 85 38 ff ff ff         	movq	-200(%rbp), %rax
    2f39: 48 8d 0d 00 26 00 00         	leaq	9728(%rip), %rcx  # 5540 <str.7+0x30>
    2f40: 48 63 04 81                  	movslq	(%rcx,%rax,4), %rax
    2f44: 48 01 c8                     	addq	%rcx, %rax
    2f47: ff e0                        	jmpq	*%rax
    2f49: 48 8b 85 40 ff ff ff         	movq	-192(%rbp), %rax
    2f50: 48 89 c1                     	movq	%rax, %rcx
    2f53: 48 c1 e9 01                  	shrq	$1, %rcx
    2f57: 48 89 8d 28 ff ff ff         	movq	%rcx, -216(%rbp)
    2f5e: 48 83 c0 01                  	addq	$1, %rax
    2f62: 48 89 85 30 ff ff ff         	movq	%rax, -208(%rbp)
    2f69: 0f 92 c0                     	setb	%al
    2f6c: a8 01                        	testb	$1, %al
    2f6e: 0f 85 92 01 00 00            	jne	0x3106 <core::fmt::Formatter::padding+0x236>
    2f74: eb 38                        	jmp	0x2fae <core::fmt::Formatter::padding+0xde>
    2f76: 0f 0b                        	ud2
    2f78: 48 8b 85 40 ff ff ff         	movq	-192(%rbp), %rax
    2f7f: 48 c7 85 70 ff ff ff 00 00 00 00     	movq	$0, -144(%rbp)
    2f8a: 48 89 85 78 ff ff ff         	movq	%rax, -136(%rbp)
    2f91: eb 3b                        	jmp	0x2fce <core::fmt::Formatter::padding+0xfe>
    2f93: 48 8b 85 40 ff ff ff         	movq	-192(%rbp), %rax
    2f9a: 48 89 85 70 ff ff ff         	movq	%rax, -144(%rbp)
    2fa1: 48 c7 85 78 ff ff ff 00 00 00 00     	movq	$0, -136(%rbp)
    2fac: eb 20                        	jmp	0x2fce <core::fmt::Formatter::padding+0xfe>
    2fae: 48 8b 8d 28 ff ff ff         	movq	-216(%rbp), %rcx
    2fb5: 48 8b 85 30 ff ff ff         	movq	-208(%rbp), %rax
    2fbc: 48 c1 e8 01                  	shrq	$1, %rax
    2fc0: 48 89 8d 70 ff ff ff         	movq	%rcx, -144(%rbp)
    2fc7: 48 89 85 78 ff ff ff         	movq	%rax, -136(%rbp)
    2fce: 48 8b 85 70 ff ff ff         	movq	-144(%rbp), %rax
    2fd5: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    2fd9: 48 8b 8d 78 ff ff ff         	movq	-136(%rbp), %rcx
    2fe0: 48 89 8d 10 ff ff ff         	movq	%rcx, -240(%rbp)
    2fe7: 48 89 4d e8                  	movq	%rcx, -24(%rbp)
    2feb: 48 c7 45 80 00 00 00 00      	movq	$0, -128(%rbp)
    2ff3: 48 89 45 88                  	movq	%rax, -120(%rbp)
    2ff7: 48 8b 7d 80                  	movq	-128(%rbp), %rdi
    2ffb: 48 8b 75 88                  	movq	-120(%rbp), %rsi
    2fff: e8 fc 04 00 00               	callq	0x3500 <<I as core::iter::traits::collect::IntoIterator>::into_iter>
    3004: 48 89 85 18 ff ff ff         	movq	%rax, -232(%rbp)
    300b: 48 89 95 20 ff ff ff         	movq	%rdx, -224(%rbp)
    3012: 48 8b 85 20 ff ff ff         	movq	-224(%rbp), %rax
    3019: 48 8b 8d 18 ff ff ff         	movq	-232(%rbp), %rcx
    3020: 48 89 4d 90                  	movq	%rcx, -112(%rbp)
    3024: 48 89 45 98                  	movq	%rax, -104(%rbp)
    3028: 48 8d 7d 90                  	leaq	-112(%rbp), %rdi
    302c: e8 3f 04 00 00               	callq	0x3470 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next>
    3031: 48 89 55 a8                  	movq	%rdx, -88(%rbp)
    3035: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    3039: 48 8b 45 a0                  	movq	-96(%rbp), %rax
    303d: 48 85 c0                     	testq	%rax, %rax
    3040: 74 04                        	je	0x3046 <core::fmt::Formatter::padding+0x176>
    3042: eb 00                        	jmp	0x3044 <core::fmt::Formatter::padding+0x174>
    3044: eb 27                        	jmp	0x306d <core::fmt::Formatter::padding+0x19d>
    3046: 48 8b b5 10 ff ff ff         	movq	-240(%rbp), %rsi
    304d: 48 8b 85 48 ff ff ff         	movq	-184(%rbp), %rax
    3054: 8b 78 34                     	movl	52(%rax), %edi
    3057: e8 14 f4 ff ff               	callq	0x2470 <core::fmt::PostPadding::new>
    305c: 48 89 85 00 ff ff ff         	movq	%rax, -256(%rbp)
    3063: 89 95 0c ff ff ff            	movl	%edx, -244(%rbp)
    3069: eb 6b                        	jmp	0x30d6 <core::fmt::Formatter::padding+0x206>
    306b: 0f 0b                        	ud2
    306d: 48 8b 8d 48 ff ff ff         	movq	-184(%rbp), %rcx
    3074: 48 8b 45 a8                  	movq	-88(%rbp), %rax
    3078: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    307c: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    3080: 48 8b 79 20                  	movq	32(%rcx), %rdi
    3084: 48 8b 41 28                  	movq	40(%rcx), %rax
    3088: 8b 71 34                     	movl	52(%rcx), %esi
    308b: ff 50 20                     	callq	*32(%rax)
    308e: 88 85 ff fe ff ff            	movb	%al, -257(%rbp)
    3094: 8a 85 ff fe ff ff            	movb	-257(%rbp), %al
    309a: 0f b6 f8                     	movzbl	%al, %edi
    309d: 83 e7 01                     	andl	$1, %edi
    30a0: e8 4b e6 ff ff               	callq	0x16f0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    30a5: 24 01                        	andb	$1, %al
    30a7: 88 45 b7                     	movb	%al, -73(%rbp)
    30aa: 0f b6 45 b7                  	movzbl	-73(%rbp), %eax
    30ae: a8 01                        	testb	$1, %al
    30b0: 74 04                        	je	0x30b6 <core::fmt::Formatter::padding+0x1e6>
    30b2: eb 00                        	jmp	0x30b4 <core::fmt::Formatter::padding+0x1e4>
    30b4: eb 07                        	jmp	0x30bd <core::fmt::Formatter::padding+0x1ed>
    30b6: e9 6d ff ff ff               	jmp	0x3028 <core::fmt::Formatter::padding+0x158>
    30bb: 0f 0b                        	ud2
    30bd: e8 4e f3 ff ff               	callq	0x2410 <<T as core::convert::From<T>>::from>
    30c2: e8 69 e6 ff ff               	callq	0x1730 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    30c7: 89 95 60 ff ff ff            	movl	%edx, -160(%rbp)
    30cd: 48 89 85 58 ff ff ff         	movq	%rax, -168(%rbp)
    30d4: eb 1a                        	jmp	0x30f0 <core::fmt::Formatter::padding+0x220>
    30d6: 8b 85 0c ff ff ff            	movl	-244(%rbp), %eax
    30dc: 48 8b 8d 00 ff ff ff         	movq	-256(%rbp), %rcx
    30e3: 48 89 8d 58 ff ff ff         	movq	%rcx, -168(%rbp)
    30ea: 89 85 60 ff ff ff            	movl	%eax, -160(%rbp)
    30f0: 48 8b 85 58 ff ff ff         	movq	-168(%rbp), %rax
    30f7: 8b 95 60 ff ff ff            	movl	-160(%rbp), %edx
    30fd: 48 81 c4 10 01 00 00         	addq	$272, %rsp
    3104: 5d                           	popq	%rbp
    3105: c3                           	retq
    3106: 48 8d 3d 73 24 00 00         	leaq	9331(%rip), %rdi  # 5580 <str.1>
    310d: 48 8d 15 e4 10 00 00         	leaq	4324(%rip), %rdx  # 41f8 <core::fmt::num::DEC_DIGITS_LUT+0x140>
    3114: be 1c 00 00 00               	movl	$28, %esi
    3119: e8 e2 d7 ff ff               	callq	0x900 <core::panicking::panic>
    311e: 0f 0b                        	ud2

0000000000003120 <core::fmt::Formatter::sign_plus>:
    3120: 55                           	pushq	%rbp
    3121: 48 89 e5                     	movq	%rsp, %rbp
    3124: 50                           	pushq	%rax
    3125: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    3129: 8b 47 30                     	movl	48(%rdi), %eax
    312c: 83 e0 01                     	andl	$1, %eax
    312f: 83 f8 00                     	cmpl	$0, %eax
    3132: 0f 95 c0                     	setne	%al
    3135: 24 01                        	andb	$1, %al
    3137: 0f b6 c0                     	movzbl	%al, %eax
    313a: 48 83 c4 08                  	addq	$8, %rsp
    313e: 5d                           	popq	%rbp
    313f: c3                           	retq

0000000000003140 <core::fmt::Formatter::alternate>:
    3140: 55                           	pushq	%rbp
    3141: 48 89 e5                     	movq	%rsp, %rbp
    3144: 50                           	pushq	%rax
    3145: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    3149: 8b 47 30                     	movl	48(%rdi), %eax
    314c: 83 e0 04                     	andl	$4, %eax
    314f: 83 f8 00                     	cmpl	$0, %eax
    3152: 0f 95 c0                     	setne	%al
    3155: 24 01                        	andb	$1, %al
    3157: 0f b6 c0                     	movzbl	%al, %eax
    315a: 48 83 c4 08                  	addq	$8, %rsp
    315e: 5d                           	popq	%rbp
    315f: c3                           	retq

0000000000003160 <core::fmt::Formatter::sign_aware_zero_pad>:
    3160: 55                           	pushq	%rbp
    3161: 48 89 e5                     	movq	%rsp, %rbp
    3164: 50                           	pushq	%rax
    3165: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    3169: 8b 47 30                     	movl	48(%rdi), %eax
    316c: 83 e0 08                     	andl	$8, %eax
    316f: 83 f8 00                     	cmpl	$0, %eax
    3172: 0f 95 c0                     	setne	%al
    3175: 24 01                        	andb	$1, %al
    3177: 0f b6 c0                     	movzbl	%al, %eax
    317a: 48 83 c4 08                  	addq	$8, %rsp
    317e: 5d                           	popq	%rbp
    317f: c3                           	retq

0000000000003180 <core::iter::traits::iterator::Iterator::map>:
    3180: 55                           	pushq	%rbp
    3181: 48 89 e5                     	movq	%rsp, %rbp
    3184: 48 83 ec 30                  	subq	$48, %rsp
    3188: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    318c: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    3190: e8 3b da ff ff               	callq	0xbd0 <core::iter::adapters::map::Map<I,F>::new>
    3195: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    3199: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    319d: 48 8b 55 e0                  	movq	-32(%rbp), %rdx
    31a1: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    31a5: 48 83 c4 30                  	addq	$48, %rsp
    31a9: 5d                           	popq	%rbp
    31aa: c3                           	retq
    31ab: cc                           	int3
    31ac: cc                           	int3
    31ad: cc                           	int3
    31ae: cc                           	int3
    31af: cc                           	int3

00000000000031b0 <core::iter::traits::iterator::Iterator::filter>:
    31b0: 55                           	pushq	%rbp
    31b1: 48 89 e5                     	movq	%rsp, %rbp
    31b4: 48 83 ec 30                  	subq	$48, %rsp
    31b8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    31bc: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    31c0: e8 5b e4 ff ff               	callq	0x1620 <core::iter::adapters::filter::Filter<I,P>::new>
    31c5: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    31c9: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    31cd: 48 8b 55 e0                  	movq	-32(%rbp), %rdx
    31d1: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    31d5: 48 83 c4 30                  	addq	$48, %rsp
    31d9: 5d                           	popq	%rbp
    31da: c3                           	retq
    31db: cc                           	int3
    31dc: cc                           	int3
    31dd: cc                           	int3
    31de: cc                           	int3
    31df: cc                           	int3

00000000000031e0 <core::iter::traits::iterator::Iterator::fold>:
    31e0: 55                           	pushq	%rbp
    31e1: 48 89 e5                     	movq	%rsp, %rbp
    31e4: 48 83 ec 50                  	subq	$80, %rsp
    31e8: 48 89 7d b8                  	movq	%rdi, -72(%rbp)
    31ec: 48 89 75 c0                  	movq	%rsi, -64(%rbp)
    31f0: 48 89 55 f0                  	movq	%rdx, -16(%rbp)
    31f4: 48 89 55 d0                  	movq	%rdx, -48(%rbp)
    31f8: 48 8d 7d b8                  	leaq	-72(%rbp), %rdi
    31fc: e8 6f 01 00 00               	callq	0x3370 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next>
    3201: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    3205: b8 01 00 00 00               	movl	$1, %eax
    320a: 31 c9                        	xorl	%ecx, %ecx
    320c: 48 83 7d d8 00               	cmpq	$0, -40(%rbp)
    3211: 48 0f 44 c1                  	cmoveq	%rcx, %rax
    3215: 48 83 f8 01                  	cmpq	$1, %rax
    3219: 74 02                        	je	0x321d <core::iter::traits::iterator::Iterator::fold+0x3d>
    321b: eb 33                        	jmp	0x3250 <core::iter::traits::iterator::Iterator::fold+0x70>
    321d: 48 8b 45 d8                  	movq	-40(%rbp), %rax
    3221: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    3225: 48 8b 4d d0                  	movq	-48(%rbp), %rcx
    3229: 48 89 4d e0                  	movq	%rcx, -32(%rbp)
    322d: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    3231: 48 8b 75 e0                  	movq	-32(%rbp), %rsi
    3235: 48 8b 55 e8                  	movq	-24(%rbp), %rdx
    3239: 48 8d 7d c8                  	leaq	-56(%rbp), %rdi
    323d: e8 ce d9 ff ff               	callq	0xc10 <core::iter::adapters::map::map_fold::{{closure}}>
    3242: 48 89 45 b0                  	movq	%rax, -80(%rbp)
    3246: 48 8b 45 b0                  	movq	-80(%rbp), %rax
    324a: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    324e: eb a8                        	jmp	0x31f8 <core::iter::traits::iterator::Iterator::fold+0x18>
    3250: eb 00                        	jmp	0x3252 <core::iter::traits::iterator::Iterator::fold+0x72>
    3252: eb 00                        	jmp	0x3254 <core::iter::traits::iterator::Iterator::fold+0x74>
    3254: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    3258: 48 83 c4 50                  	addq	$80, %rsp
    325c: 5d                           	popq	%rbp
    325d: c3                           	retq
    325e: cc                           	int3
    325f: cc                           	int3

0000000000003260 <core::option::Option<T>::unwrap>:
    3260: 55                           	pushq	%rbp
    3261: 48 89 e5                     	movq	%rsp, %rbp
    3264: 48 83 ec 20                  	subq	$32, %rsp
    3268: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    326c: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    3270: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    3274: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    3278: 48 85 c0                     	testq	%rax, %rax
    327b: 74 04                        	je	0x3281 <core::option::Option<T>::unwrap+0x21>
    327d: eb 00                        	jmp	0x327f <core::option::Option<T>::unwrap+0x1f>
    327f: eb 19                        	jmp	0x329a <core::option::Option<T>::unwrap+0x3a>
    3281: 48 8b 55 e0                  	movq	-32(%rbp), %rdx
    3285: 48 8d 3d 80 23 00 00         	leaq	9088(%rip), %rdi  # 560c <str.1+0x8c>
    328c: be 2b 00 00 00               	movl	$43, %esi
    3291: e8 6a d6 ff ff               	callq	0x900 <core::panicking::panic>
    3296: 0f 0b                        	ud2
    3298: 0f 0b                        	ud2
    329a: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    329e: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    32a2: 48 83 c4 20                  	addq	$32, %rsp
    32a6: 5d                           	popq	%rbp
    32a7: c3                           	retq
    32a8: cc                           	int3
    32a9: cc                           	int3
    32aa: cc                           	int3
    32ab: cc                           	int3
    32ac: cc                           	int3
    32ad: cc                           	int3
    32ae: cc                           	int3
    32af: cc                           	int3

00000000000032b0 <core::slice::iter::Iter<T>::new>:
    32b0: 55                           	pushq	%rbp
    32b1: 48 89 e5                     	movq	%rsp, %rbp
    32b4: 48 83 ec 70                  	subq	$112, %rsp
    32b8: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
    32bc: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
    32c0: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    32c4: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    32c8: e8 f3 d6 ff ff               	callq	0x9c0 <core::slice::<impl [T]>::as_ptr>
    32cd: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    32d1: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    32d5: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
    32d9: e8 62 d7 ff ff               	callq	0xa40 <core::ptr::const_ptr::<impl *const T>::is_null>
    32de: eb 00                        	jmp	0x32e0 <core::slice::iter::Iter<T>::new+0x30>
    32e0: b8 01 00 00 00               	movl	$1, %eax
    32e5: 48 83 f8 00                  	cmpq	$0, %rax
    32e9: 75 13                        	jne	0x32fe <core::slice::iter::Iter<T>::new+0x4e>
    32eb: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
    32ef: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
    32f3: e8 98 d6 ff ff               	callq	0x990 <core::slice::<impl [T]>::len>
    32f8: 48 89 45 b0                  	movq	%rax, -80(%rbp)
    32fc: eb 13                        	jmp	0x3311 <core::slice::iter::Iter<T>::new+0x61>
    32fe: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
    3302: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
    3306: e8 85 d6 ff ff               	callq	0x990 <core::slice::<impl [T]>::len>
    330b: 48 89 45 a8                  	movq	%rax, -88(%rbp)
    330f: eb 1b                        	jmp	0x332c <core::slice::iter::Iter<T>::new+0x7c>
    3311: 48 8b 75 b0                  	movq	-80(%rbp), %rsi
    3315: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
    3319: e8 62 d8 ff ff               	callq	0xb80 <core::ptr::const_ptr::<impl *const T>::wrapping_add>
    331e: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    3322: 48 8b 45 a0                  	movq	-96(%rbp), %rax
    3326: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    332a: eb 11                        	jmp	0x333d <core::slice::iter::Iter<T>::new+0x8d>
    332c: 48 8b 75 a8                  	movq	-88(%rbp), %rsi
    3330: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
    3334: e8 17 d8 ff ff               	callq	0xb50 <core::ptr::const_ptr::<impl *const T>::add>
    3339: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    333d: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
    3341: e8 ca ef ff ff               	callq	0x2310 <core::ptr::non_null::NonNull<T>::new_unchecked>
    3346: 48 89 45 98                  	movq	%rax, -104(%rbp)
    334a: 48 8b 4d 98                  	movq	-104(%rbp), %rcx
    334e: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    3352: 48 89 4d d0                  	movq	%rcx, -48(%rbp)
    3356: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    335a: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    335e: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
    3362: 48 83 c4 70                  	addq	$112, %rsp
    3366: 5d                           	popq	%rbp
    3367: c3                           	retq
    3368: cc                           	int3
    3369: cc                           	int3
    336a: cc                           	int3
    336b: cc                           	int3
    336c: cc                           	int3
    336d: cc                           	int3
    336e: cc                           	int3
    336f: cc                           	int3

0000000000003370 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next>:
    3370: 55                           	pushq	%rbp
    3371: 48 89 e5                     	movq	%rsp, %rbp
    3374: 48 83 ec 60                  	subq	$96, %rsp
    3378: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
    337c: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    3380: 48 8b 3f                     	movq	(%rdi), %rdi
    3383: e8 a8 ef ff ff               	callq	0x2330 <core::ptr::non_null::NonNull<T>::as_ptr>
    3388: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    338c: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
    3390: e8 bb ef ff ff               	callq	0x2350 <core::ptr::mut_ptr::<impl *mut T>::is_null>
    3395: eb 00                        	jmp	0x3397 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0x27>
    3397: b8 01 00 00 00               	movl	$1, %eax
    339c: 48 83 f8 00                  	cmpq	$0, %rax
    33a0: 74 0f                        	je	0x33b1 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0x41>
    33a2: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    33a6: 48 8b 78 08                  	movq	8(%rax), %rdi
    33aa: e8 91 d6 ff ff               	callq	0xa40 <core::ptr::const_ptr::<impl *const T>::is_null>
    33af: eb 02                        	jmp	0x33b3 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0x43>
    33b1: eb 02                        	jmp	0x33b5 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0x45>
    33b3: eb 00                        	jmp	0x33b5 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0x45>
    33b5: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    33b9: 48 8b 38                     	movq	(%rax), %rdi
    33bc: e8 6f ef ff ff               	callq	0x2330 <core::ptr::non_null::NonNull<T>::as_ptr>
    33c1: 48 89 45 b8                  	movq	%rax, -72(%rbp)
    33c5: 48 8b 45 b8                  	movq	-72(%rbp), %rax
    33c9: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
    33cd: 48 3b 41 08                  	cmpq	8(%rcx), %rax
    33d1: 75 0a                        	jne	0x33dd <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0x6d>
    33d3: 48 c7 45 d0 00 00 00 00      	movq	$0, -48(%rbp)
    33db: eb 66                        	jmp	0x3443 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next+0xd3>
    33dd: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    33e1: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    33e5: 48 c7 45 f0 01 00 00 00      	movq	$1, -16(%rbp)
    33ed: 48 8b 38                     	movq	(%rax), %rdi
    33f0: e8 3b ef ff ff               	callq	0x2330 <core::ptr::non_null::NonNull<T>::as_ptr>
    33f5: 48 89 c1                     	movq	%rax, %rcx
    33f8: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    33fc: 48 89 4d a8                  	movq	%rcx, -88(%rbp)
    3400: 48 89 4d f8                  	movq	%rcx, -8(%rbp)
    3404: 48 8b 38                     	movq	(%rax), %rdi
    3407: e8 24 ef ff ff               	callq	0x2330 <core::ptr::non_null::NonNull<T>::as_ptr>
    340c: 48 89 c7                     	movq	%rax, %rdi
    340f: be 01 00 00 00               	movl	$1, %esi
    3414: e8 67 ef ff ff               	callq	0x2380 <core::ptr::mut_ptr::<impl *mut T>::offset>
    3419: 48 89 c7                     	movq	%rax, %rdi
    341c: e8 ef ee ff ff               	callq	0x2310 <core::ptr::non_null::NonNull<T>::new_unchecked>
    3421: 48 8b 4d c0                  	movq	-64(%rbp), %rcx
    3425: 48 89 c2                     	movq	%rax, %rdx
    3428: 48 8b 45 a8                  	movq	-88(%rbp), %rax
    342c: 48 89 11                     	movq	%rdx, (%rcx)
    342f: 48 89 45 e0                  	movq	%rax, -32(%rbp)
    3433: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    3437: 48 89 45 b0                  	movq	%rax, -80(%rbp)
    343b: 48 8b 45 b0                  	movq	-80(%rbp), %rax
    343f: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    3443: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    3447: 48 83 c4 60                  	addq	$96, %rsp
    344b: 5d                           	popq	%rbp
    344c: c3                           	retq
    344d: cc                           	int3
    344e: cc                           	int3
    344f: cc                           	int3

0000000000003450 <core::ptr::drop_in_place<core::panic::PanicInfo::internal_constructor::NoPayload>>:
    3450: 55                           	pushq	%rbp
    3451: 48 89 e5                     	movq	%rsp, %rbp
    3454: 48 83 ec 10                  	subq	$16, %rsp
    3458: 48 89 7d f8                  	movq	%rdi, -8(%rbp)
    345c: 48 83 c4 10                  	addq	$16, %rsp
    3460: 5d                           	popq	%rbp
    3461: c3                           	retq
    3462: cc                           	int3
    3463: cc                           	int3
    3464: cc                           	int3
    3465: cc                           	int3
    3466: cc                           	int3
    3467: cc                           	int3
    3468: cc                           	int3
    3469: cc                           	int3
    346a: cc                           	int3
    346b: cc                           	int3
    346c: cc                           	int3
    346d: cc                           	int3
    346e: cc                           	int3
    346f: cc                           	int3

0000000000003470 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next>:
    3470: 55                           	pushq	%rbp
    3471: 48 89 e5                     	movq	%rsp, %rbp
    3474: 48 83 ec 50                  	subq	$80, %rsp
    3478: 48 89 fe                     	movq	%rdi, %rsi
    347b: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
    347f: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    3483: 48 89 f7                     	movq	%rsi, %rdi
    3486: 48 83 c6 08                  	addq	$8, %rsi
    348a: e8 b1 eb ff ff               	callq	0x2040 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt>
    348f: 88 45 df                     	movb	%al, -33(%rbp)
    3492: 8a 45 df                     	movb	-33(%rbp), %al
    3495: a8 01                        	testb	$1, %al
    3497: 75 02                        	jne	0x349b <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next+0x2b>
    3499: eb 0f                        	jmp	0x34aa <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next+0x3a>
    349b: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    349f: e8 8c e3 ff ff               	callq	0x1830 <core::clone::impls::<impl core::clone::Clone for usize>::clone>
    34a4: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    34a8: eb 0a                        	jmp	0x34b4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next+0x44>
    34aa: 48 c7 45 e0 00 00 00 00      	movq	$0, -32(%rbp)
    34b2: eb 37                        	jmp	0x34eb <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next+0x7b>
    34b4: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
    34b8: be 01 00 00 00               	movl	$1, %esi
    34bd: e8 1e 01 00 00               	callq	0x35e0 <<usize as core::iter::range::Step>::forward_unchecked>
    34c2: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    34c6: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    34ca: 48 8b 75 c0                  	movq	-64(%rbp), %rsi
    34ce: 48 8b 7d d0                  	movq	-48(%rbp), %rdi
    34d2: e8 69 ed ff ff               	callq	0x2240 <core::mem::replace>
    34d7: 48 89 45 b8                  	movq	%rax, -72(%rbp)
    34db: 48 8b 45 b8                  	movq	-72(%rbp), %rax
    34df: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    34e3: 48 c7 45 e0 01 00 00 00      	movq	$1, -32(%rbp)
    34eb: 48 8b 45 e0                  	movq	-32(%rbp), %rax
    34ef: 48 8b 55 e8                  	movq	-24(%rbp), %rdx
    34f3: 48 83 c4 50                  	addq	$80, %rsp
    34f7: 5d                           	popq	%rbp
    34f8: c3                           	retq
    34f9: cc                           	int3
    34fa: cc                           	int3
    34fb: cc                           	int3
    34fc: cc                           	int3
    34fd: cc                           	int3
    34fe: cc                           	int3
    34ff: cc                           	int3

0000000000003500 <<I as core::iter::traits::collect::IntoIterator>::into_iter>:
    3500: 55                           	pushq	%rbp
    3501: 48 89 e5                     	movq	%rsp, %rbp
    3504: 48 83 ec 10                  	subq	$16, %rsp
    3508: 48 89 f2                     	movq	%rsi, %rdx
    350b: 48 89 f8                     	movq	%rdi, %rax
    350e: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    3512: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
    3516: 48 83 c4 10                  	addq	$16, %rsp
    351a: 5d                           	popq	%rbp
    351b: c3                           	retq
    351c: cc                           	int3
    351d: cc                           	int3
    351e: cc                           	int3
    351f: cc                           	int3

0000000000003520 <core::str::converts::from_utf8_unchecked>:
    3520: 55                           	pushq	%rbp
    3521: 48 89 e5                     	movq	%rsp, %rbp
    3524: 48 83 ec 30                  	subq	$48, %rsp
    3528: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    352c: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    3530: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    3534: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    3538: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    353c: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    3540: 48 8b 45 f8                  	movq	-8(%rbp), %rax
    3544: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    3548: 48 8b 55 d8                  	movq	-40(%rbp), %rdx
    354c: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    3550: 48 83 c4 30                  	addq	$48, %rsp
    3554: 5d                           	popq	%rbp
    3555: c3                           	retq
    3556: cc                           	int3
    3557: cc                           	int3
    3558: cc                           	int3
    3559: cc                           	int3
    355a: cc                           	int3
    355b: cc                           	int3
    355c: cc                           	int3
    355d: cc                           	int3
    355e: cc                           	int3
    355f: cc                           	int3

0000000000003560 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count>:
    3560: 55                           	pushq	%rbp
    3561: 48 89 e5                     	movq	%rsp, %rbp
    3564: 48 83 ec 30                  	subq	$48, %rsp
    3568: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    356c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    3570: e8 3b fc ff ff               	callq	0x31b0 <core::iter::traits::iterator::Iterator::filter>
    3575: 48 89 45 d8                  	movq	%rax, -40(%rbp)
    3579: 48 89 55 e0                  	movq	%rdx, -32(%rbp)
    357d: 48 8b 75 e0                  	movq	-32(%rbp), %rsi
    3581: 48 8b 7d d8                  	movq	-40(%rbp), %rdi
    3585: e8 c6 e0 ff ff               	callq	0x1650 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count>
    358a: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    358e: 48 8b 45 d0                  	movq	-48(%rbp), %rax
    3592: 48 83 c4 30                  	addq	$48, %rsp
    3596: 5d                           	popq	%rbp
    3597: c3                           	retq
    3598: cc                           	int3
    3599: cc                           	int3
    359a: cc                           	int3
    359b: cc                           	int3
    359c: cc                           	int3
    359d: cc                           	int3
    359e: cc                           	int3
    359f: cc                           	int3

00000000000035a0 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count::{{closure}}>:
    35a0: 55                           	pushq	%rbp
    35a1: 48 89 e5                     	movq	%rsp, %rbp
    35a4: 48 83 ec 20                  	subq	$32, %rsp
    35a8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
    35ac: 48 89 75 f0                  	movq	%rsi, -16(%rbp)
    35b0: 48 8b 06                     	movq	(%rsi), %rax
    35b3: 8a 00                        	movb	(%rax), %al
    35b5: 88 45 ff                     	movb	%al, -1(%rbp)
    35b8: 0f b6 f8                     	movzbl	%al, %edi
    35bb: e8 40 01 00 00               	callq	0x3700 <core::str::validations::utf8_is_cont_byte>
    35c0: 88 45 e7                     	movb	%al, -25(%rbp)
    35c3: 8a 45 e7                     	movb	-25(%rbp), %al
    35c6: 34 ff                        	xorb	$-1, %al
    35c8: 24 01                        	andb	$1, %al
    35ca: 0f b6 c0                     	movzbl	%al, %eax
    35cd: 48 83 c4 20                  	addq	$32, %rsp
    35d1: 5d                           	popq	%rbp
    35d2: c3                           	retq
    35d3: cc                           	int3
    35d4: cc                           	int3
    35d5: cc                           	int3
    35d6: cc                           	int3
    35d7: cc                           	int3
    35d8: cc                           	int3
    35d9: cc                           	int3
    35da: cc                           	int3
    35db: cc                           	int3
    35dc: cc                           	int3
    35dd: cc                           	int3
    35de: cc                           	int3
    35df: cc                           	int3

00000000000035e0 <<usize as core::iter::range::Step>::forward_unchecked>:
    35e0: 55                           	pushq	%rbp
    35e1: 48 89 e5                     	movq	%rsp, %rbp
    35e4: 48 83 ec 20                  	subq	$32, %rsp
    35e8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    35ec: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    35f0: e8 9b ea ff ff               	callq	0x2090 <core::num::<impl usize>::unchecked_add>
    35f5: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    35f9: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    35fd: 48 83 c4 20                  	addq	$32, %rsp
    3601: 5d                           	popq	%rbp
    3602: c3                           	retq
    3603: cc                           	int3
    3604: cc                           	int3
    3605: cc                           	int3
    3606: cc                           	int3
    3607: cc                           	int3
    3608: cc                           	int3
    3609: cc                           	int3
    360a: cc                           	int3
    360b: cc                           	int3
    360c: cc                           	int3
    360d: cc                           	int3
    360e: cc                           	int3
    360f: cc                           	int3

0000000000003610 <core::any::TypeId::of>:
    3610: 55                           	pushq	%rbp
    3611: 48 89 e5                     	movq	%rsp, %rbp
    3614: 48 83 ec 18                  	subq	$24, %rsp
    3618: 48 b8 be 38 f4 b1 ba 7f 01 d1	movabsq	$-3386285004979685186, %rax
    3622: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    3626: 48 8b 45 f8                  	movq	-8(%rbp), %rax
    362a: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    362e: 48 8b 45 e8                  	movq	-24(%rbp), %rax
    3632: 48 89 45 f0                  	movq	%rax, -16(%rbp)
    3636: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    363a: 48 83 c4 18                  	addq	$24, %rsp
    363e: 5d                           	popq	%rbp
    363f: c3                           	retq

0000000000003640 <core::str::<impl str>::len>:
    3640: 55                           	pushq	%rbp
    3641: 48 89 e5                     	movq	%rsp, %rbp
    3644: 48 83 ec 50                  	subq	$80, %rsp
    3648: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
    364c: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
    3650: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    3654: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    3658: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    365c: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    3660: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    3664: 48 89 45 c0                  	movq	%rax, -64(%rbp)
    3668: 48 8b 45 f8                  	movq	-8(%rbp), %rax
    366c: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    3670: 48 8b 75 c8                  	movq	-56(%rbp), %rsi
    3674: 48 8b 7d c0                  	movq	-64(%rbp), %rdi
    3678: e8 13 d3 ff ff               	callq	0x990 <core::slice::<impl [T]>::len>
    367d: 48 89 45 b8                  	movq	%rax, -72(%rbp)
    3681: 48 8b 45 b8                  	movq	-72(%rbp), %rax
    3685: 48 83 c4 50                  	addq	$80, %rsp
    3689: 5d                           	popq	%rbp
    368a: c3                           	retq
    368b: cc                           	int3
    368c: cc                           	int3
    368d: cc                           	int3
    368e: cc                           	int3
    368f: cc                           	int3

0000000000003690 <core::str::<impl str>::chars>:
    3690: 55                           	pushq	%rbp
    3691: 48 89 e5                     	movq	%rsp, %rbp
    3694: 48 83 ec 60                  	subq	$96, %rsp
    3698: 48 89 7d d0                  	movq	%rdi, -48(%rbp)
    369c: 48 89 75 d8                  	movq	%rsi, -40(%rbp)
    36a0: 48 89 7d e0                  	movq	%rdi, -32(%rbp)
    36a4: 48 89 75 e8                  	movq	%rsi, -24(%rbp)
    36a8: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
    36ac: 48 89 75 f8                  	movq	%rsi, -8(%rbp)
    36b0: 48 8b 45 f0                  	movq	-16(%rbp), %rax
    36b4: 48 89 45 b0                  	movq	%rax, -80(%rbp)
    36b8: 48 8b 45 f8                  	movq	-8(%rbp), %rax
    36bc: 48 89 45 b8                  	movq	%rax, -72(%rbp)
    36c0: 48 8b 75 b8                  	movq	-72(%rbp), %rsi
    36c4: 48 8b 7d b0                  	movq	-80(%rbp), %rdi
    36c8: e8 13 d3 ff ff               	callq	0x9e0 <core::slice::<impl [T]>::iter>
    36cd: 48 89 45 a0                  	movq	%rax, -96(%rbp)
    36d1: 48 89 55 a8                  	movq	%rdx, -88(%rbp)
    36d5: 48 8b 45 a8                  	movq	-88(%rbp), %rax
    36d9: 48 8b 4d a0                  	movq	-96(%rbp), %rcx
    36dd: 48 89 4d c0                  	movq	%rcx, -64(%rbp)
    36e1: 48 89 45 c8                  	movq	%rax, -56(%rbp)
    36e5: 48 8b 45 c0                  	movq	-64(%rbp), %rax
    36e9: 48 8b 55 c8                  	movq	-56(%rbp), %rdx
    36ed: 48 83 c4 60                  	addq	$96, %rsp
    36f1: 5d                           	popq	%rbp
    36f2: c3                           	retq
    36f3: cc                           	int3
    36f4: cc                           	int3
    36f5: cc                           	int3
    36f6: cc                           	int3
    36f7: cc                           	int3
    36f8: cc                           	int3
    36f9: cc                           	int3
    36fa: cc                           	int3
    36fb: cc                           	int3
    36fc: cc                           	int3
    36fd: cc                           	int3
    36fe: cc                           	int3
    36ff: cc                           	int3

0000000000003700 <core::str::validations::utf8_is_cont_byte>:
    3700: 55                           	pushq	%rbp
    3701: 48 89 e5                     	movq	%rsp, %rbp
    3704: 48 83 ec 01                  	subq	$1, %rsp
    3708: 40 88 f8                     	movb	%dil, %al
    370b: 88 45 ff                     	movb	%al, -1(%rbp)
    370e: 24 c0                        	andb	$-64, %al
    3710: 3c 80                        	cmpb	$-128, %al
    3712: 0f 94 c0                     	sete	%al
    3715: 24 01                        	andb	$1, %al
    3717: 0f b6 c0                     	movzbl	%al, %eax
    371a: 48 83 c4 01                  	addq	$1, %rsp
    371e: 5d                           	popq	%rbp
    371f: c3                           	retq

0000000000003720 <memcpy>:
    3720: 55                           	pushq	%rbp
    3721: 48 89 e5                     	movq	%rsp, %rbp
    3724: 48 83 ec 48                  	subq	$72, %rsp
    3728: 48 89 d0                     	movq	%rdx, %rax
    372b: 48 89 7d b8                  	movq	%rdi, -72(%rbp)
    372f: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
    3733: 48 89 75 c8                  	movq	%rsi, -56(%rbp)
    3737: 48 89 45 d0                  	movq	%rax, -48(%rbp)
    373b: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    373f: 48 89 75 e0                  	movq	%rsi, -32(%rbp)
    3743: 48 89 45 e8                  	movq	%rax, -24(%rbp)
    3747: 48 89 c1                     	movq	%rax, %rcx
    374a: 48 c1 e9 03                  	shrq	$3, %rcx
    374e: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    3752: 48 83 e0 07                  	andq	$7, %rax
    3756: 48 89 45 f8                  	movq	%rax, -8(%rbp)
    375a: f3 48 a5                     	rep		movsq	(%rsi), %es:(%rdi)
    375d: 89 c1                        	movl	%eax, %ecx
    375f: f3 a4                        	rep		movsb	(%rsi), %es:(%rdi)
    3761: 48 8b 45 b8                  	movq	-72(%rbp), %rax
    3765: 48 83 c4 48                  	addq	$72, %rsp
    3769: 5d                           	popq	%rbp
    376a: c3                           	retq
    376b: cc                           	int3
    376c: cc                           	int3
    376d: cc                           	int3
    376e: cc                           	int3
    376f: cc                           	int3

0000000000003770 <memset>:
    3770: 55                           	pushq	%rbp
    3771: 48 89 e5                     	movq	%rsp, %rbp
    3774: 48 83 ec 60                  	subq	$96, %rsp
    3778: 48 89 7d a0                  	movq	%rdi, -96(%rbp)
    377c: 48 89 7d c0                  	movq	%rdi, -64(%rbp)
    3780: 89 75 cc                     	movl	%esi, -52(%rbp)
    3783: 48 89 55 d0                  	movq	%rdx, -48(%rbp)
    3787: 40 88 f0                     	movb	%sil, %al
    378a: 48 89 7d d8                  	movq	%rdi, -40(%rbp)
    378e: 88 45 e7                     	movb	%al, -25(%rbp)
    3791: 48 89 55 e8                  	movq	%rdx, -24(%rbp)
    3795: 48 89 d1                     	movq	%rdx, %rcx
    3798: 48 c1 e9 03                  	shrq	$3, %rcx
    379c: 48 89 4d a8                  	movq	%rcx, -88(%rbp)
    37a0: 48 89 4d f0                  	movq	%rcx, -16(%rbp)
    37a4: 48 83 e2 07                  	andq	$7, %rdx
    37a8: 48 89 55 b0                  	movq	%rdx, -80(%rbp)
    37ac: 48 89 55 f8                  	movq	%rdx, -8(%rbp)
    37b0: 0f b6 c0                     	movzbl	%al, %eax
    37b3: 48 b9 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %rcx
    37bd: 48 f7 e1                     	mulq	%rcx
    37c0: 48 89 45 b8                  	movq	%rax, -72(%rbp)
    37c4: 0f 90 c0                     	seto	%al
    37c7: a8 01                        	testb	$1, %al
    37c9: 75 02                        	jne	0x37cd <memset+0x5d>
    37cb: eb 1a                        	jmp	0x37e7 <memset+0x77>
    37cd: 48 8d 3d cc 1e 00 00         	leaq	7884(%rip), %rdi  # 56a0 <str.0>
    37d4: 48 8d 15 35 0a 00 00         	leaq	2613(%rip), %rdx  # 4210 <core::fmt::num::DEC_DIGITS_LUT+0x158>
    37db: be 21 00 00 00               	movl	$33, %esi
    37e0: e8 1b d1 ff ff               	callq	0x900 <core::panicking::panic>
    37e5: 0f 0b                        	ud2
    37e7: 48 8b 45 b8                  	movq	-72(%rbp), %rax
    37eb: 48 8b 7d a0                  	movq	-96(%rbp), %rdi
    37ef: 48 8b 4d a8                  	movq	-88(%rbp), %rcx
    37f3: 48 8b 55 b0                  	movq	-80(%rbp), %rdx
    37f7: f3 48 ab                     	rep		stosq	%rax, %es:(%rdi)
    37fa: 89 d1                        	movl	%edx, %ecx
    37fc: f3 aa                        	rep		stosb	%al, %es:(%rdi)
    37fe: 48 8b 45 a0                  	movq	-96(%rbp), %rax
    3802: 48 83 c4 60                  	addq	$96, %rsp
    3806: 5d                           	popq	%rbp
    3807: c3                           	retq
